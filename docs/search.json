[{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"before-you-start","dir":"Articles","previous_headings":"","what":"Before you start","title":"tmod: Analysis of Gene Set Enrichments","text":"comprehensive user manual tmod found github. document shortened version manual, adapted ship vignette package. Therefore, offline, strongly suggest use online version.","code":""},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"quick-start-guide","dir":"Articles","previous_headings":"","what":"Quick start guide","title":"tmod: Analysis of Gene Set Enrichments","text":"First, obtain ordered list genes. example, list genes ordered q-values (FDR): Run CERNO test: Visualize results:  Inspect individual gene sets using evidence plots:  Find genes DC.M1.2:","code":"library(tmod) data(EgambiaResults) tt <- EgambiaResults tt <- tt[ order(tt$adj.P.Val), ] l  <- tt$GENE_SYMBOL res <- tmodCERNOtest(l) head(res) ##                ID                               Title    cerno  N1       AUC ## LI.M37.0 LI.M37.0 immune activation - generic cluster 426.3578 100 0.7462103 ## DC.M4.2   DC.M4.2                        Inflammation 151.1520  20 0.9503953 ## DC.M3.4   DC.M3.4                          Interferon 129.4727  17 0.8315780 ## DC.M1.2   DC.M1.2                          Interferon 112.7056  17 0.9004196 ## DC.M7.29 DC.M7.29                        Undetermined 118.6759  20 0.8087599 ## LI.M11.0 LI.M11.0          enriched in monocytes (II) 113.8086  20 0.7766542 ##               cES      P.Value    adj.P.Val ## LI.M37.0 2.131789 1.824844e-18 1.105856e-15 ## DC.M4.2  3.778799 8.040039e-15 2.436132e-12 ## DC.M3.4  3.808019 4.609405e-13 9.310998e-11 ## DC.M1.2  3.314869 2.298170e-10 3.481728e-08 ## DC.M7.29 2.966897 1.002268e-09 1.214749e-07 ## LI.M11.0 2.845216 5.255069e-09 5.307620e-07 ggPanelplot(res) ggEvidencePlot(l, \"LI.M37.0\", gene.labels=FALSE) ggEvidencePlot(l, \"DC.M4.2\") ggEvidencePlot(l, \"DC.M3.4\") ggEvidencePlot(l, \"DC.M1.2\") getModuleMembers(\"DC.M1.2\") ## $DC.M1.2 ##  [1] \"LY6E\"      \"IFIT1\"     \"OAS1\"      \"IFIT3\"     \"OAS3\"      \"OASL\"      ##  [7] \"LOC129607\" \"ISG15\"     \"HERC5\"     \"MX1\"       \"BATF2\"     \"LAMP3\"     ## [13] \"IFI44L\"    \"XAF1\"      \"IFI44\"     \"OAS2\"      \"TRIM6\"     \"HES4\"      ## [19] \"OTOF\"      \"FLJ20035\"  \"IFITM3\"    \"CXCL10\"    \"EPSTI1\"    \"SERPING1\"  ## [25] \"LOC26010\"  \"RSAD2\"     \"RTP4\""},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"tmod: Analysis of Gene Set Enrichments","text":"Gene set enrichment (GSE) analysis increasingly important tool biological interpretation high throughput data, versatile powerful. general, three generations GSE algorithms packages. First generation approaches test enrichment defined sets differentially expressed genes (often called “foreground”) set genes (“background”). statistical test involved usually hypergeometric Fisher’s exact test. main problem kind approach relies arbitrary thresholds (like p-value log fold change cut-offs), number genes go “foreground” set depends statistical power involved. Comparison experimental condition thus yield vastly different results depending number samples used experiment. second generation GSE involve tests rely arbitrary definitions differentially expressed, , instead directly indirectly employ information statistical distribution individual genes. popular implementation type GSE analysis eponymous GSEA program (Subramanian et al. 2005). popular quite powerful range applications, software important limitations due reliance bootstrapping obtain exact p-value. one thing, performance GSEA dramatically decreases small sample numbers (Weiner 3rd Domaszewska 2016). Moreover, specifics approach prevent used applications direct test differential expression either present (example, multivariate functional analysis, see Section “Functional multivariate analysis”). tmod package (Zyla et al. 2019) included CERNO1 test belong second generation algorithms. However, unlike program GSEA, CERNO relies exclusively ordered list genes, test statistic χ² distribution. Thus, suitable application ordered list genes generated: example, possible apply tmod weights PCA components variable importance measure machine learning model. tmod created following properties mind: () test enrichment relies list sorted genes, (ii) analytical solution, (iii) flexible, allowing custom gene sets analyses, (iv) visualizations multiple analysis results, suitable time series suchlike, (v) including transcriptional module definitions present databases , finally, (vi) suitable use R.","code":""},{"path":[]},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"introduction-1","dir":"Articles","previous_headings":"Dive into tmod: analysis of transcriptomic responses to tuberculosis","what":"Introduction","title":"tmod: Analysis of Gene Set Enrichments","text":"chapter, use example data set included tmod show application tmod analysis differential gene expression. data set generated Maertzdorf et al. (2011) GEO ID GSE28623. based whole blood RNA microarrays tuberculosis (TB) patients healthy controls. Although microarrays used generate data, principle RNASeq.","code":""},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"the-gambia-data-set","dir":"Articles","previous_headings":"Dive into tmod: analysis of transcriptomic responses to tuberculosis","what":"The Gambia data set","title":"tmod: Analysis of Gene Set Enrichments","text":"following, use Egambia data set included package. data already background corrected normalized, can proceed differential gene expression analysis. Note bit 5000 genes original set 45000 probes included. results data set obtained using limma package follows: However, also included tmod package: table shows first couple results table tt. OK, see genes known prominent human host response TB. can display one using tmod’s showGene function (’s just boxplot combined beeswarm, nothing special):  Fine, gene sets?","code":"library(tmod) data(Egambia) E <- as.matrix(Egambia[,-c(1:3)]) library(limma) design <- cbind(Intercept=rep(1, 30), TB=rep(c(0,1), each= 15)) fit <- eBayes(lmFit(E, design)) tt <- topTable(fit, coef=2, number=Inf,    genelist=Egambia[,1:3]) data(EgambiaResults) tt <- EgambiaResults group <- rep( c(\"CTRL\", \"TB\"), each=15) showGene(E[\"20799\",], group,   main=Egambia[\"20799\", \"GENE_SYMBOL\"])"},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"transcriptional-module-analysis-with-gse","dir":"Articles","previous_headings":"Dive into tmod: analysis of transcriptomic responses to tuberculosis","what":"Transcriptional module analysis with GSE","title":"tmod: Analysis of Gene Set Enrichments","text":"two main functions tmod understand modules gene sets significantly enriched. several statistical tests can used within tmod (see chapter “Statistical tests tmod” ), use CERNO test, main reason package exist. CERNO particularly fast robust second generation approach, recommended applications. CERNO works ordered list genes (ranks matter, statistic necessary); idea test, gene set, whether genes gene set likely others beginning list. CERNO statistic \\(\\chi^2\\) distribution therefore randomization necessary, making test really fast. first 15 results shown . Columns table contain following: ID module ID. IDs starting “LI” come Li et al. (Li et al. 2014), IDs starting “DC” defined Chaussabel et al. (Chaussabel et al. 2008). Title module description cerno CERNO statistic N1 Number genes module AUC area curve – main size estimate cES CERNO statistic divided \\(2\\times N1\\) P.Value P-value hypergeometric test adj.P.Val P-value adjusted multiple testing using Benjamini-Hochberg correction results make lot sense: transcriptional modules found enriched comparison TB patients healthy individuals line published findings. especially, see interferon response, complement system well T-cell related modules.","code":"l    <- tt$GENE_SYMBOL resC <- tmodCERNOtest(l) head(resC, 15) ##                  ID                                      Title cerno  N1   AUC ## LI.M37.0   LI.M37.0        immune activation - generic cluster 426.4 100 0.746 ## DC.M4.2     DC.M4.2                               Inflammation 151.2  20 0.950 ## DC.M3.4     DC.M3.4                                 Interferon 129.5  17 0.832 ## DC.M1.2     DC.M1.2                                 Interferon 112.7  17 0.900 ## DC.M7.29   DC.M7.29                               Undetermined 118.7  20 0.809 ## LI.M11.0   LI.M11.0                 enriched in monocytes (II) 113.8  20 0.777 ## DC.M3.2     DC.M3.2                               Inflammation 124.0  24 0.836 ## LI.S4         LI.S4                 Monocyte surface signature  76.4  10 0.897 ## LI.M112.0 LI.M112.0                  complement activation (I)  73.7  11 0.846 ## DC.M7.35   DC.M7.35                               Undetermined  82.4  14 0.803 ## DC.M7.16   DC.M7.16                               Undetermined  66.2  10 0.822 ## LI.M75       LI.M75                    antiviral IFN signature  65.3  10 0.893 ## LI.M16       LI.M16             TLR and inflammatory signaling  46.3   5 0.979 ## LI.M67       LI.M67                  activated dendritic cells  49.5   6 0.971 ## LI.M165     LI.M165 enriched in activated dendritic cells (II)  91.7  19 0.720 ##            cES  P.Value adj.P.Val ## LI.M37.0  2.13 1.82e-18  1.11e-15 ## DC.M4.2   3.78 8.04e-15  2.44e-12 ## DC.M3.4   3.81 4.61e-13  9.31e-11 ## DC.M1.2   3.31 2.30e-10  3.48e-08 ## DC.M7.29  2.97 1.00e-09  1.21e-07 ## LI.M11.0  2.85 5.26e-09  5.31e-07 ## DC.M3.2   2.58 1.21e-08  1.05e-06 ## LI.S4     3.82 1.61e-08  1.22e-06 ## LI.M112.0 3.35 1.72e-07  1.16e-05 ## DC.M7.35  2.94 2.93e-07  1.77e-05 ## DC.M7.16  3.31 7.38e-07  4.06e-05 ## LI.M75    3.26 1.05e-06  5.28e-05 ## LI.M16    4.63 1.25e-06  5.81e-05 ## LI.M67    4.13 1.69e-06  7.32e-05 ## LI.M165   2.41 2.44e-06  9.86e-05"},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"visualizing-results","dir":"Articles","previous_headings":"Dive into tmod: analysis of transcriptomic responses to tuberculosis","what":"Visualizing results","title":"tmod: Analysis of Gene Set Enrichments","text":"main working horse visualizing results tmod function ggPanelplot. really glorified heatmap shows effect size (size blob figure ) p-value (intensity color). column corresponds different comparison. , one column comparison made, however need wrap list object. However, can also use slightly different representation also show many significantly - -regulated2 genes found enriched modules (right panel figure ). Note: use plot_grid function cowplot package put figures side side.  right hand side, red color bars indicates signficantly regulated enriched modules. size bar corresponds AUC, intensity color corresponds p-value. See chapter “Visualisation presentation results tmod” information functions.","code":"library(cowplot)  g1 <- ggPanelplot(list(Gambia=resC))  ## calculate the number of significant genes ## per module sgenes <- tmodDecideTests(g=tt$GENE_SYMBOL,   lfc=tt$logFC,   pval=tt$adj.P.Val) names(sgenes) <- \"Gambia\" g2 <- ggPanelplot(list(Gambia=resC), sgenes = sgenes) plot_grid(g1, g2, labels=c(\"A\", \"B\"))"},{"path":[]},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"introduction-2","dir":"Articles","previous_headings":"Statistical tests in tmod","what":"Introduction","title":"tmod: Analysis of Gene Set Enrichments","text":"substantial numer different gene set enrichment tests. Several implemented tmod (see Table summary). chapter gives overview possibilities gene set enrichment analysis tmod. following, briefly describe various tests show examples usage Gambia data set.","code":""},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"first-generation-tests","dir":"Articles","previous_headings":"Statistical tests in tmod","what":"First generation tests","title":"tmod: Analysis of Gene Set Enrichments","text":"First generation tests based overrepresentation analysis (ORA). essence, rely splitting genes two groups: genes interest (foreground), genes consider significantly regulated experimental condition, rest (background). given gene set, results \\(2\\times 2\\) contingency table. two factors independent (.e., probability gene belonging gene set independent probability gene regulated experimental condition), can easily derive expected frequencies cell table. Several statistical tests exist test whether expected frequencies differ significantly observed frequencies. tmod, function tmodHGtest(), performs hypergeometric test two groups genes: ‘foreground’ (fg), list differentially expressed genes, ‘background’ (bg) – gene universe, .e., genes present analysis. gene identifiers used currently tmod HGNC identifiers, use GENE_SYMBOL field Egambia data set. particular example, however, almost genes significantly differentially expressed correction multiple testing: power test 10 individuals group low. sake example, therefore relax selection. Normally, ’d use q-value threshold least 0.001. columns table contain following: ID module ID. IDs starting “LI” come Li et al. (Li et al. 2014), IDs starting “DC” defined Chaussabel et al. (Chaussabel et al. 2008). Title module description b Number genes given module fg set B Number genes module bg set n Size fg set N Size bg set E Enrichment, calcualted (b/n)/(B/N) P.Value P-value hypergeometric test adj.P.Val P-value adjusted multiple testing using Benjamini-Hochberg correction Well, IFN signature TB well known. However, numbers genes high: n size foreground, b number genes fg belong given module. N B respective totals – size bg+fg number genes belong module found totality analysed genes. using full Gambia data set (genes), different situation. Lack significant genes main problem ORA: splitting genes foreground background relies arbitrary threshold yield different results different sample sizes.","code":"fg <- tt$GENE_SYMBOL[tt$adj.P.Val < 0.05 & abs( tt$logFC ) > 1] resHG <- tmodHGtest(fg=fg, bg=tt$GENE_SYMBOL) options(width=60) resHG ##                  ID ## DC.M3.4     DC.M3.4 ## DC.M4.2     DC.M4.2 ## DC.M5.12   DC.M5.12 ## LI.M112.0 LI.M112.0 ## LI.M11.0   LI.M11.0 ## DC.M7.29   DC.M7.29 ## LI.M75       LI.M75 ## LI.S4         LI.S4 ## DC.M7.35   DC.M7.35 ## LI.S5         LI.S5 ## DC.M1.2     DC.M1.2 ## LI.M165     LI.M165 ## LI.M4.3     LI.M4.3 ## LI.M16       LI.M16 ##                                                      Title ## DC.M3.4                                         Interferon ## DC.M4.2                                       Inflammation ## DC.M5.12                                        Interferon ## LI.M112.0                        complement activation (I) ## LI.M11.0                        enriched in monocytes (II) ## DC.M7.29                                      Undetermined ## LI.M75                             antiviral IFN signature ## LI.S4                           Monocyte surface signature ## DC.M7.35                                      Undetermined ## LI.S5                                 DC surface signature ## DC.M1.2                                         Interferon ## LI.M165         enriched in activated dendritic cells (II) ## LI.M4.3   myeloid cell enriched receptors and transporters ## LI.M16                      TLR and inflammatory signaling ##           b  B  n    N    E  P.Value adj.P.Val ## DC.M3.4   7 17 47 4826 42.3 9.44e-11  5.72e-08 ## DC.M4.2   6 20 47 4826 30.8 2.15e-08  6.51e-06 ## DC.M5.12  4  7 47 4826 58.7 2.71e-07  5.47e-05 ## LI.M112.0 4 11 47 4826 37.3 2.48e-06  3.76e-04 ## LI.M11.0  4 20 47 4826 20.5 3.41e-05  3.45e-03 ## DC.M7.29  4 20 47 4826 20.5 3.41e-05  3.45e-03 ## LI.M75    3 10 47 4826 30.8 9.91e-05  7.50e-03 ## LI.S4     3 10 47 4826 30.8 9.91e-05  7.50e-03 ## DC.M7.35  3 14 47 4826 22.0 2.92e-04  1.79e-02 ## LI.S5     4 34 47 4826 12.1 2.96e-04  1.79e-02 ## DC.M1.2   3 17 47 4826 18.1 5.35e-04  2.95e-02 ## LI.M165   3 19 47 4826 16.2 7.52e-04  3.80e-02 ## LI.M4.3   2  5 47 4826 41.1 9.11e-04  3.94e-02 ## LI.M16    2  5 47 4826 41.1 9.11e-04  3.94e-02"},{"path":[]},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"u-test-tmodutest","dir":"Articles","previous_headings":"Statistical tests in tmod > Second generation tests","what":"U-test (tmodUtest)","title":"tmod: Analysis of Gene Set Enrichments","text":"Another approach sort genes (example, respective p-value) perform U-test ranks () genes belonging module (ii) genes belong module. bit slower, often works even case power statistical test differential expression low. , even genes none significant acceptable thresholds, sorting p-value another similar metric can nonetheless allow get meaningful enrichments3. Moreover, need set arbitrary thresholds, like p-value logFC cutoff. main issue U-test detects enrichments well depletions – , modules enriched bottom list (e.g. modules never, ever regulated particular comparison) detected well. often undesirable. Secondly, large modules reported significant even actual effect size (.e., AUC) modest small, just sheer number genes module. Unfortunately, also reverse true: modules small number genes, even consist highly - -regulated genes top list detected. list makes lot sense, also stable one: depend modules contain just genes. Since statistics different, b, B, n, N E columns output replaced following: U Mann-Whitney U statistics N1 Number genes module AUC Area curve – measure effect size U-test also implemented limma wilcoxGST() function.","code":"l    <- tt$GENE_SYMBOL resU <- tmodUtest(l) head(resU) ##                ID                               Title ## LI.M37.0 LI.M37.0 immune activation - generic cluster ## DC.M4.2   DC.M4.2                        Inflammation ## DC.M1.2   DC.M1.2                          Interferon ## DC.M3.2   DC.M3.2                        Inflammation ## DC.M5.15 DC.M5.15                         Neutrophils ## DC.M7.29 DC.M7.29                        Undetermined ##               U  N1   AUC  P.Value adj.P.Val ## LI.M37.0 352659 100 0.746 1.60e-17  9.68e-15 ## DC.M4.2   91352  20 0.950 1.67e-12  5.07e-10 ## DC.M1.2   73612  17 0.900 5.70e-09  9.62e-07 ## DC.M3.2   96366  24 0.836 6.35e-09  9.62e-07 ## DC.M5.15  65289  16 0.848 7.24e-07  8.77e-05 ## DC.M7.29  77738  20 0.809 9.08e-07  9.18e-05 nrow(resU) ## [1] 39"},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"cerno-test-tmodcernotest-and-tmodztest","dir":"Articles","previous_headings":"Statistical tests in tmod > Second generation tests","what":"CERNO test (tmodCERNOtest and tmodZtest)","title":"tmod: Analysis of Gene Set Enrichments","text":"two tests tmod operate ordered list genes: tmodUtest tmodCERNOtest. U test simple, however two main issues. Firstly, CERNO test, described Yamaguchi et al. (2008), based Fisher’s method combining probabilities. summary, given module, scaled ranks genes module treated probabilities. logarithmized, summed multiplied -2: \\[f_{CERNO}=-2 \\cdot \\sum_{= 1}^{N} \\ln{\\frac{R_i}{N_{tot}}}\\] statitic \\(\\chi^2\\) distribution \\(2\\cdot N\\) degrees freedom, \\(N\\) number genes given module \\(N_{tot}\\) total number genes (Yamaguchi et al. 2008). CERNO test actually much practical tests purposes recommended approach. variant called tmodZtest exists p-values combined using Stouffer’s method rather Fisher’s method.","code":"l    <- tt$GENE_SYMBOL resCERNO <- tmodCERNOtest(l) head(resCERNO) ##                ID                               Title cerno ## LI.M37.0 LI.M37.0 immune activation - generic cluster   426 ## DC.M4.2   DC.M4.2                        Inflammation   151 ## DC.M3.4   DC.M3.4                          Interferon   129 ## DC.M1.2   DC.M1.2                          Interferon   113 ## DC.M7.29 DC.M7.29                        Undetermined   119 ## LI.M11.0 LI.M11.0          enriched in monocytes (II)   114 ##           N1   AUC  cES  P.Value adj.P.Val ## LI.M37.0 100 0.746 2.13 1.82e-18  1.11e-15 ## DC.M4.2   20 0.950 3.78 8.04e-15  2.44e-12 ## DC.M3.4   17 0.832 3.81 4.61e-13  9.31e-11 ## DC.M1.2   17 0.900 3.31 2.30e-10  3.48e-08 ## DC.M7.29  20 0.809 2.97 1.00e-09  1.21e-07 ## LI.M11.0  20 0.777 2.85 5.26e-09  5.31e-07 nrow(resCERNO) ## [1] 38"},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"plage","dir":"Articles","previous_headings":"Statistical tests in tmod > Second generation tests","what":"PLAGE","title":"tmod: Analysis of Gene Set Enrichments","text":"PLAGE (Tomfohr, Lu, Kepler 2005) gene set enrichment method based singular value decomposition (SVD). idea instead running statistical test (t-test) gene separately, information present gene expression genes gene set first extracted using SVD, resulting vector (one per gene set) treated “pseudo gene” analysed using approppriate statistical tool. tmod implementation, module gene expression matrix subset generated decomposed using PCA using eigengene() function. first component returned t-test comparing two groups performed. limits implementation two groups, extending one group trivial.","code":"tmodPLAGEtest(Egambia$GENE_SYMBOL, Egambia[,-c(1:3)], group=group) ## Converting group to factor ## Calculating eigengenes... ##                  ID ## LI.S4         LI.S4 ## LI.M11.0   LI.M11.0 ## DC.M9.29   DC.M9.29 ## DC.M5.12   DC.M5.12 ## DC.M7.29   DC.M7.29 ## DC.M3.4     DC.M3.4 ## LI.M16       LI.M16 ## DC.M4.2     DC.M4.2 ## DC.M7.16   DC.M7.16 ## LI.M67       LI.M67 ## LI.M37.0   LI.M37.0 ## LI.M4.3     LI.M4.3 ## LI.M118.0 LI.M118.0 ## LI.M37.1   LI.M37.1 ## LI.M112.0 LI.M112.0 ## LI.M105     LI.M105 ## DC.M3.2     DC.M3.2 ## LI.M75       LI.M75 ## LI.M35.0   LI.M35.0 ## LI.M121     LI.M121 ## LI.M165     LI.M165 ## DC.M4.10   DC.M4.10 ## LI.M81       LI.M81 ##                                                      Title ## LI.S4                           Monocyte surface signature ## LI.M11.0                        enriched in monocytes (II) ## DC.M9.29                                      Undetermined ## DC.M5.12                                        Interferon ## DC.M7.29                                      Undetermined ## DC.M3.4                                         Interferon ## LI.M16                      TLR and inflammatory signaling ## DC.M4.2                                       Inflammation ## DC.M7.16                                      Undetermined ## LI.M67                           activated dendritic cells ## LI.M37.0               immune activation - generic cluster ## LI.M4.3   myeloid cell enriched receptors and transporters ## LI.M118.0                       enriched in monocytes (IV) ## LI.M37.1                       enriched in neutrophils (I) ## LI.M112.0                        complement activation (I) ## LI.M105                                                TBA ## DC.M3.2                                       Inflammation ## LI.M75                             antiviral IFN signature ## LI.M35.0                          signaling in T cells (I) ## LI.M121                                                TBA ## LI.M165         enriched in activated dendritic cells (II) ## DC.M4.10                                            B cell ## LI.M81             enriched in myeloid cells and monocytes ##               t     D AbsD  P.Value adj.P.Val ## LI.S4     -7.17 -2.62 2.62 9.96e-08  5.36e-05 ## LI.M11.0  -6.45 -2.35 2.35 5.51e-07  1.18e-04 ## DC.M9.29  -6.54 -2.39 2.39 6.57e-07  1.18e-04 ## DC.M5.12  -5.97 -2.18 2.18 2.10e-06  2.83e-04 ## DC.M7.29  -5.99 -2.19 2.19 2.92e-06  3.14e-04 ## DC.M3.4   -5.70 -2.08 2.08 4.21e-06  3.78e-04 ## LI.M16    -5.34 -1.95 1.95 1.09e-05  8.41e-04 ## DC.M4.2   -5.22 -1.91 1.91 1.54e-05  1.03e-03 ## DC.M7.16  -5.11 -1.87 1.87 2.18e-05  1.31e-03 ## LI.M67    -4.69 -1.71 1.71 6.59e-05  3.37e-03 ## LI.M37.0  -4.73 -1.73 1.73 6.89e-05  3.37e-03 ## LI.M4.3   -4.63 -1.69 1.69 9.74e-05  3.87e-03 ## LI.M118.0 -4.62 -1.69 1.69 9.75e-05  3.87e-03 ## LI.M37.1  -4.53 -1.66 1.66 1.01e-04  3.87e-03 ## LI.M112.0 -4.36 -1.59 1.59 1.75e-04  6.29e-03 ## LI.M105   -4.10 -1.50 1.50 3.28e-04  1.10e-02 ## DC.M3.2   -3.93 -1.44 1.44 5.15e-04  1.63e-02 ## LI.M75    -3.91 -1.43 1.43 5.63e-04  1.68e-02 ## LI.M35.0  -3.81 -1.39 1.39 7.35e-04  2.00e-02 ## LI.M121   -3.79 -1.39 1.39 7.50e-04  2.00e-02 ## LI.M165   -3.77 -1.38 1.38 7.80e-04  2.00e-02 ## DC.M4.10   3.78  1.38 1.38 8.60e-04  2.10e-02 ## LI.M81    -3.80 -1.39 1.39 9.29e-04  2.17e-02"},{"path":[]},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"introduction-3","dir":"Articles","previous_headings":"Visualisation and presentation of results in tmod","what":"Introduction","title":"tmod: Analysis of Gene Set Enrichments","text":"default, results produced tmod data frames containing one row per tested gene set / module. certain circumstances, multiple tests performed, returned object list element results table. situations list can created manually. case, often necessary extract, compare summarize one result tables.","code":""},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"visualizing-gene-sets-with-eigengene","dir":"Articles","previous_headings":"Visualisation and presentation of results in tmod","what":"Visualizing gene sets with eigengene","title":"tmod: Analysis of Gene Set Enrichments","text":"One frequent demands somehow show differences transcription gene sets groups. usually quite bothersome. One possibility use heatmap, another show genes vary groups. options result messy, frequently biased pictures (example, “best” genes selected heatmap). code shows select genes module getModuleMembers() function. , use Gambia data set LI.M75 interferon module. Matix x contains expression genes selected module (one row per gene, one column per sample). , heatmaps line plots can generated. Note approaches discouraged. Firstly, representations chaotic hard read. Secondly, easy manipulate plots order make effects prominent really . Thirdly, use lot space ink convey little useful interpretable information, sin(Tufte Graves-Morris 2014).   better (perfect) approach use eigengenes. eigengene vector numbers thought represent genes gene set. calculated running principal component analysis expression matrix genes interest. vector can thought “average” “representative” gene gene set. , calculate eigengenes modules tmod display two . object eig contain one row per module one column per sample.  fact, one can compare eigengenes using t.test another statistical procedure – essence PLAGE algorithm, described earlier.","code":"m <- \"LI.M75\" ## getModuleMembers returns a list – you can choose to  ## select multiple modules genes <- getModuleMembers(m)[[1]] sel <- Egambia$GENE_SYMBOL %in% genes x <- data.matrix(Egambia)[sel, -c(1:3)] # expression matrix par(mfrow=c(1,2)) eig <- eigengene(Egambia[,-c(1:3)], Egambia$GENE_SYMBOL) showGene(eig[\"LI.M75\", ], group,    ylab=\"Eigengene\",   main=\"antiviral Interferon signature\") showGene(eig[\"LI.M16\", ], group,    ylab=\"Eigengene\",   main=\"TLR and inflammatory signaling\")"},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"showing-enrichment-with-evidence-plots","dir":"Articles","previous_headings":"Visualisation and presentation of results in tmod","what":"Showing enrichment with evidence plots","title":"tmod: Analysis of Gene Set Enrichments","text":"Let us first investigate detail module LI.M75, antiviral interferon signature. can use ggEvidencePlot function see module enriched list l.  essence, receiver-operator characteristic (ROC) curve, area curve (AUC) related U-statistic, P-value tmodUtest calculated, \\(\\text{AUC}=\\frac{U}{n_1\\cdot n_2}\\). U statistic AUC reported. Moreover, AUC can used calculate effect size according Wendt’s formula(Wendt 1972) rank-biserial correlation coefficient: \\[r=1-\\frac{2\\cdot U}{n_1\\cdot n_2} = 1 - 2\\cdot\\text{AUC}\\] diagram, see nine 10 genes belong LI.M75 module present Egambia data set ranked among top 1000 genes (sorted p-value). Evidence plots important tool understand whether obtained results significant statistical sense, whether also biological interest. mentioned , area evidence plot, AUC (area curve) important measure effect size. Effect size always taken consideration interpreting p-values. figure shows three different enrichments.  corresponding results shown following table: LI.M67 (activated dendritic cells) contains 6 genes, really low p-values top p-value sorted list, resulting effect size close 1. next panel shows gene set containing large number genes. effect size LI.M37.0 much smaller (0.75), thanks large number genes enrichment significant, p-value lower LI.M67. often, gene set larger number genes low p-value. However, gene sets frequently specific, corresponding effect sizes large. example, LI.M67 much interesting result: specific shows much larger effect, despite much higher p-value.","code":"l    <- tt$GENE_SYMBOL theme_set(theme_minimal()) ggEvidencePlot(l, \"LI.M75\") library(purrr) sel <- c(\"LI.M67\", \"LI.M37.0\") plots <- map(sel, ~ ggEvidencePlot(l, .x, gene.labels=FALSE)) plot_grid(plotlist = plots, labels=sel) foo <- tmodCERNOtest(l) %>% dplyr::filter(ID %in% sel)  foo %>% knitr::kable()"},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"summary-tables","dir":"Articles","previous_headings":"Visualisation and presentation of results in tmod","what":"Summary tables","title":"tmod: Analysis of Gene Set Enrichments","text":"can summarize output previously run tests (tmodUtest, tmodCERNOtest tmodHGtest) one table using tmodSummary. , create list containing results comparisons. table shows results.","code":"resAll <- list(CERNO=resC, U=resU, HG=resHG) #head(tmodSummary(resAll))"},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"panel-plots","dir":"Articles","previous_headings":"Visualisation and presentation of results in tmod","what":"Panel plots","title":"tmod: Analysis of Gene Set Enrichments","text":"list result tables (even single result table) can visualized using heatmap-like plot called “panel plot.” idea show , effect sizes p-values, , optionally, also direction gene regulation. example , use resAll object created , containing results three different tests enrichment, compare results individual tests. However, since E column HG test easily comparable AUC values (0 1), need scale . Also, need call “AUC,” otherwise can’t show values plot.  enrichment result corresponds reddish bar. size bar corresponds effect size (AUC log10(Enrichment) - 0.5, may ), color intensity corresponds p-value – pale colors show p-values closer 0.01. easily seen tmodCERNOtest sensitive option. can see also intercept term enriched genes found monocytes neutrophils. Note default, ggPanelplot shows enrichments p < 0.01, hence slight difference tmodSummary output. behavior can modified q_thr option:  However, one usually interested direction regulation. gene list sorted p-value, enriched modules may contain - -regulated genes4. often desirable visualize whether genes module go , go experimental conditions. , function tmodDecideTests used obtain number significantly - -regulated genes module. information must obtained separately differential gene expression analysis provided list ggPanelplot. names list must identical names results list. , reuse object three tests, since DEGs (differentially expressed genes) three comparisons.  mini-plot shows effect size enrichment corresponding p-value, . Additionally, fraction -regulated -regulated genes visualized coloring fraction area mini-plot red blue, respectively5. ggPanelplot function several parameters, notably filtering labelling: filter_row_q filter_row_auc remove gene sets , respectively, FDR p-value effect size achieved comparisons; q_cutoff: enrichments q-values cutoff considered absent ggPanelplot function returns ggplot2 graph, therefore allows much customization.","code":"resAll$HG$AUC <- log10(resAll$HG$E) - 0.5 ggPanelplot(resAll) ggPanelplot(resAll, q_thr=1e-3) degs <- tmodDecideTests(g=tt$GENE_SYMBOL, lfc=tt$logFC,                        pval=tt$adj.P.Val)[[1]] degs <- list(CERNO=degs, HG=degs, U=degs) ggPanelplot(resAll, sgenes = degs)"},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"using-tmod-for-other-types-of-gse-analyses","dir":"Articles","previous_headings":"","what":"Using tmod for other types of GSE analyses","title":"tmod: Analysis of Gene Set Enrichments","text":"fact tmod relies single ordered list genes makes useful many situations list presents .","code":""},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"correlation-analysis","dir":"Articles","previous_headings":"Using tmod for other types of GSE analyses","what":"Correlation analysis","title":"tmod: Analysis of Gene Set Enrichments","text":"Genes can ordered absolute correlation variable even data set module. example, one can ask question function particular unknown gene – ANKRD22, annotated “ankyrin repeat domain 22.” Clearly, ANKRD22 correlates immune related genes, interferon inducible. another example, consider correlation genes first principal component (“eigengene”) group genes unknown function6. demonstrate method, select genes module “LI.M75.” , use function getGenes optional argument genes used filter genes module genes present data set.","code":"x <- E[ match(\"ANKRD22\", Egambia$GENE_SYMBOL), ] cors <- t(cor(x, t(E))) ord <- order(abs(cors), decreasing=TRUE) head(tmodCERNOtest(Egambia$GENE_SYMBOL[ ord ])) ##                ID ## LI.M37.0 LI.M37.0 ## DC.M3.4   DC.M3.4 ## DC.M4.2   DC.M4.2 ## DC.M1.2   DC.M1.2 ## DC.M7.29 DC.M7.29 ## LI.M165   LI.M165 ##                                               Title cerno ## LI.M37.0        immune activation - generic cluster   431 ## DC.M3.4                                  Interferon   142 ## DC.M4.2                                Inflammation   151 ## DC.M1.2                                  Interferon   132 ## DC.M7.29                               Undetermined   117 ## LI.M165  enriched in activated dendritic cells (II)   113 ##           N1   AUC  cES  P.Value adj.P.Val ## LI.M37.0 100 0.719 2.16 4.71e-19  2.85e-16 ## DC.M3.4   17 0.866 4.17 4.25e-15  1.29e-12 ## DC.M4.2   20 0.913 3.79 7.25e-15  1.46e-12 ## DC.M1.2   17 0.926 3.89 1.68e-13  2.54e-11 ## DC.M7.29  20 0.808 2.92 1.83e-09  2.20e-07 ## LI.M165   19 0.781 2.98 2.18e-09  2.20e-07 g <- getGenes(\"LI.M75\", genes=Egambia$GENE_SYMBOL,                as.list=TRUE) x <- E[ match(g[[1]], Egambia$GENE_SYMBOL), ]  ## calculating the \"eigengene\" (PC1) pca <- prcomp(t(x), scale.=T) eigen <- pca$x[,1] cors <- t(cor(eigen, t(E)))  ## order all genes by the correlation between the gene and the PC1 ord <- order(abs(cors), decreasing=TRUE) head(tmodCERNOtest(Egambia$GENE_SYMBOL[ ord ])) ##                ID ## DC.M1.2   DC.M1.2 ## DC.M3.4   DC.M3.4 ## LI.M165   LI.M165 ## LI.M75     LI.M75 ## LI.M37.0 LI.M37.0 ## DC.M4.2   DC.M4.2 ##                                               Title cerno ## DC.M1.2                                  Interferon   197 ## DC.M3.4                                  Interferon   154 ## LI.M165  enriched in activated dendritic cells (II)   155 ## LI.M75                      antiviral IFN signature   104 ## LI.M37.0        immune activation - generic cluster   364 ## DC.M4.2                                Inflammation   128 ##           N1   AUC  cES  P.Value adj.P.Val ## DC.M1.2   17 0.964 5.80 6.77e-25  4.10e-22 ## DC.M3.4   17 0.926 4.53 3.10e-17  9.40e-15 ## LI.M165   19 0.825 4.07 5.46e-16  1.10e-13 ## LI.M75    10 0.943 5.21 2.25e-13  3.42e-11 ## LI.M37.0 100 0.668 1.82 1.12e-11  1.36e-09 ## DC.M4.2   20 0.888 3.19 4.44e-11  4.49e-09"},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"functional-multivariate-analysis","dir":"Articles","previous_headings":"Using tmod for other types of GSE analyses","what":"Functional multivariate analysis","title":"tmod: Analysis of Gene Set Enrichments","text":"Transcriptional modules can help understand biological meaning calculated multivariate transformations. example, consider principal component analysis (PCA), visualised using pca3d package (Weiner 2013):  fourth component looks really interesting. correspond modules found ? principal component , , linear combination gene expression values multiplied weights (scores) constant given component. -th principal component sample j given \\[PC_{,j} = \\sum_{k} w_{,k} \\cdot x_{k,j}\\] \\(k\\) index variables (genes case), \\(w_{,k}\\) weight associated \\(\\)-th component \\(k\\)-th variable (gene), \\(x_{k,j}\\) value variable \\(k\\) sample \\(j\\); , gene expression gene \\(k\\) sample \\(j\\). Genes influence position sample along given component larger absolute weight component. example, right-hand figure , see samples taken TB patients high value principal component 4; opposite true healthy controls. genes allow us differentiate two groups large, positive weights genes highly expressed TB patients, large, negative weights genes highly expressed NID, TB. can sort genes weight given component, since weights stored pca object “rotation” slot, use tmodUtest function test enrichment modules. Perfect, expected: see neutrophil / interferon signature hallmark TB biosignature. components? can run enrichment component visualise results using tmod’s functions tmodSummary ggPanelplot. , use filter.empty option omit principal components show enrichment . following plot shows information visual form. size blobs corresponds effect size (AUC value), color – q-value.  However, might want ask, module, many genes module negative, many positive weight? can use function tmodDecideTests . principal component shown, want know many genes large (absolute terms) weights – can use “lfc” parameter tmodDecideTests . define “large” top 25% weights given component. , need first calculate 3rd quartile (top 25% threshold). show 10 components:","code":"mypal <- c(\"#E69F00\", \"#56B4E9\") pca <- prcomp(t(E), scale.=TRUE)  col <- mypal[ factor(group) ] par(mfrow=c(1, 2)) l<-pcaplot(pca, group=group, col=col)   legend(\"topleft\", as.character(l$groups),        pch=l$pch,        col=l$colors, bty=\"n\") l<-pcaplot(pca, group=group, col=col, components=3:4) legend(\"topleft\", as.character(l$groups),        pch=l$pch,        col=l$colors, bty=\"n\") o <- order(abs(pca$rotation[,4]), decreasing=TRUE) l <- Egambia$GENE_SYMBOL[o] res <- tmodUtest(l) head(res) ##                ID                               Title ## LI.M37.0 LI.M37.0 immune activation - generic cluster ## DC.M4.2   DC.M4.2                        Inflammation ## DC.M1.2   DC.M1.2                          Interferon ## DC.M3.2   DC.M3.2                        Inflammation ## DC.M7.29 DC.M7.29                        Undetermined ## DC.M3.4   DC.M3.4                          Interferon ##               U  N1   AUC  P.Value adj.P.Val ## LI.M37.0 339742 100 0.719 3.13e-14  1.90e-11 ## DC.M4.2   89378  20 0.930 1.52e-11  4.60e-09 ## DC.M1.2   74828  17 0.915 1.61e-09  3.24e-07 ## DC.M3.2   95685  24 0.830 1.14e-08  1.72e-06 ## DC.M7.29  78752  20 0.819 3.99e-07  4.84e-05 ## DC.M3.4   68058  17 0.832 1.07e-06  1.08e-04 # Calculate enrichment for each component gs   <- Egambia$GENE_SYMBOL # function calculating the enrichment of a PC gn.f <- function(r) {     tmodCERNOtest(gs[order(abs(r), decreasing=T)],                 qval=0.01) } x <- apply(pca$rotation, 2, gn.f) tmodSummary(x, filter.empty=TRUE)[1:5,] ##              ID        Title AUC.PC3    q.PC3 AUC.PC4 ## DC.M1.1 DC.M1.1    Platelets      NA       NA      NA ## DC.M1.2 DC.M1.2   Interferon      NA       NA   0.915 ## DC.M2.3 DC.M2.3 Erythrocytes   0.897 6.01e-12      NA ## DC.M3.1 DC.M3.1 Erythrocytes   0.729 1.92e-03      NA ## DC.M3.2 DC.M3.2 Inflammation   0.715 8.88e-03   0.830 ##            q.PC4 AUC.PC9 q.PC9 AUC.PC14   q.PC14 AUC.PC30 ## DC.M1.1       NA      NA    NA    0.746 7.94e-05       NA ## DC.M1.2 1.75e-08      NA    NA       NA       NA    0.828 ## DC.M2.3       NA      NA    NA       NA       NA    0.843 ## DC.M3.1       NA      NA    NA       NA       NA       NA ## DC.M3.2 7.16e-10      NA    NA       NA       NA    0.758 ##           q.PC30 ## DC.M1.1       NA ## DC.M1.2 6.79e-03 ## DC.M2.3 3.08e-07 ## DC.M3.1       NA ## DC.M3.2 1.17e-05 ggPanelplot(x) qfnc <- function(r) quantile(r, 0.75) qqs <- apply(pca$rotation[,1:10], 2, qfnc) gloadings <- tmodDecideTests(gs, lfc=pca$rotation[,1:10], lfc.thr=qqs) ggPanelplot(x[1:10], sgenes = gloadings)"},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"using-and-creating-modules-and-gene-sets","dir":"Articles","previous_headings":"","what":"Using and creating modules and gene sets","title":"tmod: Analysis of Gene Set Enrichments","text":"Tmod created transcriptional modules mind. word “module” used throughout tmod. However, gene variable set – depending application – “module” tmod. data sets can used tmod functions (including gene set enrichment test functions) specifying option mset=, example tmodCERNOtest(..., mset=mytmodobject).","code":""},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"using-built-in-gene-sets-transcriptional-modules","dir":"Articles","previous_headings":"Using and creating modules and gene sets","what":"Using built-in gene sets (transcriptional modules)","title":"tmod: Analysis of Gene Set Enrichments","text":"default, tmod uses modules published Li et al. (Li et al. 2014) (LI) second set modules published Chaussabel et al. (Chaussabel et al. 2008) (DC). module definitions DC set described Banchereau et al. (Banchereau et al. 2012). Depending mset parameter test functions, either LI DC sets used, , mset=specified. can see, information contained module sets partially redundant.","code":"l    <- tt$GENE_SYMBOL res2 <- tmodUtest(l, mset=\"LI\") head( res2 ) ##                ID                               Title ## LI.M37.0 LI.M37.0 immune activation - generic cluster ## LI.M37.1 LI.M37.1         enriched in neutrophils (I) ## LI.S4       LI.S4          Monocyte surface signature ## LI.M75     LI.M75             antiviral IFN signature ## LI.M11.0 LI.M11.0          enriched in monocytes (II) ## LI.M67     LI.M67           activated dendritic cells ##               U  N1   AUC  P.Value adj.P.Val ## LI.M37.0 352659 100 0.746 1.60e-17  5.53e-15 ## LI.M37.1  50280  12 0.870 4.53e-06  6.57e-04 ## LI.S4     43220  10 0.897 6.85e-06  6.57e-04 ## LI.M75    42996  10 0.893 8.63e-06  6.57e-04 ## LI.M11.0  74652  20 0.777 9.49e-06  6.57e-04 ## LI.M67    28095   6 0.971 3.20e-05  1.81e-03"},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"accessing-the-tmod-gene-set-data","dir":"Articles","previous_headings":"Using and creating modules and gene sets","what":"Accessing the tmod gene set data","title":"tmod: Analysis of Gene Set Enrichments","text":"tmod package stores data two data frames two lists. object contained list called tmod, loaded data(\"tmod\"). names mimick various environments Annotation.dbi packages, currently objects just two lists two data frames. tmod$gs data frame contains general module information defined supplementary materials Li et al. (Li et al. 2014) Chaussabel et al. (Chaussabel et al. 2008) tmod$gv vector gene identifiers; tmod$gs2gv contains mapping gene sets genes.","code":""},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"module-operations","dir":"Articles","previous_headings":"Using and creating modules and gene sets > Accessing the tmod gene set data","what":"Module operations","title":"tmod: Analysis of Gene Set Enrichments","text":"gene sets used tmod objects class tmod. default object used gene set enrichment tests tmod package can loaded environment command data(tmod): Objects class tmod can easily generated number data sources (see ). Several functions can used objects:","code":"data(tmod) tmod ## An object of class \"tmodGS\" ##  606 gene sets, 12712 genes length(tmod) ## [1] 606 sel <- grep(\"Interferon\", tmod$gs$Title, ignore.case=TRUE) ifn <- tmod[sel] ifn ## An object of class \"tmodGS\" ##  6 gene sets, 161 genes length(ifn) ## [1] 6"},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"custom-module-definitions","dir":"Articles","previous_headings":"Using and creating modules and gene sets > Accessing the tmod gene set data","what":"Custom module definitions","title":"tmod: Analysis of Gene Set Enrichments","text":"possible use kind arbitrary custom gene set definitions. custom definition gene sets takes form list provided mset parameter test functions. list question must following members: gs (gene sets) data frame contains least columns “ID” “Title.” gs2gv list. Mapping gene sets gene vector. element integer vector contains positions given gene gv vector. names list correspond gs$ID vector. gv Gene vector. Character vector genes. tests tmod package accept simple list contains fields. However, function makeTmodGS can used conveniently create tmod object. function requires two parameters: gs – data frame, described – mapping gene sets gene identifiers, parameter gs2gene. minimal definition set: Whether gene IDs Entrez, something else entirely matter, long matched provided input test functions.","code":"mymset <- makeTmodGS(   gs=data.frame(ID=c(\"A\", \"B\"),              Title=c(\"A title\",                        \"B title\")),   gs2gene=list(     A=c(\"G1\", \"G2\"),     B=c(\"G3\", \"G4\")) ) mymset ## An object of class \"tmodGS\" ##  2 gene sets, 4 genes"},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"obtaining-other-gene-sets","dir":"Articles","previous_headings":"Using and creating modules and gene sets","what":"Obtaining other gene sets","title":"tmod: Analysis of Gene Set Enrichments","text":"tests tmod package can take arbitrary module definitions. tmod – many reasons – distribute module sets, can easily import gene sets many sources. discussed .","code":""},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"msigdb","dir":"Articles","previous_headings":"Using and creating modules and gene sets > Obtaining other gene sets","what":"MSigDB","title":"tmod: Analysis of Gene Set Enrichments","text":"MSigDB database Broad institute interesting collection gene sets (actually, multiple collections), including Reactome pathways, gene ontologies (GO) many data sets. Moreover, basis GSEA program. whole MSigDB provided msigdbr package BioConductor. can use tmod function makeTmodFromDataFrame convert msigdbr data frame one large tmod object: Alternatively, can MSigDB XML format7. file can accessed pages MSigDB Broad Institute http://software.broadinstitute.org/gsea/msigdb/download_file.jsp?filePath=/resources/msigdb/6.1/msigdb_v6.1.xml – follow link, register log , save zip archive disk (roughly 113 MB). ZIP file contains XML file (called ‘msigdb_v2022.1.Hs.xml’ time writing) can import tmod. Importing MSigDB XML easy – tmod function specifically purpose. downloaded MSigDB file, can create tmod-compatible R object one command8. However, tmod function tmodImportMsigDB() can also use format, look manual page: ’s – now can use full MSigDB enrichment tests: results quite typical MSigDB, quite abundant similar overlapping gene sets. first results, see, , interferon response, well sets genes significantly upregulated yellow fever vaccination – also interferon related. might want limit analysis 50 “hallmark” module categories: particularly interesting subsets MSigDB shown table . “Category” “Subcategory” columns msig$gs data frame.","code":"library(msigdbr) msig <- msigdbr() msig <- makeTmodFromDataFrame(df=msig,    feature_col=\"gene_symbol\",   module_col=\"gs_id\", title_col=\"gs_name\",    extra_module_cols=c(\"gs_cat\", \"gs_subcat\", \"gs_url\",                        \"gs_exact_source\", \"gs_description\")) msig <- tmodImportMSigDB(\"msigdb_v2022.1.Hs.xml\") res <- tmodCERNOtest(tt$GENE_SYMBOL, mset=msig) sel <- msig$gs$gs_cat == \"H\" tmodCERNOtest(tt$GENE_SYMBOL, mset=msig[sel] )"},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"using-the-ensembl-databases-through-biomart","dir":"Articles","previous_headings":"Using and creating modules and gene sets > Obtaining other gene sets","what":"Using the ENSEMBL databases through biomaRt","title":"tmod: Analysis of Gene Set Enrichments","text":"ENSEMBL databases multitude organisms can accessed using R package biomaRt. Importantly, biomaRt allows map different types identifiers onto ; allows example obtain Entrez gene identifiers (required KEGG GO) . , use biomaRt obtain gene ontology (GO) terms Reactome pathway IDs genes Egambia data set, using Entrez gene ID’s (column EG Egambia data set). following code, construct modules data frame m gene set gene mappings m2g (twice: GO, Reactome). keep terms least 10 100 associated Entrez gene ID’s.","code":"library(biomaRt) mart <- useMart(\"ensembl\", dataset = \"hsapiens_gene_ensembl\") bm <- getBM(filters=\"hgnc_symbol\",              values = Egambia$GENE_SYMBOL,             attributes = c( \"hgnc_symbol\", \"entrezgene\", \"reactome\", \"go_id\", \"name_1006\", \"go_linkage_type\"),             mart=mart) m2g_r <- with(bm[ bm$reactome != \"\", ], split(hgnc_symbol, reactome)) m2g_g <- with(bm[ bm$go_id != \"\", ], split(hgnc_symbol, go_id))  ll <- lengths(m2g_r) m2g_r <- m2g_r[ ll >= 5 & ll <= 250 ] ll <- lengths(m2g_g) m2g_g <- m2g_g[ ll >= 5 & ll <= 250 ]  m_r <- data.frame(ID=names(m2g_r), Title=names(m2g_r)) m_g <- data.frame(ID=names(m2g_g),    Title=bm$name_1006[ match(names(m2g_g), bm$go_id)])  ensemblR  <- makeTmod(modules=m_r, modules2genes=m2g_r) ensemblGO <- makeTmod(modules=m_g, modules2genes=m2g_g)  ## these objects are no longer necessary rm(bm, m_g, m_r, m2g_r, m2g_g)"},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"gene-ontologies-go","dir":"Articles","previous_headings":"Using and creating modules and gene sets > Obtaining other gene sets","what":"Gene ontologies (GO)","title":"tmod: Analysis of Gene Set Enrichments","text":"GO terms perhaps frequently used type gene sets GSE, particular available much larger number organisms gene sets (like KEGG pathways). many sources obtain GO definitions. described previous sections, GO’s can also obtained ENSEMBL via biomaRt MSigDB. fact, MSigDB may easiest way. However, GO annotations can also obtained AnnotationDBI Bioconductor packages shown . Note Entrez gene IDs EG column Egambia object. 15,000 GO terms 250,000 genes mtab mapping; however, many map either small large number genes. stage, also useful remove genes present particular data set, make resulting tmod object less flexible. However, may interested “biological process” ontology now. Using mapping GO.db easy create module set suitable tmod: approach allows offline mapping GO terms, assuming necessary DBI installed. Using AnnotationDBI databases org.Hs.eg.db , however, also two major disadvantages: firstly, annotations available small number organisms. Secondly, annotations ENSEMBL may date.","code":"library(org.Hs.eg.db) mtab <- toTable(org.Hs.egGO) mtab <- mtab[ mtab$Ontology == \"BP\", ] m2g <- split(mtab$gene_id, mtab$go_id) ## remove the rather large object rm(mtab)  ll <- lengths(m2g) m2g <- m2g[ ll >= 10 & ll <= 100 ] length(m2g) library(GO.db) gt <- toTable(GOTERM) m <- data.frame(ID=names(m2g)) m$Title <- gt$Term[ match(m$ID, gt$go_id) ]  goset <- makeTmod(modules=m, modules2genes=m2g) rm(gt, m2g, m)"},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"kegg-pathways","dir":"Articles","previous_headings":"Using and creating modules and gene sets > Obtaining other gene sets","what":"KEGG pathways","title":"tmod: Analysis of Gene Set Enrichments","text":"One way obtain KEGG pathway gene sets use MSigDB described . However, alternatively organisms possible directly obtain pathway definitions KEGG. code might take lot time slow connection. Note KEGG uses slightly modified version Entrez identifiers – numeric identifier preceded three letter species code (e.g. “hsa” humans) followed colon: , important part ensure gene identifiers tmod object (kegg case) correspond gene identifiers ordered list.","code":"library(KEGGREST) pathways <- keggLink(\"pathway\", \"hsa\")  ## get pathway Names in addition to IDs paths    <- sapply(unique(pathways), function(p) keggGet(p)[[1]]$NAME) m <- data.frame(ID=unique(pathways), Title=paths)  ## m2g is the mapping from modules (pathways) to genes m2g <- split(names(pathways), pathways)  ## kegg object can now be used with tmod kegg <- makeTmod(modules=m, modules2genes=m2g) eg <- paste0(\"hsa:\", tt$EG) tmodCERNOtest(eg, mset=\"kegg\")"},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"manual-creation-of-tmod-module-objects-msigdb","dir":"Articles","previous_headings":"Using and creating modules and gene sets > Obtaining other gene sets","what":"Manual creation of tmod module objects: MSigDB","title":"tmod: Analysis of Gene Set Enrichments","text":"purposes example, code shows parse XML MSigDB file using R package XML. Essentially, code tmodImportMsigDB using: 30,000 “gene sets” (equivalent modules tmod) defined. member foo2 named character vector: example analysis, use human gene sets. need make sure NULLs list. Next, construct modules data frame. use four named fields vector, contain ID (systematic name), description, category subcategory: , create mapping gene sets genes. , use MEMBERS_SYMBOLIZED field, comma separated list gene symbols belonging particular module: now , can use object mymsig tmod enrichment tests.","code":"library(XML) foo  <- xmlParse( \"msigdb_v2022.1.Hs.xml\" ) foo2 <- xmlToList(foo) path1 <- foo2[[1]] class(path1) names(path1) orgs <- sapply(foo2, function(x) x[\"ORGANISM\"]) unique(orgs)  foo3 <- foo2[ orgs == \"Homo sapiens\" ] foo3 <- foo3[ ! sapply(foo3, is.null) ] modules <- t(sapply(foo3,    function(x)      x[ c(\"SYSTEMATIC_NAME\", \"STANDARD_NAME\", \"CATEGORY_CODE\", \"SUBCATEGORY_CODE\") ]))  colnames(modules) <- c( \"ID\", \"Title\", \"Category\", \"Subcategory\" ) modules <- data.frame(modules, stringsAsFactors=FALSE) nrow(modules) m2g <- lapply(foo3,    function(x) strsplit( x[\"MEMBERS_SYMBOLIZED\"], \",\" )[[1]]) names(m2g) <- modules$ID  mymsig <- makeTmod(modules=modules, modules2genes=m2g) mymsig"},{"path":"https://january3.github.io/tmod/articles/tmod.html","id":"citing","dir":"Articles","previous_headings":"","what":"Citing","title":"tmod: Analysis of Gene Set Enrichments","text":"cite tmod, please use following reference: Zyla J, Marczyk M, Domaszewska T, Kaufmann SH, Polanska J, Weiner 3rd J. Gene set enrichment reproducible science: comparison CERNO eight algorithms. Bioinformatics. 2019 Dec 15;35(24):5146-54.","code":""},{"path":[]},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"introduction","dir":"Articles > User_manual","previous_headings":"","what":"Introduction","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"Gene set enrichment (GSE) analysis increasingly important tool biological interpretation high throughput data, versatile powerful. general, three generations GSE algorithms packages. First generation approaches test enrichment defined sets differentially expressed genes (often called “foreground”) set genes (“background”). statistical test involved usually hypergeometric Fisher’s exact test. main problem kind approach relies arbitrary thresholds (like p-value log fold change cut-offs), number genes go “foreground” set depends statistical power involved. Comparison experimental condition thus yield vastly different results depending number samples used experiment. second generation GSE involve tests rely arbitrary definitions differentially expressed, , instead directly indirectly employ information statistical distribution individual genes. popular implementation type GSE analysis eponymous GSEA program (Subramanian et al. 2005). popular quite powerful range applications, software important limitations due reliance bootstrapping obtain exact p-value. one thing, performance GSEA dramatically decreases small sample numbers (Weiner 3rd Domaszewska 2016). Moreover, specifics approach prevent used applications direct test differential expression either present (example, multivariate functional analysis, see Section “Functional multivariate analysis”). tmod package (zyla2019gene?) included CERNO1 test belong second generation algorithms. However, unlike program GSEA, CERNO relies exclusively ordered list genes, test statistic χ² distribution. Thus, suitable application ordered list genes generated: example, possible apply tmod weights PCA components variable importance measure machine learning model. tmod created following properties mind: () test enrichment relies list sorted genes, (ii) analytical solution, (iii) flexible, allowing custom gene sets analyses, (iv) visualizations multiple analysis results, suitable time series suchlike, (v) including transcriptional module definitions present databases , finally, (vi) suitable use R.","code":""},{"path":[]},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"introduction-1","dir":"Articles > User_manual","previous_headings":"Dive into tmod: analysis of transcriptomic responses to tuberculosis","what":"Introduction","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"chapter, use example data set included tmod show application tmod analysis differential gene expression. data set generated Maertzdorf et al. (2011) GEO ID GSE28623. based whole blood RNA microarrays tuberculosis (TB) patients healthy controls. Although microarrays used generate data, principle RNASeq.","code":""},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"the-gambia-data-set","dir":"Articles > User_manual","previous_headings":"Dive into tmod: analysis of transcriptomic responses to tuberculosis","what":"The Gambia data set","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"following, use Egambia data set included package. data already background corrected normalized, can proceed differential gene expression analysis. Note bit 5000 genes original set 45000 probes included. results data set obtained using limma package follows: However, also included tmod package: table shows first couple results table tt. OK, see genes known prominent human host response TB. can display one using tmod’s showGene function (’s just boxplot combined beeswarm, nothing special):  Fine, gene sets?","code":"library(tmod) data(Egambia) E <- as.matrix(Egambia[, -c(1:3)]) library(limma) library(tmod) data(Egambia) design <- cbind(Intercept = rep(1, 30), TB = rep(c(0, 1), each = 15)) E <- as.matrix(Egambia[, -c(1:3)]) fit <- eBayes(lmFit(E, design)) tt <- topTable(fit, coef = 2, number = Inf, genelist = Egambia[, 1:3]) data(EgambiaResults) tt <- EgambiaResults group <- rep(c(\"CTRL\", \"TB\"), each = 15) showGene(E[\"20799\", ], group, main = Egambia[\"20799\", \"GENE_SYMBOL\"])"},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"transcriptional-module-analysis-with-gse","dir":"Articles > User_manual","previous_headings":"Dive into tmod: analysis of transcriptomic responses to tuberculosis","what":"Transcriptional module analysis with GSE","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"two main functions tmod understand modules gene sets significantly enriched2. several statistical tests can used within tmod (see chapter “Statistical tests tmod” ), use CERNO test, main reason package exist. CERNO particularly fast robust second generation approach, recommended applications. CERNO works ordered list genes (ranks matter, statistic necessary); idea test, gene set, whether genes gene set likely others beginning list. CERNO statistic \\(\\chi^2\\) distribution therefore randomization necessary, making test really fast. first 15 results shown . Columns table contain following: ID module ID. IDs starting “LI” come Li et al. (Li et al. 2014), IDs starting “DC” defined Chaussabel et al. (Chaussabel et al. 2008). Title module description cerno CERNO statistic N1 Number genes module AUC area curve – main size estimate cES CERNO statistic divided \\(2\\times N1\\) P.Value P-value hypergeometric test adj.P.Val P-value adjusted multiple testing using Benjamini-Hochberg correction results make lot sense: transcriptional modules found enriched comparison TB patients healthy individuals line published findings. especially, see interferon response, complement system well T-cell related modules.","code":"l <- tt$GENE_SYMBOL resC <- tmodCERNOtest(l) head(resC, 15) ## # tmod report (class tmodReport) 8 x 15: ##          │ID       │Title                                     │cerno│N1   │AUC  │cES  │P.Value ##  LI.M37.0│ LI.M37.0│immune activation - generic cluster       │  426│  100│ 0.75│  2.1│< 2e-16 ##   DC.M4.2│  DC.M4.2│Inflammation                              │  151│   20│ 0.95│  3.8│8.0e-15 ##   DC.M3.4│  DC.M3.4│Interferon                                │  129│   17│ 0.83│  3.8│4.6e-13 ##   DC.M1.2│  DC.M1.2│Interferon                                │  113│   17│ 0.90│  3.3│2.3e-10 ##  DC.M7.29│ DC.M7.29│Undetermined                              │  119│   20│ 0.81│  3.0│1.0e-09 ##  LI.M11.0│ LI.M11.0│enriched in monocytes (II)                │  114│   20│ 0.78│  2.8│5.3e-09 ##   DC.M3.2│  DC.M3.2│Inflammation                              │  124│   24│ 0.84│  2.6│1.2e-08 ##     LI.S4│    LI.S4│Monocyte surface signature                │   76│   10│ 0.90│  3.8│1.6e-08 ## LI.M112.0│LI.M112.0│complement activation (I)                 │   74│   11│ 0.85│  3.3│1.7e-07 ##  DC.M7.35│ DC.M7.35│Undetermined                              │   82│   14│ 0.80│  2.9│2.9e-07 ##  DC.M7.16│ DC.M7.16│Undetermined                              │   66│   10│ 0.82│  3.3│7.4e-07 ##    LI.M75│   LI.M75│antiviral IFN signature                   │   65│   10│ 0.89│  3.3│1.0e-06 ##    LI.M16│   LI.M16│TLR and inflammatory signaling            │   46│    5│ 0.98│  4.6│1.2e-06 ##    LI.M67│   LI.M67│activated dendritic cells                 │   50│    6│ 0.97│  4.1│1.7e-06 ##   LI.M165│  LI.M165│enriched in activated dendritic cells (II)│   92│   19│ 0.72│  2.4│2.4e-06 ##          │adj.P.Val ##  LI.M37.0│  1.1e-15 ##   DC.M4.2│  2.4e-12 ##   DC.M3.4│  9.3e-11 ##   DC.M1.2│  3.5e-08 ##  DC.M7.29│  1.2e-07 ##  LI.M11.0│  5.3e-07 ##   DC.M3.2│  1.1e-06 ##     LI.S4│  1.2e-06 ## LI.M112.0│  1.2e-05 ##  DC.M7.35│  1.8e-05 ##  DC.M7.16│  4.1e-05 ##    LI.M75│  5.3e-05 ##    LI.M16│  5.8e-05 ##    LI.M67│  7.3e-05 ##   LI.M165│  9.9e-05"},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"visualizing-results","dir":"Articles > User_manual","previous_headings":"Dive into tmod: analysis of transcriptomic responses to tuberculosis","what":"Visualizing results","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"main working horse visualizing results tmod function ggPanelplot. really glorified heatmap shows effect size (size blob figure ) p-value (intensity color). column corresponds different comparison. , one column comparison made, however need wrap list object. However, can also use slightly different representation also show many significantly - -regulated3 genes found enriched modules (right panel figure ). Note: use plot_grid function cowplot package put figures side side.  right hand side, red color bars indicates signficantly regulated enriched modules. size bar corresponds AUC, intensity color corresponds p-value. See chapter “Visualisation presentation results tmod” information functions.","code":"library(cowplot)  g1 <- ggPanelplot(list(Gambia = resC))  ## calculate the number of significant genes per module sgenes <- tmodDecideTests(g = tt$GENE_SYMBOL, lfc = tt$logFC, pval = tt$adj.P.Val) names(sgenes) <- \"Gambia\" g2 <- ggPanelplot(list(Gambia = resC), sgenes = sgenes) plot_grid(g1, g2, labels = c(\"A\", \"B\"))"},{"path":[]},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"introduction-2","dir":"Articles > User_manual","previous_headings":"Statistical tests in tmod","what":"Introduction","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"substantial numer different gene set enrichment tests. Several implemented tmod (see Table summary). chapter gives overview possibilities gene set enrichment analysis tmod. following, briefly describe various tests show examples usage Gambia data set.","code":""},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"first-generation-tests","dir":"Articles > User_manual","previous_headings":"Statistical tests in tmod","what":"First generation tests","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"First generation tests based overrepresentation analysis (ORA). essence, rely splitting genes two groups: genes interest (foreground), genes consider significantly regulated experimental condition, rest (background). given gene set, results \\(2\\times 2\\) contingency table. two factors independent (.e., probability gene belonging gene set independent probability gene regulated experimental condition), can easily derive expected frequencies cell table. Several statistical tests exist test whether expected frequencies differ significantly observed frequencies. tmod, function tmodHGtest(), performs hypergeometric test two groups genes: ‘foreground’ (fg), list differentially expressed genes, ‘background’ (bg) – gene universe, .e., genes present analysis. gene identifiers used currently tmod HGNC identifiers, use GENE_SYMBOL field Egambia data set. particular example, however, almost genes significantly differentially expressed correction multiple testing: power test 10 individuals group low. sake example, therefore relax selection. Normally, ’d use q-value threshold least 0.001. columns table contain following: ID module ID. IDs starting “LI” come Li et al. (Li et al. 2014), IDs starting “DC” defined Chaussabel et al. (Chaussabel et al. 2008). Title module description b Number genes given module fg set B Number genes module bg set n Size fg set N Size bg set E Enrichment, calcualted (b/n)/(B/N) P.Value P-value hypergeometric test adj.P.Val P-value adjusted multiple testing using Benjamini-Hochberg correction Well, IFN signature TB well known. However, numbers genes high: n size foreground, b number genes fg belong given module. N B respective totals – size bg+fg number genes belong module found totality analysed genes. using full Gambia data set (genes), different situation. Lack significant genes main problem ORA: splitting genes foreground background relies arbitrary threshold yield different results different sample sizes.","code":"fg <- tt$GENE_SYMBOL[tt$adj.P.Val < 0.05 & abs(tt$logFC) > 1] resHG <- tmodHGtest(fg = fg, bg = tt$GENE_SYMBOL) options(width = 60) resHG ## # tmod report (class tmodReport) 9 x 14: ##          │ID        ##   DC.M3.4│  DC.M3.4 ##   DC.M4.2│  DC.M4.2 ##  DC.M5.12│ DC.M5.12 ## LI.M112.0│LI.M112.0 ##  LI.M11.0│ LI.M11.0 ##  DC.M7.29│ DC.M7.29 ##    LI.M75│   LI.M75 ##     LI.S4│    LI.S4 ##  DC.M7.35│ DC.M7.35 ##     LI.S5│    LI.S5 ##   DC.M1.2│  DC.M1.2 ##   LI.M165│  LI.M165 ##   LI.M4.3│  LI.M4.3 ##    LI.M16│   LI.M16 ##          │Title                                            ##   DC.M3.4│Interferon                                       ##   DC.M4.2│Inflammation                                     ##  DC.M5.12│Interferon                                       ## LI.M112.0│complement activation (I)                        ##  LI.M11.0│enriched in monocytes (II)                       ##  DC.M7.29│Undetermined                                     ##    LI.M75│antiviral IFN signature                          ##     LI.S4│Monocyte surface signature                       ##  DC.M7.35│Undetermined                                     ##     LI.S5│DC surface signature                             ##   DC.M1.2│Interferon                                       ##   LI.M165│enriched in activated dendritic cells (II)       ##   LI.M4.3│myeloid cell enriched receptors and transporters ##    LI.M16│TLR and inflammatory signaling                   ##          │b    │B    │n    │N    │E    │P.Value│adj.P.Val ##   DC.M3.4│    7│   17│   47│ 4826│   42│9.4e-11│  5.7e-08 ##   DC.M4.2│    6│   20│   47│ 4826│   31│2.1e-08│  6.5e-06 ##  DC.M5.12│    4│    7│   47│ 4826│   59│2.7e-07│  5.5e-05 ## LI.M112.0│    4│   11│   47│ 4826│   37│2.5e-06│  3.8e-04 ##  LI.M11.0│    4│   20│   47│ 4826│   21│3.4e-05│  3.4e-03 ##  DC.M7.29│    4│   20│   47│ 4826│   21│3.4e-05│  3.4e-03 ##    LI.M75│    3│   10│   47│ 4826│   31│9.9e-05│  7.5e-03 ##     LI.S4│    3│   10│   47│ 4826│   31│9.9e-05│  7.5e-03 ##  DC.M7.35│    3│   14│   47│ 4826│   22│0.00029│  1.8e-02 ##     LI.S5│    4│   34│   47│ 4826│   12│0.00030│  1.8e-02 ##   DC.M1.2│    3│   17│   47│ 4826│   18│0.00054│  2.9e-02 ##   LI.M165│    3│   19│   47│ 4826│   16│0.00075│  3.8e-02 ##   LI.M4.3│    2│    5│   47│ 4826│   41│0.00091│  3.9e-02 ##    LI.M16│    2│    5│   47│ 4826│   41│0.00091│  3.9e-02"},{"path":[]},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"u-test-tmodutest","dir":"Articles > User_manual","previous_headings":"Statistical tests in tmod > Second generation tests","what":"U-test (tmodUtest)","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"Another approach sort genes (example, respective p-value) perform U-test ranks () genes belonging module (ii) genes belong module. bit slower, often works even case power statistical test differential expression low. , even genes none significant acceptable thresholds, sorting p-value another similar metric can nonetheless allow get meaningful enrichments4. Moreover, need set arbitrary thresholds, like p-value logFC cutoff. main issue U-test detects enrichments well depletions – , modules enriched bottom list (e.g. modules never, ever regulated particular comparison) detected well. often undesirable. Secondly, large modules reported significant even actual effect size (.e., AUC) modest small, just sheer number genes module. Unfortunately, also reverse true: modules small number genes, even consist highly - -regulated genes top list detected. list makes lot sense, also stable one: depend modules contain just genes. Since statistics different, b, B, n, N E columns output replaced following: U Mann-Whitney U statistics N1 Number genes module AUC Area curve – measure effect size U-test also implemented limma wilcoxGST() function.","code":"l <- tt$GENE_SYMBOL resU <- tmodUtest(l) head(resU) ## # tmod report (class tmodReport) 7 x 6: ##         │ID      │Title                              │U     │N1   │AUC  │P.Value│adj.P.Val ## LI.M37.0│LI.M37.0│immune activation - generic cluster│352659│  100│ 0.75│< 2e-16│  9.7e-15 ##  DC.M4.2│ DC.M4.2│Inflammation                       │ 91352│   20│ 0.95│1.7e-12│  5.1e-10 ##  DC.M1.2│ DC.M1.2│Interferon                         │ 73612│   17│ 0.90│5.7e-09│  9.6e-07 ##  DC.M3.2│ DC.M3.2│Inflammation                       │ 96366│   24│ 0.84│6.4e-09│  9.6e-07 ## DC.M5.15│DC.M5.15│Neutrophils                        │ 65289│   16│ 0.85│7.2e-07│  8.8e-05 ## DC.M7.29│DC.M7.29│Undetermined                       │ 77738│   20│ 0.81│9.1e-07│  9.2e-05 nrow(resU) ## [1] 39"},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"cerno-test-tmodcernotest-and-tmodztest","dir":"Articles > User_manual","previous_headings":"Statistical tests in tmod > Second generation tests","what":"CERNO test (tmodCERNOtest and tmodZtest)","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"two tests tmod operate ordered list genes: tmodUtest tmodCERNOtest. U test simple, however two main issues. Firstly, CERNO test, described Yamaguchi et al. (2008), based Fisher’s method combining probabilities. summary, given module, scaled ranks genes module treated probabilities. logarithmized, summed multiplied -2: \\[f_{CERNO}=-2 \\cdot \\sum_{= 1}^{N} \\ln{\\frac{R_i}{N_{tot}}}\\] statitic \\(\\chi^2\\) distribution \\(2\\cdot N\\) degrees freedom, \\(N\\) number genes given module \\(N_{tot}\\) total number genes (Yamaguchi et al. 2008). CERNO test actually much practical tests purposes recommended approach. variant called tmodZtest exists p-values combined using Stouffer’s method rather Fisher’s method.","code":"l <- tt$GENE_SYMBOL resCERNO <- tmodCERNOtest(l) head(resCERNO) ## # tmod report (class tmodReport) 8 x 6: ##         │ID      │Title                              │cerno│N1   │AUC  │cES  │P.Value│adj.P.Val ## LI.M37.0│LI.M37.0│immune activation - generic cluster│  426│  100│ 0.75│  2.1│< 2e-16│  1.1e-15 ##  DC.M4.2│ DC.M4.2│Inflammation                       │  151│   20│ 0.95│  3.8│8.0e-15│  2.4e-12 ##  DC.M3.4│ DC.M3.4│Interferon                         │  129│   17│ 0.83│  3.8│4.6e-13│  9.3e-11 ##  DC.M1.2│ DC.M1.2│Interferon                         │  113│   17│ 0.90│  3.3│2.3e-10│  3.5e-08 ## DC.M7.29│DC.M7.29│Undetermined                       │  119│   20│ 0.81│  3.0│1.0e-09│  1.2e-07 ## LI.M11.0│LI.M11.0│enriched in monocytes (II)         │  114│   20│ 0.78│  2.8│5.3e-09│  5.3e-07 nrow(resCERNO) ## [1] 38"},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"plage","dir":"Articles > User_manual","previous_headings":"Statistical tests in tmod > Second generation tests","what":"PLAGE","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"PLAGE (Tomfohr, Lu, Kepler 2005) gene set enrichment method based singular value decomposition (SVD). idea instead running statistical test (t-test) gene separately, information present gene expression genes gene set first extracted using SVD, resulting vector (one per gene set) treated “pseudo gene” analysed using approppriate statistical tool. tmod implementation, module gene expression matrix subset generated decomposed using PCA using eigengene() function. first component returned t-test comparing two groups performed. limits implementation two groups, extending one group trivial.","code":"tmodPLAGEtest(Egambia$GENE_SYMBOL, Egambia[, -c(1:3)], group = group) ## Converting group to factor ## Calculating eigengenes... ## # tmod report (class tmodReport) 7 x 23: ## # (Showing rows 1 - 20 out of 23) ##          │ID       │Title                                           │t    │D    │AbsD │P.Value ##     LI.S4│    LI.S4│Monocyte surface signature                      │ -7.2│ -2.6│  2.6│1.0e-07 ##  LI.M11.0│ LI.M11.0│enriched in monocytes (II)                      │ -6.4│ -2.4│  2.4│5.5e-07 ##  DC.M9.29│ DC.M9.29│Undetermined                                    │ -6.5│ -2.4│  2.4│6.6e-07 ##  DC.M5.12│ DC.M5.12│Interferon                                      │ -6.0│ -2.2│  2.2│2.1e-06 ##  DC.M7.29│ DC.M7.29│Undetermined                                    │ -6.0│ -2.2│  2.2│2.9e-06 ##   DC.M3.4│  DC.M3.4│Interferon                                      │ -5.7│ -2.1│  2.1│4.2e-06 ##    LI.M16│   LI.M16│TLR and inflammatory signaling                  │ -5.3│ -2.0│  2.0│1.1e-05 ##   DC.M4.2│  DC.M4.2│Inflammation                                    │ -5.2│ -1.9│  1.9│1.5e-05 ##  DC.M7.16│ DC.M7.16│Undetermined                                    │ -5.1│ -1.9│  1.9│2.2e-05 ##    LI.M67│   LI.M67│activated dendritic cells                       │ -4.7│ -1.7│  1.7│6.6e-05 ##  LI.M37.0│ LI.M37.0│immune activation - generic cluster             │ -4.7│ -1.7│  1.7│6.9e-05 ##   LI.M4.3│  LI.M4.3│myeloid cell enriched receptors and transporters│ -4.6│ -1.7│  1.7│9.7e-05 ## LI.M118.0│LI.M118.0│enriched in monocytes (IV)                      │ -4.6│ -1.7│  1.7│9.8e-05 ##  LI.M37.1│ LI.M37.1│enriched in neutrophils (I)                     │ -4.5│ -1.7│  1.7│0.00010 ## LI.M112.0│LI.M112.0│complement activation (I)                       │ -4.4│ -1.6│  1.6│0.00018 ##   LI.M105│  LI.M105│TBA                                             │ -4.1│ -1.5│  1.5│0.00033 ##   DC.M3.2│  DC.M3.2│Inflammation                                    │ -3.9│ -1.4│  1.4│0.00052 ##    LI.M75│   LI.M75│antiviral IFN signature                         │ -3.9│ -1.4│  1.4│0.00056 ##  LI.M35.0│ LI.M35.0│signaling in T cells (I)                        │ -3.8│ -1.4│  1.4│0.00073 ##   LI.M121│  LI.M121│TBA                                             │ -3.8│ -1.4│  1.4│0.00075 ##          │adj.P.Val ##     LI.S4│  5.4e-05 ##  LI.M11.0│  1.2e-04 ##  DC.M9.29│  1.2e-04 ##  DC.M5.12│  2.8e-04 ##  DC.M7.29│  3.1e-04 ##   DC.M3.4│  3.8e-04 ##    LI.M16│  8.4e-04 ##   DC.M4.2│  1.0e-03 ##  DC.M7.16│  1.3e-03 ##    LI.M67│  3.4e-03 ##  LI.M37.0│  3.4e-03 ##   LI.M4.3│  3.9e-03 ## LI.M118.0│  3.9e-03 ##  LI.M37.1│  3.9e-03 ## LI.M112.0│  6.3e-03 ##   LI.M105│  1.1e-02 ##   DC.M3.2│  1.6e-02 ##    LI.M75│  1.7e-02 ##  LI.M35.0│  2.0e-02 ##   LI.M121│  2.0e-02"},{"path":[]},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"introduction-3","dir":"Articles > User_manual","previous_headings":"Statistical tests in tmod > Permutation tests","what":"Introduction","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"GSEA approach (Subramanian et al. 2005) based similar premises approaches described . principle, GSEA combination arbitrary scoring sorted list genes permutation test. Although GSEA approach criticized statistical standpoint (Damian Gorfine 2004), remains one popular tools analyze gene sets amongst biologists. following, shown use permutation-based test tmod. permutation test based simple principle. labels observations (, group assignments) permutated statistic \\(s_i\\) calculated \\(\\)-th permutation. , statistic \\(s_o\\) calculated original data set. proportion permutated sets yielded statistic \\(s_i\\) equal higher \\(s_o\\) p-value statistical hypothesis test.","code":""},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"permutation-testing-a-general-case","dir":"Articles > User_manual","previous_headings":"Statistical tests in tmod > Permutation tests","what":"Permutation testing – a general case","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"First, set function creates permutation Egambia data set repeats limma procedure permutation, returning ordering genes. next step, generate 100 random permutations. sapply function return matrix column permutation row gene. values indicate order genes permutation. use tmod function tmodAUC calculate enrichment module permutation. can now calculate true values AUC module compare results permutation. parameters “order.” “qval” ensure calculate values modules (even without genes gene list!) order perms variable. Although results based small number permutations, results nonetheless strikingly similar. permutations, improve . table result calculating 100,000 permutations. Unfortunately, permutation approach two main drawbacks. Firstly, requires sufficient number samples – example, three samples group \\(6!=720\\) possible permutations. Secondly, computational load substantial.","code":"permset <- function(data, design) {     require(limma)     data <- data[, sample(1:ncol(data))]     fit <- eBayes(lmFit(data, design))     tt <- topTable(fit, coef = 2, number = Inf, sort.by = \"n\")     order(tt$P.Value) } # same design as before design <- cbind(Intercept = rep(1, 30), TB = rep(c(0, 1), each = 15)) E <- as.matrix(Egambia[, -c(1:3)]) N <- 250  # small number for the sake of example set.seed(54321) perms <- sapply(1:N, function(x) permset(E, design)) pauc <- tmodAUC(Egambia$GENE_SYMBOL, perms) dim(perms) ## [1] 5547  250 fit <- eBayes(lmFit(E, design)) tt <- topTable(fit, coef = 2, number = Inf, genelist = Egambia[, 1:3]) res <- tmodCERNOtest(tt$GENE_SYMBOL, qval = Inf, order.by = \"n\") all(res$ID == rownames(perms)) ## [1] TRUE fnsum <- function(m) sum(pauc[m, ] >= res[m, \"AUC\"]) sums <- sapply(res$ID, fnsum) res$perm.P.Val <- sums/N res$perm.P.Val.adj <- p.adjust(res$perm.P.Val) res <- res[order(res$AUC, decreasing = T), ] head(res[order(res$perm.P.Val), c(\"ID\", \"Title\", \"AUC\", \"adj.P.Val\", \"perm.P.Val.adj\")]) ## # tmod report (class tmodReport) 5 x 6: ##          │ID       │Title                                                 │AUC  │adj.P.Val ##    LI.M16│   LI.M16│TLR and inflammatory signaling                        │ 0.98│  5.8e-05 ## LI.M114.1│LI.M114.1│glycerophospholipid metabolism                        │ 0.98│  7.3e-02 ##    LI.M67│   LI.M67│activated dendritic cells                             │ 0.97│  7.3e-05 ##    LI.M78│   LI.M78│myeloid cell cytokines, metallopeptidases and laminins│ 0.96│  1.3e-01 ##   DC.M4.2│  DC.M4.2│Inflammation                                          │ 0.95│  2.4e-12 ##   LI.M150│  LI.M150│innate antiviral response                             │ 0.95│  1.0e-02 ##          │perm.P.Val.adj ##    LI.M16│             0 ## LI.M114.1│             0 ##    LI.M67│             0 ##    LI.M78│             0 ##   DC.M4.2│             0 ##   LI.M150│             0 ID        Title                                            AUC        adj.P.Val LI.M37.0               immune activation - generic cluster 0.7462103  0.00000 LI.M11.0                        enriched in monocytes (II) 0.7766542  0.00000 LI.M112.0                        complement activation (I) 0.8455773  0.00000 LI.M37.1                       enriched in neutrophils (I) 0.8703781  0.00000 LI.M105                                                TBA 0.8949512  0.00000 LI.S4                           Monocyte surface signature 0.8974252  0.00000 LI.M150                          innate antiviral response 0.9498859  0.00000 LI.M67                           activated dendritic cells 0.9714730  0.00000 LI.M16                      TLR and inflammatory signaling 0.9790500  0.00000 LI.M118.0                       enriched in monocytes (IV) 0.8774710  0.00295 LI.M75                             antiviral IFN signature 0.8927741  0.00295 LI.M127                         type I interferon response 0.9455715  0.00295 LI.S5                                 DC surface signature 0.6833387  0.02336 LI.M188                                                TBA 0.8684647  0.09894 LI.M165         enriched in activated dendritic cells (II) 0.7197180  0.11600 LI.M240                                chromosome Y linked 0.8157171  0.11849 LI.M20                   AP-1 transcription factor network 0.8763327  0.12672 LI.M81             enriched in myeloid cells and monocytes 0.7562851  0.13202 LI.M3                    regulation of signal transduction 0.7763995  0.14872 LI.M4.3   myeloid cell enriched receptors and transporters 0.8859573  0.15675"},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"permutation-testing-with-tmodgenesettest","dir":"Articles > User_manual","previous_headings":"Statistical tests in tmod > Permutation tests","what":"Permutation testing with tmodGeneSetTest","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"Another approach permutation testing tmodGeneSetTest() function. implementation geneSetTest limma package5. , statistic used – example fold changes -log10(pvalue). gene set, average value statistic module calculated compared number random samples size module. , using tt object containing results analysis Gambia data set. table, d difference mean value statistic (abs(tt$logFC)) given module mean means statistic random samples, divided standard deviation. drawback approach permuting genes (rather samples). may easily lead unstable spurious results, care taken.","code":"tmodGeneSetTest(tt$GENE_SYMBOL, abs(tt$logFC)) ## # tmod report (class tmodReport) 8 x 26: ## # (Showing rows 1 - 20 out of 26) ##          │ID       │Title                                     │D    │M    │N1   │AUC  │P.Value ##  LI.M11.0│ LI.M11.0│enriched in monocytes (II)                │  4.9│ 0.90│   20│ 0.78│<2e-16  ##    LI.M16│   LI.M16│TLR and inflammatory signaling            │  5.3│ 1.38│    5│ 0.98│<2e-16  ##    LI.M20│   LI.M20│AP-1 transcription factor network         │  5.3│ 1.41│    5│ 0.88│<2e-16  ##  LI.M37.0│ LI.M37.0│immune activation - generic cluster       │  9.2│ 0.82│  100│ 0.75│<2e-16  ##    LI.M67│   LI.M67│activated dendritic cells                 │  6.2│ 1.48│    6│ 0.97│<2e-16  ##    LI.M75│   LI.M75│antiviral IFN signature                   │  5.8│ 1.22│   10│ 0.89│<2e-16  ## LI.M112.0│LI.M112.0│complement activation (I)                 │  6.6│ 1.27│   11│ 0.85│<2e-16  ##   LI.M165│  LI.M165│enriched in activated dendritic cells (II)│  4.9│ 0.93│   19│ 0.72│<2e-16  ##   LI.M240│  LI.M240│chromosome Y linked                       │  5.4│ 1.22│    8│ 0.82│<2e-16  ##     LI.S4│    LI.S4│Monocyte surface signature                │  6.1│ 1.22│   10│ 0.90│<2e-16  ##     LI.S5│    LI.S5│DC surface signature                      │  4.7│ 0.77│   34│ 0.68│<2e-16  ##   DC.M1.2│  DC.M1.2│Interferon                                │  7.2│ 1.17│   17│ 0.90│<2e-16  ##   DC.M3.2│  DC.M3.2│Inflammation                              │  4.8│ 0.83│   24│ 0.84│<2e-16  ##   DC.M3.4│  DC.M3.4│Interferon                                │  8.4│ 1.28│   17│ 0.83│<2e-16  ##   DC.M4.2│  DC.M4.2│Inflammation                              │  9.2│ 1.28│   20│ 0.95│<2e-16  ##  DC.M5.15│ DC.M5.15│Neutrophils                               │  6.0│ 1.06│   16│ 0.85│<2e-16  ##  DC.M7.16│ DC.M7.16│Undetermined                              │  5.6│ 1.12│   10│ 0.82│<2e-16  ##  DC.M7.29│ DC.M7.29│Undetermined                              │  7.3│ 1.13│   20│ 0.81│<2e-16  ##  DC.M7.35│ DC.M7.35│Undetermined                              │  6.6│ 1.14│   14│ 0.80│<2e-16  ##  DC.M8.85│ DC.M8.85│Undetermined                              │  4.3│ 1.30│    4│ 0.89│<2e-16  ##          │adj.P.Val ##  LI.M11.0│        0 ##    LI.M16│        0 ##    LI.M20│        0 ##  LI.M37.0│        0 ##    LI.M67│        0 ##    LI.M75│        0 ## LI.M112.0│        0 ##   LI.M165│        0 ##   LI.M240│        0 ##     LI.S4│        0 ##     LI.S5│        0 ##   DC.M1.2│        0 ##   DC.M3.2│        0 ##   DC.M3.4│        0 ##   DC.M4.2│        0 ##  DC.M5.15│        0 ##  DC.M7.16│        0 ##  DC.M7.29│        0 ##  DC.M7.35│        0 ##  DC.M8.85│        0"},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"comparison-of-different-tests","dir":"Articles > User_manual","previous_headings":"Statistical tests in tmod","what":"Comparison of different tests","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"detailed comparison different gene set enrichment algorithms beyond scope manual, least interesting demonstrate different algorithms return roughly similar results. figure compares CERNO, geneSetTest, PLAGE, U-test hypergeometric test. test run comparison (Egambia data set, TB patients vs healthy controls). plot represents comparison results two organisms; dot corresponds module. values negative log10 p-values6; , values higher 1.3 correspond p-values 0.05.  results algorithms remarkably similar, things can pointed .","code":"## Converting group to factor ## Calculating eigengenes..."},{"path":[]},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"introduction-4","dir":"Articles > User_manual","previous_headings":"Visualisation and presentation of results in tmod","what":"Introduction","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"default, results produced tmod data frames containing one row per tested gene set / module. certain circumstances, multiple tests performed, returned object list element results table. situations list can created manually. case, often necessary extract, compare summarize one result tables.","code":""},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"visualizing-gene-sets-with-eigengene","dir":"Articles > User_manual","previous_headings":"Visualisation and presentation of results in tmod","what":"Visualizing gene sets with eigengene","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"One frequent demands somehow show differences transcription gene sets groups. usually quite bothersome. One possibility use heatmap, another show genes vary groups. options result messy, frequently biased pictures (example, “best” genes selected heatmap). code shows select genes module getModuleMembers() function. , use Gambia data set LI.M75 interferon module. Matix x contains expression genes selected module (one row per gene, one column per sample). , heatmaps line plots can generated. Note approaches discouraged. Firstly, representations chaotic hard read. Secondly, easy manipulate plots order make effects prominent really . Thirdly, use lot space ink convey little useful interpretable information, sin(Tufte Graves-Morris 2014).   better (perfect) approach use eigengenes. eigengene vector numbers thought represent genes gene set. calculated running principal component analysis expression matrix genes interest. vector can thought “average” “representative” gene gene set. , calculate eigengenes modules tmod display two . object eig contain one row per module one column per sample.  fact, one can compare eigengenes using t.test another statistical procedure – essence PLAGE algorithm, described earlier.","code":"m <- \"LI.M75\" ## getModuleMembers returns a list – you can choose to select multiple modules genes <- getModuleMembers(m)[[1]] sel <- Egambia$GENE_SYMBOL %in% genes x <- data.matrix(Egambia)[sel, -c(1:3)]  # expression matrix par(mfrow = c(1, 2)) eig <- eigengene(Egambia[, -c(1:3)], Egambia$GENE_SYMBOL) showGene(eig[\"LI.M75\", ], group, ylab = \"Eigengene\", main = \"antiviral Interferon signature\") showGene(eig[\"LI.M16\", ], group, ylab = \"Eigengene\", main = \"TLR and inflammatory signaling\")"},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"showing-enrichment-with-evidence-plots","dir":"Articles > User_manual","previous_headings":"Visualisation and presentation of results in tmod","what":"Showing enrichment with evidence plots","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"Let us first investigate detail module LI.M75, antiviral interferon signature. can use ggEvidencePlot function see module enriched list l.  essence, receiver-operator characteristic (ROC) curve, area curve (AUC) related U-statistic, P-value tmodUtest calculated, \\(\\text{AUC}=\\frac{U}{n_1\\cdot n_2}\\). U statistic AUC reported. Moreover, AUC can used calculate effect size according Wendt’s formula(Wendt 1972) rank-biserial correlation coefficient: \\[r=1-\\frac{2\\cdot U}{n_1\\cdot n_2} = 1 - 2\\cdot\\text{AUC}\\] diagram, see nine 10 genes belong LI.M75 module present Egambia data set ranked among top 1000 genes (sorted p-value). Evidence plots important tool understand whether obtained results significant statistical sense, whether also biological interest. mentioned , area evidence plot, AUC (area curve) important measure effect size. Effect size always taken consideration interpreting p-values. figure shows three different enrichments.  corresponding results shown following table: LI.M67 (activated dendritic cells) contains 6 genes, really low p-values top p-value sorted list, resulting effect size close 1. next panel shows gene set containing large number genes. effect size LI.M37.0 much smaller (0.75), thanks large number genes enrichment significant, p-value lower LI.M67. often, gene set larger number genes low p-value. However, gene sets frequently specific, corresponding effect sizes large. example, LI.M67 much interesting result: specific shows much larger effect, despite much higher p-value.","code":"l <- tt$GENE_SYMBOL theme_set(theme_minimal()) ggEvidencePlot(l, \"LI.M75\") library(purrr) sel <- c(\"LI.M67\", \"LI.M37.0\") plots <- map(sel, ~ggEvidencePlot(l, .x, gene.labels = FALSE)) plot_grid(plotlist = plots, labels = sel) foo <- tmodCERNOtest(l) %>%     dplyr::filter(ID %in% sel) foo %>%     knitr::kable()"},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"summary-tables","dir":"Articles > User_manual","previous_headings":"Visualisation and presentation of results in tmod","what":"Summary tables","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"can summarize output previously run tests (tmodUtest, tmodCERNOtest tmodHGtest) one table using tmodSummary. , create list containing results comparisons. table shows results.","code":"resAll <- list(CERNO = resC, U = resU, HG = resHG) # head(tmodSummary(resAll))"},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"panel-plots","dir":"Articles > User_manual","previous_headings":"Visualisation and presentation of results in tmod","what":"Panel plots","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"list result tables (even single result table) can visualized using heatmap-like plot called “panel plot.” idea show , effect sizes p-values, , optionally, also direction gene regulation. example , use resAll object created , containing results three different tests enrichment, compare results individual tests. However, since E column HG test easily comparable AUC values (0 1), need scale . Also, need call “AUC,” otherwise can’t show values plot.  enrichment result corresponds reddish bar. size bar corresponds effect size (AUC log10(Enrichment) - 0.5, may ), color intensity corresponds p-value – pale colors show p-values closer 0.01. easily seen tmodCERNOtest sensitive option. can see also intercept term enriched genes found monocytes neutrophils. Note default, ggPanelplot shows enrichments p < 0.01, hence slight difference tmodSummary output. behavior can modified q_thr option:  However, one usually interested direction regulation. gene list sorted p-value, enriched modules may contain - -regulated genes7. often desirable visualize whether genes module go , go experimental conditions. , function tmodDecideTests used obtain number significantly - -regulated genes module. information must obtained separately differential gene expression analysis provided list ggPanelplot. names list must identical names results list. , reuse object three tests, since DEGs (differentially expressed genes) three comparisons.  mini-plot shows effect size enrichment corresponding p-value, . Additionally, fraction -regulated -regulated genes visualized coloring fraction area mini-plot red blue, respectively8. ggPanelplot function several parameters, notably filtering labelling: filter_row_q filter_row_auc remove gene sets , respectively, FDR p-value effect size achieved comparisons; q_cutoff: enrichments q-values cutoff considered absent ggPanelplot function returns ggplot2 graph, therefore allows much customization.","code":"resAll$HG$AUC <- log10(resAll$HG$E) - 0.5 ggPanelplot(resAll) ggPanelplot(resAll, q_thr = 0.001) degs <- tmodDecideTests(g = tt$GENE_SYMBOL, lfc = tt$logFC, pval = tt$adj.P.Val)[[1]] degs <- list(CERNO = degs, HG = degs, U = degs) ggPanelplot(resAll, sgenes = degs)"},{"path":[]},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"limma-and-tmod","dir":"Articles > User_manual","previous_headings":"Working with limma","what":"Limma and tmod","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"Given popularity limma package, tmod includes functions easily integrate limma. fact, fit design / contrast limma function lmFit calculate p-values eBayes(), can directly use resulting object tmodLimmaTest tmodLimmaDecideTests9.","code":"res.l <- tmodLimmaTest(fit, Egambia$GENE_SYMBOL) length(res.l) ## [1] 2 names(res.l) ## [1] \"Intercept\" \"TB\" head(res.l$TB) ## # tmod report (class tmodReport) 8 x 6: ##         │ID      │Title                              │cerno│N1   │AUC  │cES  │P.Value│adj.P.Val ## LI.M37.0│LI.M37.0│immune activation - generic cluster│  414│  100│ 0.73│  2.1│< 2e-16│  2.8e-14 ##  DC.M4.2│ DC.M4.2│Inflammation                       │  146│   20│ 0.94│  3.7│5.4e-14│  1.7e-11 ##  DC.M3.4│ DC.M3.4│Interferon                         │  128│   17│ 0.87│  3.8│7.1e-13│  1.4e-10 ##  DC.M1.2│ DC.M1.2│Interferon                         │  115│   17│ 0.91│  3.4│1.0e-10│  1.5e-08 ## DC.M7.29│DC.M7.29│Undetermined                       │  119│   20│ 0.80│  3.0│1.0e-09│  1.2e-07 ##  DC.M3.2│ DC.M3.2│Inflammation                       │  120│   24│ 0.82│  2.5│4.7e-08│  4.8e-06"},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"minimum-significant-difference-msd","dir":"Articles > User_manual","previous_headings":"Working with limma","what":"Minimum significant difference (MSD)","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"tmodLimmaTest function uses coefficients p-values limma object order genes. default, genes ordered MSD (Zyla et al. 2017) (Minimum Significant Difference), rather p-value log fold change. MSD defined follows: \\[  \\text{MSD} = \\begin{cases} CI.L & \\text{logFC} > 0\\\\ -CI.R & \\text{logFC} < 0\\\\ \\end{cases} \\] logFC log fold change, CI.L left boundary 95% confidence interval logFC CI.R right boundary. MSD always greater zero equivalent absolute distance confidence interval x axis. example, logFC 0.7 95% CI = [0.5, 0.9], MSD=0.5; logFC -2.5 95% CI = [-3.0, -2.0], MSD = 2.0. idea behind MSD follows. Ordering genes decreasing absolute log fold change include top list genes close background, log fold changes grand, errors confidence intervals, just measuring genes low expression loaded errors. Ordering genes decreasing absolute log fold change avoided. hand, list ordered p-values, many genes top list strong signals high expression, results better statistical power ultimately lower p-values – even though actual fold changes might impressive. However, using MSD using boundary confidence interval order genes, genes top list can confidently actual log fold change large. 95% confidence intervals tells us 95% cases, real log fold change anywhere within interval. Using bountary closer x-axis (zero log fold change), say 95% cases log fold change larger magnitude (hence, “minimal significant difference”). can visualized follows, using drop-replacement limma’s topTable function, tmodLimmaTopTable, calculates msd well confidence intervals. consider genes positive log fold changes show top 50 genes ordered three different measures:  Black dots logFCs, grey bars denote 95% confidence intervals. left panel, top 50 genes ordered fold change include several genes broad confidence intervals, , despite large log fold change, significantly - -regulated. middle panel genes ordered p-value. clear log fold changes genes vary considerably, list includes genes less strongly regulated TB. third panel shows genes ordered decreasing MSD. less variation logFC second panel, time fallacy first panel avoided. MSD compromise considering effect size statistical significance. enrichments?  case, results p-value msd-ordering similar. MSD general method, relies construction confidence intervals, might possible cases. Notably supported edgeR.","code":"plotCI <- function(x, ci.l, ci.r, title = \"\") {     n <- length(x)     plot(x, ylab = \"logFC\", xlab = \"Index\", pch = 19, ylim = c(min(x - ci.l), max(x + ci.r)), main = title)     segments(1:n, ci.l, 1:n, ci.r, lwd = 5, col = \"#33333333\") }  par(mfrow = c(1, 3))  x <- tmodLimmaTopTable(fit, coef = \"TB\") print(head(x)) ##    logFC.TB    t.TB msd.TB SE.TB    d.TB ciL.TB ciR.TB qval.TB ## 34   0.0282  0.0756 -0.728 0.373  0.0288 -0.728  0.784  0.9954 ## 36   1.5242  3.8798  0.728 0.393  1.6398  0.728  2.320  0.0439 ## 41   0.0789  0.1783 -0.817 0.442  0.0955 -0.817  0.975  0.9950 ## 44   0.1532  0.3239 -0.806 0.473  0.1985 -0.806  1.112  0.9950 ## 52  -0.2350 -0.6170 -0.537 0.381 -0.2451 -1.007  0.537  0.9950 ## 62  -0.3195 -0.5585 -0.840 0.572 -0.5007 -1.479  0.840  0.9950 x <- x[x$logFC.TB > 0, ]  # only to simplify the output! x2 <- x[order(abs(x$logFC.TB), decreasing = T), ][1:50, ] plotCI(x2$logFC.TB, x2$ciL.TB, x2$ciR.TB, \"logFC\")  x2 <- x[order(x$qval.TB), ][1:50, ] plotCI(x2$logFC.TB, x2$ciL.TB, x2$ciR.TB, \"q-value\")  x2 <- x[order(x$msd.TB, decreasing = T), ][1:50, ] plotCI(x2$logFC.TB, x2$ciL.TB, x2$ciR.TB, \"MSD\") x <- tmodLimmaTopTable(fit, coef = \"TB\", genelist = Egambia[, 1:3]) x.lfc <- x[order(abs(x$logFC.TB), decreasing = T), ] x.qval <- x[order(x$qval.TB), ] x.msd <- x[order(x$msd.TB, decreasing = T), ]  comparison <- list(lfc = tmodCERNOtest(x.lfc$GENE_SYMBOL), qval = tmodCERNOtest(x.qval$GENE_SYMBOL),     msd = tmodCERNOtest(x.msd$GENE_SYMBOL)) ggPanelplot(comparison)"},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"comparing-tests-across-experimental-conditions","dir":"Articles > User_manual","previous_headings":"Working with limma","what":"Comparing tests across experimental conditions","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"example Gambian data set two coefficients calculated limma, intercept TB. However, often several coefficients contrasts analysed simultaneously, example different experimental conditions different time points. tmod includes several functions make easy visualize sets enrichments. object res.l created using tmod function tmodLimmaTest list tmod results. list can directly passed functions tmodSummary ggPanelplot, long element list created tmodCERNOtest similar function. tmodSummary creates table summarizing module information comparisons made. values modules found result object (.e., found significantly enriched given comparison) shown NA’s: can neatly visualize information heatmap-like representation:  often interest see enriched modules go , go ? Specifically, like see, module, many genes -, many genes -regulated. ggPanelplot takes optional argument, sgenes, contains information significantly regulated genes modules. can conveniently generate limma linear fit object tmodLimmaDecideTests function: pie object list. element list corresponds one coefficient data frame columns “,” “Zero” “” (order). Importantly, names “res.l” list must correspond item pie list. can now use information ggPanelplot:  also general function, tmodDecideTests also produces ggPanelplot-compatible object, list data frames gene counts. However, instead taking limma object, requires () gene name, (ii) vector matrix log fold changes, (iii) vector matrix p-values. can replicate result tmodLimmaDecideTests following commands:","code":"head(tmodSummary(res.l), 5) ##              ID        Title AUC.Intercept q.Intercept AUC.TB     q.TB ## DC.M1.2 DC.M1.2   Interferon         0.874    9.21e-04  0.913 1.55e-08 ## DC.M2.3 DC.M2.3 Erythrocytes         0.892    6.56e-10     NA       NA ## DC.M3.1 DC.M3.1 Erythrocytes         0.859    8.64e-05     NA       NA ## DC.M3.2 DC.M3.2 Inflammation         0.813    5.41e-05  0.822 4.78e-06 ## DC.M3.4 DC.M3.4   Interferon         0.800    1.34e-02  0.871 1.43e-10 ggPanelplot(res.l) degs <- tmodLimmaDecideTests(fit, genes = Egambia$GENE_SYMBOL) head(degs$TB[order(degs$TB[, \"up\"], decreasing = T), ]) ##           down   N up ## DC.M3.4      0  11  9 ## DC.M4.2      0  16  7 ## LI.M11.0     0  16  4 ## LI.M37.0     0 110  4 ## LI.M112.0    0   9  4 ## LI.M165      0  24  4 data(tmod) getModuleMembers(\"DC.M3.4\") ## $DC.M3.4 ##  [1] \"IFIH1\"     \"IRF7\"      \"PARP14\"    \"IFIT2\"     \"IFI35\"     \"SAMD9L\"    \"STAT1\"     \"OAS2\"      ##  [9] \"IFIT5\"     \"ATF3\"      \"SEPT4\"     \"HERC6\"     \"IFITM1\"    \"TRIM78P\"   \"EIF2AK2\"   \"AIM2\"      ## [17] \"MT1A\"      \"MOV10\"     \"CCL8\"      \"HELZ2\"     \"ZBP1\"      \"WARS\"      \"LAP3\"      \"GBP5\"      ## [25] \"TNFSF10\"   \"GBP1\"      \"FBXO6\"     \"PARP10\"    \"TRIM22\"    \"GBP3\"      \"ZNF684\"    \"CARD17\"    ## [33] \"GALM\"      \"DHX58\"     \"CEACAM1\"   \"UBE2L6\"    \"PML\"       \"APOL6\"     \"SOCS1\"     \"LGALS3BP\"  ## [41] \"SCO2\"      \"DDX58\"     \"TNFAIP6\"   \"IDO1\"      \"MT2A\"      \"GBP6\"      \"STAT2\"     \"TIMM10\"    ## [49] \"PARP12\"    \"PLSCR1\"    \"PARP9\"     \"LOC400759\" \"GBP4\" all(names(degs) %in% names(res.l)) ## [1] TRUE ggPanelplot(res.l, sgenes = degs) tt.I <- topTable(fit, coef = \"Intercept\", number = Inf, sort.by = \"n\") tt.TB <- topTable(fit, coef = \"TB\", number = Inf, sort.by = \"n\") degs2 <- tmodDecideTests(Egambia$GENE_SYMBOL, lfc = cbind(tt.I$logFC, tt.TB$logFC), pval = cbind(tt.I$adj.P.Val,     tt.TB$adj.P.Val)) identical(degs[[1]], degs2[[1]]) ## [1] TRUE"},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"using-tmod-for-other-types-of-gse-analyses","dir":"Articles > User_manual","previous_headings":"","what":"Using tmod for other types of GSE analyses","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"fact tmod relies single ordered list genes makes useful many situations list presents .","code":""},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"correlation-analysis","dir":"Articles > User_manual","previous_headings":"Using tmod for other types of GSE analyses","what":"Correlation analysis","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"Genes can ordered absolute correlation variable even data set module. example, one can ask question function particular unknown gene – ANKRD22, annotated “ankyrin repeat domain 22.” Clearly, ANKRD22 correlates immune related genes, interferon inducible. another example, consider correlation genes first principal component (“eigengene”) group genes unknown function10. demonstrate method, select genes module “LI.M75.” , use function getGenes optional argument genes used filter genes module genes present data set.","code":"x <- E[match(\"ANKRD22\", Egambia$GENE_SYMBOL), ] cors <- t(cor(x, t(E))) ord <- order(abs(cors), decreasing = TRUE) head(tmodCERNOtest(Egambia$GENE_SYMBOL[ord])) ## # tmod report (class tmodReport) 8 x 6: ##         │ID      │Title                                     │cerno│N1   │AUC  │cES  │P.Value ## LI.M37.0│LI.M37.0│immune activation - generic cluster       │  431│  100│ 0.72│  2.2│< 2e-16 ##  DC.M3.4│ DC.M3.4│Interferon                                │  142│   17│ 0.87│  4.2│4.3e-15 ##  DC.M4.2│ DC.M4.2│Inflammation                              │  151│   20│ 0.91│  3.8│7.2e-15 ##  DC.M1.2│ DC.M1.2│Interferon                                │  132│   17│ 0.93│  3.9│1.7e-13 ## DC.M7.29│DC.M7.29│Undetermined                              │  117│   20│ 0.81│  2.9│1.8e-09 ##  LI.M165│ LI.M165│enriched in activated dendritic cells (II)│  113│   19│ 0.78│  3.0│2.2e-09 ##         │adj.P.Val ## LI.M37.0│  2.9e-16 ##  DC.M3.4│  1.3e-12 ##  DC.M4.2│  1.5e-12 ##  DC.M1.2│  2.5e-11 ## DC.M7.29│  2.2e-07 ##  LI.M165│  2.2e-07 g <- getGenes(\"LI.M75\", genes = Egambia$GENE_SYMBOL, as.list = TRUE) x <- E[match(g[[1]], Egambia$GENE_SYMBOL), ]  ## calculating the 'eigengene' (PC1) pca <- prcomp(t(x), scale. = T) eigen <- pca$x[, 1] cors <- t(cor(eigen, t(E)))  ## order all genes by the correlation between the gene and the PC1 ord <- order(abs(cors), decreasing = TRUE) head(tmodCERNOtest(Egambia$GENE_SYMBOL[ord])) ## # tmod report (class tmodReport) 8 x 6: ##         │ID      │Title                                     │cerno│N1   │AUC  │cES  │P.Value ##  DC.M1.2│ DC.M1.2│Interferon                                │  197│   17│ 0.96│  5.8│< 2e-16 ##  DC.M3.4│ DC.M3.4│Interferon                                │  154│   17│ 0.93│  4.5│< 2e-16 ##  LI.M165│ LI.M165│enriched in activated dendritic cells (II)│  155│   19│ 0.82│  4.1│5.5e-16 ##   LI.M75│  LI.M75│antiviral IFN signature                   │  104│   10│ 0.94│  5.2│2.3e-13 ## LI.M37.0│LI.M37.0│immune activation - generic cluster       │  364│  100│ 0.67│  1.8│1.1e-11 ##  DC.M4.2│ DC.M4.2│Inflammation                              │  128│   20│ 0.89│  3.2│4.4e-11 ##         │adj.P.Val ##  DC.M1.2│  4.1e-22 ##  DC.M3.4│  9.4e-15 ##  LI.M165│  1.1e-13 ##   LI.M75│  3.4e-11 ## LI.M37.0│  1.4e-09 ##  DC.M4.2│  4.5e-09"},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"functional-multivariate-analysis","dir":"Articles > User_manual","previous_headings":"Using tmod for other types of GSE analyses","what":"Functional multivariate analysis","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"Transcriptional modules can help understand biological meaning calculated multivariate transformations. example, consider principal component analysis (PCA), visualised using pca3d package (Weiner 2013):  fourth component looks really interesting. correspond modules found ? principal component , , linear combination gene expression values multiplied weights (scores) constant given component. -th principal component sample j given \\[PC_{,j} = \\sum_{k} w_{,k} \\cdot x_{k,j}\\] \\(k\\) index variables (genes case), \\(w_{,k}\\) weight associated \\(\\)-th component \\(k\\)-th variable (gene), \\(x_{k,j}\\) value variable \\(k\\) sample \\(j\\); , gene expression gene \\(k\\) sample \\(j\\). Genes influence position sample along given component larger absolute weight component. example, right-hand figure , see samples taken TB patients high value principal component 4; opposite true healthy controls. genes allow us differentiate two groups large, positive weights genes highly expressed TB patients, large, negative weights genes highly expressed NID, TB. can sort genes weight given component, since weights stored pca object “rotation” slot, use tmodUtest function test enrichment modules. Perfect, expected: see neutrophil / interferon signature hallmark TB biosignature. components? can run enrichment component visualise results using tmod’s functions tmodSummary ggPanelplot. , use filter.empty option omit principal components show enrichment . following plot shows information visual form. size blobs corresponds effect size (AUC value), color – q-value.  However, might want ask, module, many genes module negative, many positive weight? can use function tmodDecideTests . principal component shown, want know many genes large (absolute terms) weights – can use “lfc” parameter tmodDecideTests . define “large” top 25% weights given component. , need first calculate 3rd quartile (top 25% threshold). show 10 components:","code":"mypal <- c(\"#E69F00\", \"#56B4E9\") pca <- prcomp(t(E), scale. = TRUE)  col <- mypal[factor(group)] par(mfrow = c(1, 2)) l <- pcaplot(pca, group = group, col = col)  legend(\"topleft\", as.character(l$groups), pch = l$pch, col = l$colors, bty = \"n\") l <- pcaplot(pca, group = group, col = col, components = 3:4) legend(\"topleft\", as.character(l$groups), pch = l$pch, col = l$colors, bty = \"n\") o <- order(abs(pca$rotation[, 4]), decreasing = TRUE) l <- Egambia$GENE_SYMBOL[o] res <- tmodUtest(l) head(res) ## # tmod report (class tmodReport) 7 x 6: ##         │ID      │Title                              │U     │N1   │AUC  │P.Value│adj.P.Val ## LI.M37.0│LI.M37.0│immune activation - generic cluster│339742│  100│ 0.72│3.1e-14│  1.9e-11 ##  DC.M4.2│ DC.M4.2│Inflammation                       │ 89378│   20│ 0.93│1.5e-11│  4.6e-09 ##  DC.M1.2│ DC.M1.2│Interferon                         │ 74828│   17│ 0.92│1.6e-09│  3.2e-07 ##  DC.M3.2│ DC.M3.2│Inflammation                       │ 95685│   24│ 0.83│1.1e-08│  1.7e-06 ## DC.M7.29│DC.M7.29│Undetermined                       │ 78752│   20│ 0.82│4.0e-07│  4.8e-05 ##  DC.M3.4│ DC.M3.4│Interferon                         │ 68058│   17│ 0.83│1.1e-06│  1.1e-04 # Calculate enrichment for each component gs <- Egambia$GENE_SYMBOL # function calculating the enrichment of a PC gn.f <- function(r) {     tmodCERNOtest(gs[order(abs(r), decreasing = T)], qval = 0.01) } x <- apply(pca$rotation, 2, gn.f) tmodSummary(x, filter.empty = TRUE)[1:5, ] ##              ID        Title AUC.PC3    q.PC3 AUC.PC4    q.PC4 AUC.PC9 q.PC9 AUC.PC14   q.PC14 ## DC.M1.1 DC.M1.1    Platelets      NA       NA      NA       NA      NA    NA    0.746 7.94e-05 ## DC.M1.2 DC.M1.2   Interferon      NA       NA   0.915 1.75e-08      NA    NA       NA       NA ## DC.M2.3 DC.M2.3 Erythrocytes   0.897 6.01e-12      NA       NA      NA    NA       NA       NA ## DC.M3.1 DC.M3.1 Erythrocytes   0.729 1.92e-03      NA       NA      NA    NA       NA       NA ## DC.M3.2 DC.M3.2 Inflammation   0.715 8.88e-03   0.830 7.16e-10      NA    NA       NA       NA ##         AUC.PC30   q.PC30 ## DC.M1.1       NA       NA ## DC.M1.2    0.828 6.79e-03 ## DC.M2.3    0.843 3.08e-07 ## DC.M3.1       NA       NA ## DC.M3.2    0.758 1.17e-05 ggPanelplot(x) qfnc <- function(r) quantile(r, 0.75) qqs <- apply(pca$rotation[, 1:10], 2, qfnc) gloadings <- tmodDecideTests(gs, lfc = pca$rotation[, 1:10], lfc.thr = qqs) ggPanelplot(x[1:10], sgenes = gloadings)"},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"pca-and-tag-clouds","dir":"Articles > User_manual","previous_headings":"Using tmod for other types of GSE analyses","what":"PCA and tag clouds","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"another way visualizing enrichment, can use tagcloud package (Weiner 2014). P-Values represented size tags, AUC – proxy effect size – shown color tag, grey (AUC=0.5, random) black (1):  can now annotate PCA axes using tag clouds; however, see shortcut tmod.  mentioned previously, way tmod much quickly, just lines code: Note plot.params just parameters passed pca2d function. However, remember must list. plot PCA, tmod uses function pcaplot(), can actually providing tmodPCA suitable function. requirement function takes named parameters “pca” “components”:  Alternatively, can use function “pca2d” pca3d package:","code":"library(tagcloud) w <- -log10(res$P.Value) c <- smoothPalette(res$AUC, min = 0.5) tags <- strmultline(res$Title) tagcloud(tags, weights = w, col = c) par(mar = c(1, 1, 1, 1)) o3 <- order(abs(pca$rotation[, 3]), decreasing = TRUE) l3 <- Egambia$GENE_SYMBOL[o3] res3 <- tmodUtest(l3) layout(matrix(c(3, 1, 0, 2), 2, 2, byrow = TRUE), widths = c(1/3, 2/3), heights = c(2/3, 1/3)) col <- mypal[factor(group)]  # note -- PC4 is now x axis!! l <- pcaplot(pca, group = group, components = 4:3, col = col, cex = 1.8)  legend(\"topleft\", as.character(l$groups), pch = l$pch, col = l$colors, bty = \"n\")  tagcloud(tags, weights = w, col = c, fvert = 0) tagcloud(strmultline(res3$Title), weights = -log10(res3$P.Value), col = smoothPalette(res3$AUC, min = 0.5),     fvert = 1) plotf <- function(pca, components) {     id1 <- components[1]     id2 <- components[2]     print(id1)     print(id2)     plot(pca$x[, id1], pca$x[, id2]) } ret <- tmodPCA(pca, genes = Egambia$GENE_SYMBOL, components = 3:4, plotfunc = plotf) ## [1] 3 ## [1] 4 if (require(pca3d)) plotf <- pca2d ret <- tmodPCA(pca, genes = Egambia$GENE_SYMBOL, components = 3:4, plotfunc = plotf, plot.params = list(group = group))"},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"using-and-creating-modules-and-gene-sets","dir":"Articles > User_manual","previous_headings":"","what":"Using and creating modules and gene sets","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"Tmod created transcriptional modules mind. word “module” used throughout tmod. However, gene variable set – depending application – “module” tmod. data sets can used tmod functions (including gene set enrichment test functions) specifying option mset=, example tmodCERNOtest(..., mset=mytmodobject).","code":""},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"using-built-in-gene-sets-transcriptional-modules","dir":"Articles > User_manual","previous_headings":"Using and creating modules and gene sets","what":"Using built-in gene sets (transcriptional modules)","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"default, tmod uses modules published Li et al. (Li et al. 2014) (LI) second set modules published Chaussabel et al. (Chaussabel et al. 2008) (DC). module definitions DC set described Banchereau et al. (Banchereau et al. 2012) can found public website11. Depending mset parameter test functions, either LI DC sets used, , mset=specified. can see, information contained module sets partially redundant.","code":"l <- tt$GENE_SYMBOL res2 <- tmodUtest(l, mset = \"LI\") head(res2) ## # tmod report (class tmodReport) 7 x 6: ##         │ID      │Title                              │U     │N1   │AUC  │P.Value│adj.P.Val ## LI.M37.0│LI.M37.0│immune activation - generic cluster│352659│  100│ 0.75│< 2e-16│  5.5e-15 ## LI.M37.1│LI.M37.1│enriched in neutrophils (I)        │ 50280│   12│ 0.87│4.5e-06│  6.6e-04 ##    LI.S4│   LI.S4│Monocyte surface signature         │ 43220│   10│ 0.90│6.9e-06│  6.6e-04 ##   LI.M75│  LI.M75│antiviral IFN signature            │ 42996│   10│ 0.89│8.6e-06│  6.6e-04 ## LI.M11.0│LI.M11.0│enriched in monocytes (II)         │ 74652│   20│ 0.78│9.5e-06│  6.6e-04 ##   LI.M67│  LI.M67│activated dendritic cells          │ 28095│    6│ 0.97│3.2e-05│  1.8e-03"},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"accessing-the-tmod-gene-set-data","dir":"Articles > User_manual","previous_headings":"Using and creating modules and gene sets","what":"Accessing the tmod gene set data","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"tmod package stores data two data frames two lists. object contained list called tmod, loaded data(\"tmod\"). names mimick various environments Annotation.dbi packages, currently objects just two lists two data frames. tmod$gs data frame contains general module information defined supplementary materials Li et al. (Li et al. 2014) Chaussabel et al. (Chaussabel et al. 2008) tmod$gv vector gene identifiers; tmod$gs2gv contains mapping gene sets genes.","code":""},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"module-operations","dir":"Articles > User_manual","previous_headings":"Using and creating modules and gene sets > Accessing the tmod gene set data","what":"Module operations","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"gene sets used tmod objects class tmod. default object used gene set enrichment tests tmod package can loaded environment command data(tmod): Objects class tmod can easily generated number data sources (see ). Several functions can used objects:","code":"data(tmod) tmod ## An object of class \"tmodGS\" ##  606 gene sets, 12712 genes length(tmod) ## [1] 606 sel <- grep(\"Interferon\", tmod$gs$Title, ignore.case = TRUE) ifn <- tmod[sel] ifn ## An object of class \"tmodGS\" ##  6 gene sets, 161 genes length(ifn) ## [1] 6"},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"using-tmod-modules-in-other-programs","dir":"Articles > User_manual","previous_headings":"Using and creating modules and gene sets > Accessing the tmod gene set data","what":"Using tmod modules in other programs","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"Using variables, one can apply tool analysis enriched module sets available, example, geneSetTest function limma package (Smyth et al. (2005))12. first run tmodCERNOtest setting qval Inf get p-values modules. , apply geneSetTest function module. Note using actual geneSetTest function13 limma package rather tmod function tmodGeneSetTest. results CERNO geneSetTest similar?  plot , p-values tmod plotted p-values geneSetTest. can see, particular example, methods give similar results. However, tmodCERNOtest function faster orders magnitude, require randomization testing p-value can directly read \\(\\chi^2\\) distribution.","code":"data(tmod) res <- tmodCERNOtest(tt$GENE_SYMBOL, qval = Inf) gstest <- function(x) {     sel <- tt$GENE_SYMBOL %in% getModuleMembers(x)[[1]]     geneSetTest(sel, tt$logFC, ranks.only = FALSE) } gst <- sapply(res$ID, gstest) plot(res$P.Value, gst, log = \"xy\", pch = 19, col = \"#33333366\", xlab = \"P Values from tmod\", ylab = \"P Values from geneSetTest\") abline(0, 1) abline(h = 0.01, col = \"grey\") abline(v = 0.01, col = \"grey\")"},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"custom-module-definitions","dir":"Articles > User_manual","previous_headings":"Using and creating modules and gene sets > Accessing the tmod gene set data","what":"Custom module definitions","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"possible use kind arbitrary custom gene set definitions. custom definition gene sets takes form list provided mset parameter test functions. list question must following members: gs (gene sets) data frame contains least columns “ID” “Title.” gs2gv list. Mapping gene sets gene vector. element integer vector contains positions given gene gv vector. names list correspond gs$ID vector. gv Gene vector. Character vector genes. tests tmod package accept simple list contains fields. However, function makeTmodGS can used conveniently create tmod object. function requires two parameters: gs – data frame, described – mapping gene sets gene identifiers, parameter gs2gene. minimal definition set: Whether gene IDs Entrez, something else entirely matter, long matched provided input test functions.","code":"mymset <- makeTmodGS(gs = data.frame(ID = c(\"A\", \"B\"), Title = c(\"A title\", \"B title\")), gs2gene = list(A = c(\"G1\",     \"G2\"), B = c(\"G3\", \"G4\"))) mymset ## An object of class \"tmodGS\" ##  2 gene sets, 4 genes"},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"obtaining-other-gene-sets","dir":"Articles > User_manual","previous_headings":"Using and creating modules and gene sets","what":"Obtaining other gene sets","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"tests tmod package can take arbitrary module definitions. tmod – many reasons – distribute module sets, can easily import gene sets many sources. discussed .","code":""},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"msigdb","dir":"Articles > User_manual","previous_headings":"Using and creating modules and gene sets > Obtaining other gene sets","what":"MSigDB","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"MSigDB database Broad institute interesting collection gene sets (actually, multiple collections), including Reactome pathways, gene ontologies (GO) many data sets. Moreover, basis GSEA program. whole MSigDB provided msigdbr package BioConductor. can use tmod function makeTmodFromDataFrame convert msigdbr data frame one large tmod object: Alternatively, can MSigDB XML format14. file can accessed pages MSigDB Broad Institute http://software.broadinstitute.org/gsea/msigdb/download_file.jsp?filePath=/resources/msigdb/6.1/msigdb_v6.1.xml – follow link, register log , save zip archive disk (roughly 113 MB). ZIP file contains XML file (called ‘msigdb_v2022.1.Hs.xml’ time writing) can import tmod. Importing MSigDB XML easy – tmod function specifically purpose. downloaded MSigDB file, can create tmod-compatible R object one command15. However, tmod function tmodImportMsigDB() can also use format, look manual page: ’s – now can use full MSigDB enrichment tests: results quite typical MSigDB, quite abundant similar overlapping gene sets. first results, see, , interferon response, well sets genes significantly upregulated yellow fever vaccination – also interferon related. might want limit analysis 50 “hallmark” module categories: see – prominent interferon response complement activation. Also, addition, TNF-\\(\\alpha\\) signalling via NF-\\(\\kappa\\beta\\). particularly interesting subsets MSigDB shown table . “Category” “Subcategory” columns msig$gs data frame.","code":"library(msigdbr) msig <- msigdbr() msig <- makeTmodFromDataFrame(df = msig, feature_col = \"gene_symbol\", module_col = \"gs_id\", title_col = \"gs_name\",     extra_module_cols = c(\"gs_cat\", \"gs_subcat\", \"gs_url\", \"gs_exact_source\", \"gs_description\")) ## making Tmod msig <- tmodImportMSigDB(\"msigdb_v2022.1.Hs.xml\") res <- tmodCERNOtest(tt$GENE_SYMBOL, mset = msig) head(res) ## # tmod report (class tmodReport) 8 x 6: ##       │ID     ## M40997│M40997 ## M40868│M40868 ## M40996│M40996 ## M40995│M40995 ## M40998│M40998 ## M41081│M41081 ##       │Title                                                                                        ## M40997│HOWARD_PBMC_INACT_MONOV_INFLUENZA_A_INDONESIA_05_2005_H5N1_AGE_19_39YO_AS03_ADJUVANT_VS_BUF… ## M40868│ZAK_PBMC_MRKAD5_HIV_1_GAG_POL_NEF_AGE_20_50YO_1DY_UP                                         ## M40996│HOWARD_NEUTROPHIL_INACT_MONOV_INFLUENZA_A_INDONESIA_05_2005_H5N1_AGE_18_49YO_1DY_UP          ## M40995│HOWARD_MONOCYTE_INACT_MONOV_INFLUENZA_A_INDONESIA_05_2005_H5N1_AGE_18_49YO_1DY_UP            ## M40998│HOWARD_DENDRITIC_CELL_INACT_MONOV_INFLUENZA_A_INDONESIA_05_2005_H5N1_AGE_18_49YO_1DY_UP      ## M41081│OSMAN_BLOOD_CHAD63_KH_AGE_18_50YO_HIGH_DOSE_SUBJECTS_24HR_UP                                 ##       │cerno│N1   │AUC  │cES  │P.Value│adj.P.Val ## M40997│  685│  111│ 0.82│  3.1│<2e-16 │  3.8e-44 ## M40868│  723│  147│ 0.74│  2.5│<2e-16 │  6.6e-34 ## M40996│  498│   80│ 0.81│  3.1│<2e-16 │  2.9e-32 ## M40995│  430│   73│ 0.78│  2.9│<2e-16 │  8.1e-26 ## M40998│  361│   54│ 0.84│  3.3│<2e-16 │  3.7e-25 ## M41081│ 1019│  281│ 0.62│  1.8│<2e-16 │  3.7e-25 sel <- msig$gs$gs_cat == \"H\" tmodCERNOtest(tt$GENE_SYMBOL, mset = msig[sel]) ## # tmod report (class tmodReport) 8 x 9: ##      │ID   │Title                                     │cerno│N1   │AUC  │cES  │P.Value│adj.P.Val ## M5913│M5913│HALLMARK_INTERFERON_GAMMA_RESPONSE        │  222│   41│ 0.78│  2.7│8.5e-15│  4.3e-13 ## M5921│M5921│HALLMARK_COMPLEMENT                       │  216│   55│ 0.70│  2.0│6.2e-09│  1.5e-07 ## M5911│M5911│HALLMARK_INTERFERON_ALPHA_RESPONSE        │  108│   20│ 0.76│  2.7│3.2e-08│  5.3e-07 ## M5946│M5946│HALLMARK_COAGULATION                      │  178│   49│ 0.68│  1.8│1.5e-06│  1.8e-05 ## M5930│M5930│HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION│  208│   71│ 0.64│  1.5│0.00026│  2.2e-03 ## M5890│M5890│HALLMARK_TNFA_SIGNALING_VIA_NFKB          │  149│   47│ 0.65│  1.6│0.00027│  2.2e-03 ## M5932│M5932│HALLMARK_INFLAMMATORY_RESPONSE            │  182│   61│ 0.62│  1.5│0.00035│  2.5e-03 ## M5953│M5953│HALLMARK_KRAS_SIGNALING_UP                │  218│   80│ 0.61│  1.4│0.00150│  9.4e-03 ## M5892│M5892│HALLMARK_CHOLESTEROL_HOMEOSTASIS          │   49│   13│ 0.65│  1.9│0.00422│  2.3e-02"},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"using-the-ensembl-databases-through-biomart","dir":"Articles > User_manual","previous_headings":"Using and creating modules and gene sets > Obtaining other gene sets","what":"Using the ENSEMBL databases through biomaRt","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"ENSEMBL databases multitude organisms can accessed using R package biomaRt. Importantly, biomaRt allows map different types identifiers onto ; allows example obtain Entrez gene identifiers (required KEGG GO) . , use biomaRt obtain gene ontology (GO) terms Reactome pathway IDs genes Egambia data set, using Entrez gene ID’s (column EG Egambia data set). following code, construct modules data frame m gene set gene mappings m2g (twice: GO, Reactome). keep terms least 10 100 associated Entrez gene ID’s.","code":"library(biomaRt) mart <- useMart(\"ensembl\", dataset = \"hsapiens_gene_ensembl\") bm <- getBM(filters = \"hgnc_symbol\", values = Egambia$GENE_SYMBOL, attributes = c(\"hgnc_symbol\", \"entrezgene\",     \"reactome\", \"go_id\", \"name_1006\", \"go_linkage_type\"), mart = mart) m2g_r <- with(bm[bm$reactome != \"\", ], split(hgnc_symbol, reactome)) m2g_g <- with(bm[bm$go_id != \"\", ], split(hgnc_symbol, go_id))  ll <- lengths(m2g_r) m2g_r <- m2g_r[ll >= 5 & ll <= 250] ll <- lengths(m2g_g) m2g_g <- m2g_g[ll >= 5 & ll <= 250]  m_r <- data.frame(ID = names(m2g_r), Title = names(m2g_r)) m_g <- data.frame(ID = names(m2g_g), Title = bm$name_1006[match(names(m2g_g), bm$go_id)])  ensemblR <- makeTmod(modules = m_r, modules2genes = m2g_r) ensemblGO <- makeTmod(modules = m_g, modules2genes = m2g_g)  ## these objects are no longer necessary rm(bm, m_g, m_r, m2g_r, m2g_g)"},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"gene-ontologies-go","dir":"Articles > User_manual","previous_headings":"Using and creating modules and gene sets > Obtaining other gene sets","what":"Gene ontologies (GO)","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"GO terms perhaps frequently used type gene sets GSE, particular available much larger number organisms gene sets (like KEGG pathways). many sources obtain GO definitions. described previous sections, GO’s can also obtained ENSEMBL via biomaRt MSigDB. fact, MSigDB may easiest way. However, GO annotations can also obtained AnnotationDBI Bioconductor packages shown . Note Entrez gene IDs EG column Egambia object. 15,000 GO terms 250,000 genes mtab mapping; however, many map either small large number genes. stage, also useful remove genes present particular data set, make resulting tmod object less flexible. However, may interested “biological process” ontology now. Using mapping GO.db easy create module set suitable tmod: approach allows offline mapping GO terms, assuming necessary DBI installed. Using AnnotationDBI databases org.Hs.eg.db , however, also two major disadvantages: firstly, annotations available small number organisms. Secondly, annotations ENSEMBL may date. can now compare results analysis MSigDB. one hitch, though. authors MSigDB decided use identifiers instead GO identifiers. GO identifiers can still extracted MSigDB, can found field EXTERNAL_DETAILS_URL. , function renameMods used replace MSigDB identifiers GO identifiers. Now can run enrichment tt data sets compare results. Note, however, systematic gene names used MSigDB, object goset created org.Hs.eg.db uses Entrez identifiers. Also, make sets directly comparable filtering common genes, request result modules, even significant.  differences quite apparent, likely due differences versions GO database.","code":"library(org.Hs.eg.db) mtab <- toTable(org.Hs.egGO) mtab <- mtab[mtab$Ontology == \"BP\", ] m2g <- split(mtab$gene_id, mtab$go_id) ## remove the rather large object rm(mtab) ll <- lengths(m2g) m2g <- m2g[ll >= 10 & ll <= 100] length(m2g) ## [1] 2889 library(GO.db) gt <- toTable(GOTERM) m <- data.frame(ID = names(m2g)) m$Title <- gt$Term[match(m$ID, gt$go_id)]  goset <- makeTmod(modules = m, modules2genes = m2g) rm(gt, m2g, m) msig.bp <- msig[msig$gs$gs_subcat == \"GO:BP\"] go_ids <- gsub(\".*/\", \"\", msig.bp$gs$gs_url) names(msig.bp$gs2gv) <- go_ids msig.bp$gs$ID <- go_ids both <- intersect(msig.bp$gs$ID, goset$gs$ID) msig.bp <- msig.bp[both] goset.both <- goset[both]  rescomp <- list()  rescomp$orghs <- tmodCERNOtest(tt$EG, mset = goset.both, qval = Inf, order.by = \"n\") rescomp$msigdb <- tmodCERNOtest(tt$GENE_SYMBOL, mset = msig.bp, qval = Inf, order.by = \"n\") all(rownames(rescomp$msigdb) == rownames(rescomp$orghs)) ## [1] TRUE plot(rescomp$msigdb$P.Value, rescomp$orghs$P.Value, log = \"xy\", xlab = \"MSigDB GO\", ylab = \"org.Hs.eg.db GO\",     bty = \"n\") abline(0, 1, col = \"grey\")"},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"kegg-pathways","dir":"Articles > User_manual","previous_headings":"Using and creating modules and gene sets > Obtaining other gene sets","what":"KEGG pathways","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"One way obtain KEGG pathway gene sets use MSigDB described . However, alternatively organisms possible directly obtain pathway definitions KEGG. code might take lot time slow connection. Note KEGG uses slightly modified version Entrez identifiers – numeric identifier preceded three letter species code (e.g. “hsa” humans) followed colon: , important part ensure gene identifiers tmod object (kegg case) correspond gene identifiers ordered list.","code":"library(KEGGREST) pathways <- keggLink(\"pathway\", \"hsa\")  ## get pathway Names in addition to IDs paths <- sapply(unique(pathways), function(p) keggGet(p)[[1]]$NAME) m <- data.frame(ID = unique(pathways), Title = paths)  ## m2g is the mapping from modules (pathways) to genes m2g <- split(names(pathways), pathways)  ## kegg object can now be used with tmod kegg <- makeTmod(modules = m, modules2genes = m2g) eg <- paste0(\"hsa:\", tt$EG) tmodCERNOtest(eg, mset = \"kegg\")"},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"manual-creation-of-tmod-module-objects-msigdb","dir":"Articles > User_manual","previous_headings":"Using and creating modules and gene sets > Obtaining other gene sets","what":"Manual creation of tmod module objects: MSigDB","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"purposes example, code shows parse XML MSigDB file using R package XML. Essentially, code tmodImportMsigDB using: 30,000 “gene sets” (equivalent modules tmod) defined. member foo2 named character vector: example analysis, use human gene sets. need make sure NULLs list. Next, construct modules data frame. use four named fields vector, contain ID (systematic name), description, category subcategory: , create mapping gene sets genes. , use MEMBERS_SYMBOLIZED field, comma separated list gene symbols belonging particular module: now , can use object mymsig tmod enrichment tests.","code":"library(XML) foo <- xmlParse(\"msigdb_v2022.1.Hs.xml\") foo2 <- xmlToList(foo) path1 <- foo2[[1]] class(path1) names(path1) orgs <- sapply(foo2, function(x) x[\"ORGANISM\"]) unique(orgs)  foo3 <- foo2[orgs == \"Homo sapiens\"] foo3 <- foo3[!sapply(foo3, is.null)] modules <- t(sapply(foo3, function(x) x[c(\"SYSTEMATIC_NAME\", \"STANDARD_NAME\", \"CATEGORY_CODE\", \"SUBCATEGORY_CODE\")])) colnames(modules) <- c(\"ID\", \"Title\", \"Category\", \"Subcategory\") modules <- data.frame(modules, stringsAsFactors = FALSE) nrow(modules) m2g <- lapply(foo3, function(x) strsplit(x[\"MEMBERS_SYMBOLIZED\"], \",\")[[1]]) names(m2g) <- modules$ID  mymsig <- makeTmod(modules = modules, modules2genes = m2g) mymsig"},{"path":[]},{"path":[]},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"introduction-5","dir":"Articles > User_manual","previous_headings":"Case studies > Metabolic profiling of TB patients","what":"Introduction","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"One main objectives writing tmod ability analyse metabolic profiling data uncommon data sets. 2012, analysed metabolic profiles serum collected patients suffering tuberculosis (TB) healthy controls (Weiner 3rd et al. 2012). turned huge differences two groups individuals, involving amino acid metabolism, lipid metabolism many others. course analysis, found correlations metabolites explained fully metabolic pathways. example, cortisol correlated kynurenine due immunoactive function molecules indicating activation immune system, two molecules linked synthesis process. Vice versa, kynurenine tryptophan directly correlated, even though molecules clearly linked metabolic process, tryptophan immune signalling molecule, kynurenine . tmod package includes , data set used Weiner et al. paper cluster definitions (modules) published therein. following, use modules analyse metabolic profiles16. First, load data modules data set analyse.","code":"data(modmetabo)  ## modules data(tbmprof) ids <- rownames(tbmprof) tb <- factor(gsub(\"\\\\..*\", \"\", ids)) sex <- factor(gsub(\".*\\\\.([MF])\\\\..*\", \"\\\\1\", ids)) table(tb, sex) ##          sex ## tb         F  M ##   HEALTHY 58 34 ##   TB      25 19"},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"differential-analysis","dir":"Articles > User_manual","previous_headings":"Case studies > Metabolic profiling of TB patients","what":"Differential analysis","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"metabolic profiling data exactly normal distribution, varies one compound another. possible normalize ranking, can simply use wilcoxon test see differences males females well TB patients healthy individuals. data frame contains results tests. can now test healthy/tb comparison male/female comparison enrichment metabolic profiling modules. Instead ordering feature identifiers, use option “input.order” determine sorting. result tables concordant previous findings. enriched modules male vs female comparison one expect. TB, cluster consisting kynurenine, bile acids cortisol -regulated, amino acids go . can take closer look using evidencePlot function. module called “Amino acid cluster” another one called “Amino acid?” “cluster” name module indicates build clustering profiles, module based biochemical classification molecules. information contained Category column MODULES data frame: get overview comparisons time, can use tmodPanelPlot function. size blobs corresponds AUC values tables .  , unfortunately, tell us group metabolites given modules higher. , can use “estimate” wilcox.test parameter tmodPanelPlot called “pie.” create value parameter – list describes, condition module, many metabolites change one direction, many change .  see now cortisol cluster higher TB, amino acids found lower concentration patients. Also, see steroids found (cluster .26 module MS.1) lower females. latter surprising inspect closely.","code":"wcx.tb <- apply(tbmprof, 2, function(x) wilcox.test(x ~ tb, conf.int = T)) wcx.tb <- t(sapply(wcx.tb, function(x) c(x$estimate, x$p.value)))  wcx.sex <- apply(tbmprof, 2, function(x) wilcox.test(x ~ sex, conf.int = T)) wcx.sex <- t(sapply(wcx.sex, function(x) c(x$estimate, x$p.value)))  wcx <- data.frame(ID = colnames(tbmprof), E.tb = wcx.tb[, 1], pval.tb = wcx.tb[, 2], E.sex = wcx.sex[,     1], pval.sex = wcx.sex[, 2], row.names = colnames(tbmprof)) ids <- wcx$ID res <- list() res$tb <- tmodCERNOtest(ids[order(wcx$pval.tb)], mset = modmetabo) res$tb ## # tmod report (class tmodReport) 8 x 3: ##       │ID    │Title                                          │cerno│N1   │AUC  │cES  │P.Value ## ME.107│ME.107│Amino acids cluster                            │  105│   18│ 0.88│  2.9│1.3e-08 ##  ME.37│ ME.37│Kynurenines, taurocholates and cortisol cluster│  117│   25│ 0.88│  2.3│2.8e-07 ##   MP.2│  MP.2│Amino Acid                                     │   99│   28│ 0.71│  1.8│0.00034 ##       │adj.P.Val ## ME.107│  5.4e-07 ##  ME.37│  5.9e-06 ##   MP.2│  4.7e-03 res$sex <- tmodCERNOtest(ids[order(wcx$pval.sex)], mset = modmetabo) res$sex ## # tmod report (class tmodReport) 8 x 3: ##      │ID   │Title              │cerno│N1   │AUC  │cES  │P.Value│adj.P.Val ## ME.26│ME.26│Hormones cluster   │   62│   10│ 0.92│  3.1│2.9e-06│  0.00012 ##  MS.1│ MS.1│Steroid            │   61│   11│ 0.87│  2.8│1.6e-05│  0.00033 ## ME.69│ME.69│Cholesterol cluster│   45│   11│ 0.82│  2.1│0.0025 │  0.03565 modmetabo$gs[modmetabo$gs$ID %in% c(\"ME.107\", \"MP.2\"), ] ## # A tibble: 2 × 3 ##   ID     Title               Category ##   <chr>  <chr>               <chr>    ## 1 ME.107 Amino acids cluster Cluster  ## 2 MP.2   Amino Acid          Pathway ggPanelplot(res, mset = modmetabo) sgenes.data <- wcx[, c(\"E.sex\", \"E.tb\")] colnames(sgenes.data) <- c(\"sex\", \"tb\") sgenes <- tmodDecideTests(wcx$ID, lfc = sgenes.data, lfc.thr = 0.2, mset = modmetabo) ggPanelplot(res, sgenes = sgenes) wcx <- wcx[order(wcx$pval.sex), ] showModule(wcx[, c(\"E.sex\", \"pval.sex\")], wcx$ID, \"MS.1\", mset = modmetabo) ##             E.sex pval.sex ## HMDB00493   -0.87 3.04e-06 ## HMDB00365   -0.64 4.03e-05 ## HMDB02759   -0.62 1.07e-04 ## M.37186     -0.50 1.49e-04 ## HMDB03818.1 -0.39 1.54e-04 ## M.32619     -0.36 3.42e-04 ## HMDB03818   -0.46 4.35e-03 ## HMDB01032   -0.27 5.28e-03 ## HMDB02802   -0.10 8.85e-02 ## HMDB00063   -0.12 1.55e-01 ## HMDB04026   -0.08 3.35e-01 i <- \"HMDB00493\"  # what is it? modmetabo$GENES[i, ] ## NULL par(mfrow = c(1, 2)) showGene(tbmprof[, i], sex, main = modmetabo$GENES[i, \"Name\"], ylab = \"Relative abundance\")  ## now for cortisol cluster i <- \"HMDB00063\" wcx <- wcx[order(wcx$pval.tb), ] showModule(wcx[, c(\"E.tb\", \"pval.tb\")], wcx$ID, \"ME.37\", mset = modmetabo)[1:10, ]  # only first 10! ##                E.tb  pval.tb ## M.47908   -7.00e-01 2.67e-14 ## M.32599   -8.00e-01 2.32e-10 ## HMDB00169 -6.30e-01 5.12e-09 ## Mx.22110  -6.45e-05 1.38e-08 ## HMDB00063 -5.40e-01 1.99e-08 ## HMDB00159 -2.90e-01 2.49e-08 ## M.32807   -1.22e+00 3.58e-08 ## M.46637   -1.03e+00 6.66e-08 ## M.46652   -8.40e-01 1.42e-07 ## HMDB00684 -3.10e-01 1.79e-07 showGene(tbmprof[, i], tb, main = modmetabo$GENES[i, \"Name\"], ylab = \"Relative abundance\")"},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"functional-multivariate-analysis-1","dir":"Articles > User_manual","previous_headings":"Case studies > Metabolic profiling of TB patients","what":"Functional multivariate analysis","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"can practically circumvent gene--gene analysis. fact, rarely interested p-values associated single genes metabolites. many , statistical power limited sheer number tests requirement correction multiple testing. case read part FMA , “Functional multivariate analysis,” simplest form, simply combining principal component analysis (PCA) enrichment analysis. PCA lets us explore variance data ; enrichment analysis allows us interprete principal components functional terms. tmod, can done lines code:  ret object now contains results enrichments (ret$enrichments member) can directly throw panel plot. Note, however, components three enrichments: “,” genes sorted decreasing order, “,” genes sorted increasing order, “abs,” genes sorted decreasing absolute value associated weight. Therefore, need unlist results bit.  OK, terms characteristic TB patients? healthy controls? , enrichments based list sorted absolute PCA weights. However, can split list ordered signed weights ordered small large values, large small values.  essence, reading plot simple. First, note time tag clouds top bottom correspond two ends vertical, y axis (second component); tag clouds left right correspond two ends horizontal, x axis (first PCA component). Now, take amino acid cluster (bottom plot): enriched lower end y axis, means, features cluster higher yellow points bottom plot (lower end y). words, amino acids higher healthy persons – finding corroborates differential analysis . Similarly, “kynurenines” left, lower side x axis, means, features cluster higher levels TB patients. male-female differences? probably can found , less important17 components. look manually, can also search responses (turned orthogonal PCA components) best predicted sex factor. can use components 1 (corresponds TB/healthy) components 5, corresponds male/female differences, suggested calculations.  Orange circles blue triangles females, located mostly Q1 Q2 (top half); corresponds differences y axis tagcloud next (hormone cluster, steroids etc.). hand, TB patients (blue triangles yellow circles) Q1 Q4 (right-hand side), corresponds TB-specific tag cloud y axis.","code":"pca <- prcomp(tbmprof, scale. = T) ret <- tmodPCA(pca, genes = colnames(tbmprof), mset = modmetabo, plot.params = list(group = tb)) enr <- unlist(ret$enrichments, recursive = FALSE) names(enr) <- gsub(\"\\\\.\", \" \", names(enr)) ggPanelplot(enr, mset = modmetabo) pca <- prcomp(tbmprof, scale. = T) ret <- tmodPCA(pca, genes = colnames(tbmprof), mset = modmetabo, plot.params = list(group = tb), mode = \"cross\") foo <- summary(lm(pca$x ~ sex)) foo <- t(sapply(foo, function(x) c(r = x$r.squared, pval = x$coefficients[2, 4]))) head(foo[order(foo[, 2]), ]) ##                     r     pval ## Response PC5   0.2457 8.49e-10 ## Response PC10  0.2146 1.36e-08 ## Response PC7   0.0328 3.48e-02 ## Response PC8   0.0221 8.39e-02 ## Response PC107 0.0199 1.02e-01 ## Response PC6   0.0192 1.08e-01 ret <- tmodPCA(pca, genes = colnames(tbmprof), mset = modmetabo, plot.params = list(group = paste(sex,     tb)), components = c(2, 5))"},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"case-study-rnaseq","dir":"Articles > User_manual","previous_headings":"Case studies","what":"Case study: RNASeq","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"example extended edgeR package users manual. code loads data , using org.Hs.eg.db, adds Entrez IDs HGNC symbols. Next, perform differential gene expression test difference normal tissue (N) tumor (T). Since confidence intervals log fold changes edgeR, compute MSD, therefore use p-values order genes following code: far, good. However, alternative using MSD test log fold change selected contrast 0, pre-selected threshold using TREAT method (McCarthy Smyth 2009), implemented edgeR function glmTreat:  results similar, p-values lower.","code":"library(edgeR) rawdata <- read.csv(\"rnaseq_example.csv\", stringsAsFactors = FALSE) y <- DGEList(counts = rawdata[, 4:9], genes = rawdata[, 1:3]) map <- toTable(org.Hs.egREFSEQ2EG) y$genes$EG <- map$gene_id[match(y$genes$idRefSeq, map$accession)] map <- toTable(org.Hs.egSYMBOL) y$genes$Symbol <- map$symbol[match(y$genes$EG, map$gene_id)] Patient <- paste0(\"P.\", rep(c(8, 33, 51), each = 2)) Tissue <- rep(c(\"N\", \"T\"), 3) design <- model.matrix(~Patient + Tissue) y <- calcNormFactors(y) design <- model.matrix(~Patient + Tissue) y <- estimateDisp(y, design, robust = TRUE) fit <- glmQLFit(y, design)  ## calculate the results for coefficient of interest lrt <- glmQLFTest(fit, coef = \"TissueT\") ord <- order(lrt$table$PValue) res.rnaseq <- list() res.rnaseq$tmod <- tmodCERNOtest(lrt$genes$Symbol[ord]) res.rnaseq$goset <- tmodCERNOtest(lrt$genes$EG[ord], mset = goset) lrt.treat <- glmTreat(fit, coef = \"TissueT\", lfc = log2(2)) ord <- order(lrt.treat$table$PValue) res.rnaseq$treat_tmod <- tmodCERNOtest(lrt$genes$Symbol[ord]) res.rnaseq$treat_goset <- tmodCERNOtest(lrt$genes$EG[ord], mset = goset) res.rnaseq <- res.rnaseq[c(1, 3, 2, 4)] ggPanelplot(res.rnaseq, filter_row_q = 0.001)"},{"path":"https://january3.github.io/tmod/articles/user_manual/tmod_user_manual.html","id":"citing","dir":"Articles > User_manual","previous_headings":"","what":"Citing","title":"tmod: A Tool for the Analysis of Gene Set Enrichments","text":"cite tmod, please use following reference: Zyla J, Marczyk M, Domaszewska T, Kaufmann SH, Polanska J, Weiner 3rd J. Gene set enrichment reproducible science: comparison CERNO eight algorithms. Bioinformatics. 2019 Dec 15;35(24):5146-54.","code":""},{"path":[]},{"path":"https://january3.github.io/tmod/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"January Weiner. Author, maintainer.","code":""},{"path":"https://january3.github.io/tmod/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zyla J, Marczyk M, Kaufmann SH, Polanska J, Weiner 3rd J (2019). “Gene set enrichment reproducible science: comparison CERNO eight algorithms.” Bioinformatics, 35(24), 5146 – 5154. doi:10.1093/bioinformatics/btz447.","code":"@Article{,   title = {Gene set enrichment for reproducible science: comparison of CERNO and eight other algorithms},   author = {Joanna Zyla and Michal Marczyk and Stefan H.E. Kaufmann and Joanna Polanska and January {Weiner 3rd}},   year = {2019},   doi = {10.1093/bioinformatics/btz447},   journal = {Bioinformatics},   volume = {35},   number = {24},   pages = {5146 -- 5154}, }"},{"path":"https://january3.github.io/tmod/index.html","id":"tmod-","dir":"","previous_headings":"","what":"Feature Set Enrichment Analysis for Metabolomics and Transcriptomics","title":"Feature Set Enrichment Analysis for Metabolomics and Transcriptomics","text":"Tmod suite gene set enrichment algorithms, visualizations utilities comes bundled libraries gene sets (“modules”). Following features distinguish tmod packages: “panel plot” visualizations allow compare results gene set enrichments; several enrichment algorithms implemented tmod, particular efficient, versatile reproducible algorithm called “CERNO”; includes library gene sets derived clustering gene expression data human blood, especially useful functional analysis infection immune responses.","code":""},{"path":"https://january3.github.io/tmod/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Feature Set Enrichment Analysis for Metabolomics and Transcriptomics","text":"can install released version tmod CRAN : development version GitHub :","code":"install.packages(\"tmod\") # install.packages(\"devtools\") devtools::install_github(\"january3/tmod\")"},{"path":"https://january3.github.io/tmod/index.html","id":"tmod-manual","dir":"","previous_headings":"","what":"Tmod manual","title":"Feature Set Enrichment Analysis for Metabolomics and Transcriptomics","text":"Access documentation using vignette(\"tmod\") Full user manual found ","code":""},{"path":"https://january3.github.io/tmod/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example usage","title":"Feature Set Enrichment Analysis for Metabolomics and Transcriptomics","text":"","code":"library(tmod) #> For tmod user guide, type `vignette(\"tmod\")` data(EgambiaResults) tt <- EgambiaResults  ## gene set enrichment analysis res <- tmodCERNOtest(tt$GENE_SYMBOL) head(res) #>                ID                               Title    cerno  N1       AUC #> LI.M37.0 LI.M37.0 immune activation - generic cluster 426.3578 100 0.7462103 #> DC.M4.2   DC.M4.2                        Inflammation 151.1520  20 0.9503953 #> DC.M3.4   DC.M3.4                          Interferon 129.4727  17 0.8315780 #> DC.M1.2   DC.M1.2                          Interferon 112.7056  17 0.9004196 #> DC.M7.29 DC.M7.29                        Undetermined 118.6759  20 0.8087599 #> LI.M11.0 LI.M11.0          enriched in monocytes (II) 113.8086  20 0.7766542 #>               cES      P.Value    adj.P.Val #> LI.M37.0 2.131789 1.824844e-18 1.105856e-15 #> DC.M4.2  3.778799 8.040039e-15 2.436132e-12 #> DC.M3.4  3.808019 4.609405e-13 9.310998e-11 #> DC.M1.2  3.314869 2.298170e-10 3.481728e-08 #> DC.M7.29 2.966897 1.002268e-09 1.214749e-07 #> LI.M11.0 2.845216 5.255069e-09 5.307620e-07"},{"path":"https://january3.github.io/tmod/reference/Egambia.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene expression in TB patients and Healthy controls — EgambiaResults","title":"Gene expression in TB patients and Healthy controls — EgambiaResults","text":"Gene expression TB patients Healthy controls","code":""},{"path":"https://january3.github.io/tmod/reference/Egambia.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gene expression in TB patients and Healthy controls — EgambiaResults","text":"data set constructed gene expression data set accessible Gene Expression Omnibus (GEO) accession number GSE28623. Ten healthy donors (NID, non-infected donors) 10 tubercolosis patients (TB) randomly selected full data set, top 25 genes highest IQR selected analysis. Genes without Entrez gene (EG) identifier likewise omitted. Egambia object data frame. first three columns gene symbol, gene name Entrez gene (EG) identifier. remaining columns correspond gene expression data.","code":""},{"path":"https://january3.github.io/tmod/reference/Egambia.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gene expression in TB patients and Healthy controls — EgambiaResults","text":"","code":"if (FALSE) { # The data set has been generated as follows: # get the data set from GEO library(GEOquery) gambia <- getGEO(\"GSE28623\")[[1]]  # Convert to limma and normalize library(limma) e <- new(\"EListRaw\", list(E= exprs(gambia), genes=fData(gambia), targets= pData(gambia))) e.bg <- backgroundCorrect(e, method= \"normexp\") en <- normalizeBetweenArrays(e.bg, method= \"q\") en <- avereps(en, ID=en$genes$NAME) en <- en[ en$genes$CONTROL_TYPE == \"FALSE\", ] en$targets$group <- factor(gsub(\" whole blood RNA *\", \"\", en$targets$description))  # Fill in Entrez Gene IDs library(org.Hs.eg.db) en$genes$EG <- \"\" sel <- en$genes$REFSEQ %in% ls(org.Hs.egREFSEQ2EG) en$genes$EG[sel] <- mget(as.character(en$genes$REFSEQ[sel]), org.Hs.egREFSEQ2EG)  # Filter by IQR and missing EG's iqrs <- apply(en$E, 1, IQR) en2 <- en[ iqrs > quantile(iqrs, 0.75) & en$genes$EG != \"\", ]  # Select 10 random samples from NID and TB groups en2 <- en2[ , c(sample(which(en2$targets$group == \"NID\"), 10),                   sample(which(en2$targets$group == \"TB\"), 10)) ] colnames(en2$E) <- en2$targets$group Egambia <- cbind(en2$genes[ , c(\"GENE_SYMBOL\", \"GENE_NAME\", \"EG\") ], en2$E) }"},{"path":"https://january3.github.io/tmod/reference/cell_signatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Cell type signatures — cell_signatures","title":"Cell type signatures — cell_signatures","text":"Cell type signatures","code":""},{"path":"https://january3.github.io/tmod/reference/cell_signatures.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cell type signatures — cell_signatures","text":"object class tmodGS","code":""},{"path":"https://january3.github.io/tmod/reference/cell_signatures.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Cell type signatures — cell_signatures","text":"CIBERSORT, CellMarkers, PanglaoDB","code":""},{"path":"https://january3.github.io/tmod/reference/cell_signatures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cell type signatures — cell_signatures","text":"","code":"## to use cell signatures, type data(cell_signatures) data(vaccination) gl <- vaccination$GeneName[ order(vaccination$qval.F.D1) ] tmodCERNOtest(gl, mset=cell_signatures) #>              ID                              Title     cerno N1       AUC #> CM00043 CM00043                       Sertoli cell 149.64473 41 0.6674980 #> CM00030 CM00030                 Myoepithelial cell 260.10985 85 0.5930265 #> CM00021 CM00021                         Hepatocyte  51.72331  9 0.8268388 #> PG00057 PG00057              Glutaminergic neurons  44.00250  7 0.8343856 #> PG00094 PG00094         Neural stem/precursor cell  70.24000 16 0.6995704 #> PG00051 PG00051                  GABAergic neurons  38.31131  6 0.8161530 #> CS00066 CS00066   T cells regulatory (Tregs) top50  50.14813 10 0.7229767 #> CS00065 CS00065   T cells regulatory (Tregs) top25  67.42724 16 0.7052620 #> PG00056 PG00056                        Glomus cell  28.43640  4 0.9538843 #> PG00019 PG00019                     Cholangiocytes  24.49107  3 0.9177785 #> PG00020 PG00020                       Chondrocytes  24.49107  3 0.9177785 #> PG00151 PG00151           Undefined placental cell  44.89206  9 0.7539329 #> CS00039 CS00039           NK cells activated top50  31.24662  5 0.8755221 #> PG00054 PG00054                 Gastric chief cell  40.72987  8 0.6681803 #> PG00039 PG00039                        Enterocytes  29.93360  5 0.8378637 #> PG00042 PG00042                     Ependymal cell  29.93360  5 0.8378637 #> PG00055 PG00055                          Germ cell  18.52657  2 0.9907661 #> CS00046 CS00046 T cells CD4 memory activated top10  24.96178  4 0.7750684 #> PG00053 PG00053                 Gamma delta T cell  24.52972  4 0.7795175 #> PG00048 PG00048                        Fibroblasts  37.15059  8 0.7227553 #> PG00007 PG00007      Anterior pituitary gland cell  12.37926  1 0.9982906 #> PG00059 PG00059                     Granulosa cell  20.10104  3 0.8033983 #> CS00037 CS00037           NK cells activated top10  19.76089  3 0.8194777 #>              cES      P.Value   adj.P.Val #> CM00043 1.824936 7.484170e-06 0.001386660 #> CM00030 1.530058 1.046536e-05 0.001386660 #> CM00021 2.873517 4.125684e-05 0.003644355 #> PG00057 3.143035 5.914313e-05 0.003918232 #> PG00094 2.195000 1.103051e-04 0.005846168 #> PG00051 3.192609 1.365601e-04 0.006031406 #> CS00066 2.507406 2.109163e-04 0.007984687 #> CS00065 2.107101 2.505869e-04 0.008300693 #> PG00056 3.554550 3.980025e-04 0.009485925 #> PG00019 4.081844 4.240428e-04 0.009485925 #> PG00020 4.081844 4.240428e-04 0.009485925 #> PG00151 2.494003 4.295513e-04 0.009485925 #> CS00039 3.124662 5.341466e-04 0.010888373 #> PG00054 2.545617 6.085874e-04 0.011519690 #> PG00039 2.993360 8.783254e-04 0.014547264 #> PG00042 2.993360 8.783254e-04 0.014547264 #> PG00055 4.631641 9.734052e-04 0.015173670 #> CS00046 3.120222 1.577911e-03 0.023230361 #> PG00053 3.066215 1.866823e-03 0.025876379 #> PG00048 2.321912 1.997084e-03 0.025876379 #> PG00007 6.189632 2.050581e-03 0.025876379 #> PG00059 3.350174 2.656998e-03 0.032004747 #> CS00037 3.293481 3.054180e-03 0.035189460"},{"path":"https://january3.github.io/tmod/reference/check_tmod_gs.html","id":null,"dir":"Reference","previous_headings":"","what":"Check an object of class tmodGS — check_tmod_gs","title":"Check an object of class tmodGS — check_tmod_gs","text":"Check object class tmodGS","code":""},{"path":"https://january3.github.io/tmod/reference/check_tmod_gs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check an object of class tmodGS — check_tmod_gs","text":"","code":"check_tmod_gs(object)"},{"path":"https://january3.github.io/tmod/reference/check_tmod_gs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check an object of class tmodGS — check_tmod_gs","text":"object object class tmodGS","code":""},{"path":"https://january3.github.io/tmod/reference/eigengene.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the eigengene of a module from a data set — eigengene","title":"Calculate the eigengene of a module from a data set — eigengene","text":"Calculate eigengene module data set","code":""},{"path":"https://january3.github.io/tmod/reference/eigengene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the eigengene of a module from a data set — eigengene","text":"","code":"eigengene(x, g, mset = NULL, k = 1)"},{"path":"https://january3.github.io/tmod/reference/eigengene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the eigengene of a module from a data set — eigengene","text":"x data; genes rows, samples columns g genes -- vector gene IDs corresponding annotation modules mset -- module set; eigengenes calculated module set k component defines eigengene (default: 1)","code":""},{"path":"https://january3.github.io/tmod/reference/eigengene.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the eigengene of a module from a data set — eigengene","text":"numeric matrix rows corresponding modules. sufficient number genes module corresponding data set, row contain NA's.","code":""},{"path":"https://january3.github.io/tmod/reference/eigengene.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the eigengene of a module from a data set — eigengene","text":"eigengene module defined first principal component PCA gene expression genes module.","code":""},{"path":"https://january3.github.io/tmod/reference/eigengene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the eigengene of a module from a data set — eigengene","text":"","code":"data(Egambia) data(tmod) x <- Egambia[ , -c(1:3) ] ifns <- tmod[ grep(\"[Ii]nterferon\", tmod$gs$Title) ] eigv <- eigengene(x, Egambia$GENE_SYMBOL, ifns) plot(eigv[\"LI.M127\", ], eigv[\"DC.M1.2\",])   # which interferon modules are correlated cor(eigv)  #>               NID      NID.1       NID.2       NID.3      NID.4         NID.5 #> NID     1.0000000  0.7340461  0.77798648  0.43569182  0.6926534 -1.734962e-01 #> NID.1   0.7340461  1.0000000  0.95401316  0.83478049  0.7306611  2.306428e-01 #> NID.2   0.7779865  0.9540132  1.00000000  0.74323177  0.6722409 -5.528967e-02 #> NID.3   0.4356918  0.8347805  0.74323177  1.00000000  0.8401116  3.873480e-01 #> NID.4   0.6926534  0.7306611  0.67224089  0.84011165  1.0000000  2.541241e-01 #> NID.5  -0.1734962  0.2306428 -0.05528967  0.38734803  0.2541241  1.000000e+00 #> NID.6   0.8756612  0.9478450  0.94194598  0.80322636  0.8452683  5.833721e-02 #> NID.7   0.9548356  0.8843013  0.89828262  0.67475455  0.8236078 -2.060135e-02 #> NID.8  -0.4810708 -0.7120692 -0.56315144 -0.60601374 -0.4078260 -3.478841e-01 #> NID.9   0.6380659  0.5662710  0.60627916  0.07841018  0.1981659  4.324869e-05 #> NID.10  0.8403301  0.7763935  0.74094404  0.77326055  0.9276373  7.791330e-02 #> NID.11 -0.3180777 -0.7121303 -0.61548802 -0.96721064 -0.7734526 -3.454134e-01 #> NID.12  0.7737778  0.9495713  0.98561371  0.82191750  0.7683774 -3.091130e-02 #> NID.13  0.9099939  0.8284390  0.78934672  0.58557580  0.7976842  1.917862e-01 #> NID.14 -0.1343416 -0.2774313 -0.20654154 -0.69664252 -0.6533970 -1.571156e-01 #> TB     -0.6544796 -0.5961499 -0.63533955 -0.11489311 -0.2276562 -4.990075e-03 #> TB.1   -0.3304879 -0.1769852 -0.15061192 -0.41894723 -0.7644742 -1.999860e-01 #> TB.2   -0.2341156 -0.4330071 -0.60783939 -0.10169786  0.1298679  4.313480e-01 #> TB.3   -0.6537368 -0.8475219 -0.83803820 -0.92962662 -0.8770582 -6.571663e-02 #> TB.4   -0.7060308 -0.4003332 -0.62168527 -0.26606706 -0.4737239  7.183756e-01 #> TB.5   -0.2839792 -0.3754146 -0.46711297  0.09143206  0.1653776  1.280893e-01 #> TB.6    0.6600716  0.8701071  0.88239264  0.86625597  0.7391022 -3.975092e-02 #> TB.7   -0.7966635 -0.9786370 -0.96792652 -0.73416627 -0.6975659 -1.405127e-01 #> TB.8   -0.8829098 -0.9458024 -0.94452731 -0.64804464 -0.6881623 -7.347971e-02 #> TB.9   -0.7693677 -0.9855857 -0.95954455 -0.73275699 -0.6364853 -1.506282e-01 #> TB.10   0.3578804  0.5199361  0.67276398  0.13671390 -0.0866007 -4.152575e-01 #> TB.11  -0.1857347 -0.1500524  0.09807492 -0.33949876 -0.4906118 -6.787103e-01 #> TB.12  -0.8189205 -0.9295643 -0.92003603 -0.60836887 -0.6271554 -1.396041e-01 #> TB.13  -0.8518470 -0.9525634 -0.95482739 -0.68567649 -0.7170650 -9.502084e-02 #> TB.14  -0.8337039 -0.9781274 -0.97603940 -0.80233886 -0.7764050 -6.419038e-02 #>              NID.6       NID.7       NID.8         NID.9      NID.10 #> NID     0.87566122  0.95483555 -0.48107084  6.380659e-01  0.84033007 #> NID.1   0.94784501  0.88430128 -0.71206920  5.662710e-01  0.77639351 #> NID.2   0.94194598  0.89828262 -0.56315144  6.062792e-01  0.74094404 #> NID.3   0.80322636  0.67475455 -0.60601374  7.841018e-02  0.77326055 #> NID.4   0.84526830  0.82360783 -0.40782595  1.981659e-01  0.92763729 #> NID.5   0.05833721 -0.02060135 -0.34788413  4.324869e-05  0.07791330 #> NID.6   1.00000000  0.97704511 -0.64401417  5.097922e-01  0.91720401 #> NID.7   0.97704511  1.00000000 -0.56294339  5.953459e-01  0.91157034 #> NID.8  -0.64401417 -0.56294339  1.00000000 -1.585251e-01 -0.61122011 #> NID.9   0.50979223  0.59534595 -0.15852505  1.000000e+00  0.23157490 #> NID.10  0.91720401  0.91157034 -0.61122011  2.315749e-01  1.00000000 #> NID.11 -0.69957799 -0.55325071  0.62610321  1.571175e-01 -0.73673533 #> NID.12  0.96541657  0.91190778 -0.56669163  4.917367e-01  0.81826656 #> NID.13  0.89114042  0.94192214 -0.47450406  7.190426e-01  0.81857892 #> NID.14 -0.39157910 -0.28581938  0.37648308  5.778862e-01 -0.63154589 #> TB     -0.53981271 -0.62026756  0.18012972 -9.992731e-01 -0.26056218 #> TB.1   -0.35239539 -0.39428864 -0.21716936  1.480823e-02 -0.54288263 #> TB.2   -0.31466633 -0.28022823  0.06586720 -5.766755e-01  0.05021625 #> TB.3   -0.90833069 -0.82391276  0.59882562 -1.345957e-01 -0.90215713 #> TB.4   -0.60963802 -0.66513646  0.02363313 -2.726630e-01 -0.59265792 #> TB.5   -0.22914673 -0.26810816 -0.01678149 -8.784607e-01  0.14656595 #> TB.6    0.90237277  0.81103279 -0.69772482  1.812551e-01  0.84197903 #> TB.7   -0.94130149 -0.91228883  0.60021618 -7.085946e-01 -0.73854320 #> TB.8   -0.94552686 -0.94996228  0.60177810 -7.532665e-01 -0.76828095 #> TB.9   -0.92869877 -0.88413287  0.71494136 -6.592636e-01 -0.72399710 #> TB.10   0.41170699  0.38371956 -0.24820743  6.162657e-01  0.06072030 #> TB.11  -0.20901503 -0.20955715  0.46996776  2.175370e-01 -0.47336749 #> TB.12  -0.89111800 -0.89484329  0.54041102 -8.241310e-01 -0.67144924 #> TB.13  -0.94525855 -0.94108352  0.54722048 -7.476153e-01 -0.75913704 #> TB.14  -0.98866788 -0.95021228  0.66457734 -5.564392e-01 -0.85165175 #>             NID.11       NID.12     NID.13      NID.14           TB #> NID    -0.31807767  0.773777840  0.9099939 -0.13434156 -0.654479590 #> NID.1  -0.71213029  0.949571293  0.8284390 -0.27743134 -0.596149920 #> NID.2  -0.61548802  0.985613714  0.7893467 -0.20654154 -0.635339553 #> NID.3  -0.96721064  0.821917503  0.5855758 -0.69664252 -0.114893112 #> NID.4  -0.77345256  0.768377430  0.7976842 -0.65339702 -0.227656219 #> NID.5  -0.34541337 -0.030911302  0.1917862 -0.15711564 -0.004990075 #> NID.6  -0.69957799  0.965416567  0.8911404 -0.39157910 -0.539812707 #> NID.7  -0.55325071  0.911907781  0.9419221 -0.28581938 -0.620267563 #> NID.8   0.62610321 -0.566691632 -0.4745041  0.37648308  0.180129718 #> NID.9   0.15711754  0.491736690  0.7190426  0.57788617 -0.999273111 #> NID.10 -0.73673533  0.818266556  0.8185789 -0.63154589 -0.260562184 #> NID.11  1.00000000 -0.717113060 -0.4160525  0.83369527 -0.120462002 #> NID.12 -0.71711306  1.000000000  0.7870787 -0.36138921 -0.523961175 #> NID.13 -0.41605250  0.787078745  1.0000000 -0.11730749 -0.737154188 #> NID.14  0.83369527 -0.361389210 -0.1173075  1.00000000 -0.549375803 #> TB     -0.12046200 -0.523961175 -0.7371542 -0.54937580  1.000000000 #> TB.1    0.36165203 -0.265623092 -0.4756171  0.48350122 -0.002285465 #> TB.2   -0.01720856 -0.499936438 -0.1640475 -0.41370097  0.584867685 #> TB.3    0.90574639 -0.915949390 -0.6643777  0.70423756  0.171254936 #> TB.4    0.22769184 -0.646727640 -0.4622499  0.23229497  0.289579675 #> TB.5   -0.30060329 -0.320490564 -0.3482806 -0.75150895  0.873606287 #> TB.6   -0.85202294  0.931489381  0.6102478 -0.60666554 -0.216909522 #> TB.7    0.57450973 -0.943522533 -0.8823073  0.12463608  0.734570474 #> TB.8    0.48707671 -0.914920286 -0.9268414  0.07785277  0.776066388 #> TB.9    0.59816723 -0.930089598 -0.8293954  0.14347513  0.685648607 #> TB.10  -0.02647334  0.561375851  0.2541044  0.38031162 -0.625688853 #> TB.11   0.39000033  0.007723622 -0.3231090  0.51245393 -0.211287698 #> TB.12   0.42082046 -0.873608565 -0.9116563 -0.03823067  0.844385571 #> TB.13   0.51603308 -0.930561213 -0.9239908  0.09427945  0.771666476 #> TB.14   0.68874472 -0.981648585 -0.8603866  0.31898318  0.586545117 #>                TB.1        TB.2        TB.3        TB.4        TB.5        TB.6 #> NID    -0.330487895 -0.23411559 -0.65373682 -0.70603081 -0.28397915  0.66007162 #> NID.1  -0.176985180 -0.43300715 -0.84752192 -0.40033317 -0.37541455  0.87010714 #> NID.2  -0.150611919 -0.60783939 -0.83803820 -0.62168527 -0.46711297  0.88239264 #> NID.3  -0.418947227 -0.10169786 -0.92962662 -0.26606706  0.09143206  0.86625597 #> NID.4  -0.764474179  0.12986795 -0.87705823 -0.47372390  0.16537761  0.73910216 #> NID.5  -0.199985996  0.43134804 -0.06571663  0.71837563  0.12808933 -0.03975092 #> NID.6  -0.352395392 -0.31466633 -0.90833069 -0.60963802 -0.22914673  0.90237277 #> NID.7  -0.394288638 -0.28022823 -0.82391276 -0.66513646 -0.26810816  0.81103279 #> NID.8  -0.217169363  0.06586720  0.59882562  0.02363313 -0.01678149 -0.69772482 #> NID.9   0.014808230 -0.57667549 -0.13459572 -0.27266296 -0.87846074  0.18125508 #> NID.10 -0.542882627  0.05021625 -0.90215713 -0.59265792  0.14656595  0.84197903 #> NID.11  0.361652030 -0.01720856  0.90574639  0.22769184 -0.30060329 -0.85202294 #> NID.12 -0.265623092 -0.49993644 -0.91594939 -0.64672764 -0.32049056  0.93148938 #> NID.13 -0.475617122 -0.16404751 -0.66437774 -0.46224989 -0.34828058  0.61024777 #> NID.14  0.483501220 -0.41370097  0.70423756  0.23229497 -0.75150895 -0.60666554 #> TB     -0.002285465  0.58486769  0.17125494  0.28957967  0.87360629 -0.21690952 #> TB.1    1.000000000 -0.44409891  0.42355047  0.29808958 -0.33967090 -0.18270269 #> TB.2   -0.444098908  1.00000000  0.18700992  0.42092095  0.81772264 -0.34718704 #> TB.3    0.423550473  0.18700992  1.00000000  0.58059746 -0.08041998 -0.96569126 #> TB.4    0.298089581  0.42092095  0.58059746  1.00000000  0.14279440 -0.59903621 #> TB.5   -0.339670904  0.81772264 -0.08041998  0.14279440  1.00000000 -0.02900436 #> TB.6   -0.182702687 -0.34718704 -0.96569126 -0.59903621 -0.02900436  1.00000000 #> TB.7    0.196048777  0.51142297  0.77754307  0.47129975  0.51247495 -0.79934897 #> TB.8    0.199571885  0.46824105  0.73681984  0.52301158  0.50926668 -0.76401158 #> TB.9    0.062721103  0.51946374  0.77407446  0.42119081  0.48536009 -0.82984952 #> TB.10   0.503440922 -0.97573435 -0.24961886 -0.44293758 -0.80152033  0.43540358 #> TB.11   0.435622227 -0.80500976  0.23636108 -0.32792620 -0.58783844 -0.11105102 #> TB.12   0.172474604  0.51453056  0.65671273  0.43286798  0.61301882 -0.68078601 #> TB.13   0.256536168  0.48220801  0.75569266  0.52302291  0.51706377 -0.76543984 #> TB.14   0.243177777  0.42927180  0.88781960  0.57240936  0.33119533 -0.90761097 #>               TB.7        TB.8        TB.9       TB.10        TB.11       TB.12 #> NID    -0.79666351 -0.88290982 -0.76936770  0.35788036 -0.185734668 -0.81892047 #> NID.1  -0.97863701 -0.94580240 -0.98558567  0.51993611 -0.150052382 -0.92956430 #> NID.2  -0.96792652 -0.94452731 -0.95954455  0.67276398  0.098074922 -0.92003603 #> NID.3  -0.73416627 -0.64804464 -0.73275699  0.13671390 -0.339498760 -0.60836887 #> NID.4  -0.69756595 -0.68816227 -0.63648533 -0.08660070 -0.490611839 -0.62715543 #> NID.5  -0.14051273 -0.07347971 -0.15062819 -0.41525754 -0.678710349 -0.13960414 #> NID.6  -0.94130149 -0.94552686 -0.92869877  0.41170699 -0.209015031 -0.89111800 #> NID.7  -0.91228883 -0.94996228 -0.88413287  0.38371956 -0.209557152 -0.89484329 #> NID.8   0.60021618  0.60177810  0.71494136 -0.24820743  0.469967764  0.54041102 #> NID.9  -0.70859461 -0.75326646 -0.65926358  0.61626571  0.217537045 -0.82413104 #> NID.10 -0.73854320 -0.76828095 -0.72399710  0.06072030 -0.473367493 -0.67144924 #> NID.11  0.57450973  0.48707671  0.59816723 -0.02647334  0.390000328  0.42082046 #> NID.12 -0.94352253 -0.91492029 -0.93008960  0.56137585  0.007723622 -0.87360856 #> NID.13 -0.88230734 -0.92684139 -0.82939544  0.25410440 -0.323108950 -0.91165632 #> NID.14  0.12463608  0.07785277  0.14347513  0.38031162  0.512453932 -0.03823067 #> TB      0.73457047  0.77606639  0.68564861 -0.62568885 -0.211287698  0.84438557 #> TB.1    0.19604878  0.19957189  0.06272110  0.50344092  0.435622227  0.17247460 #> TB.2    0.51142297  0.46824105  0.51946374 -0.97573435 -0.805009763  0.51453056 #> TB.3    0.77754307  0.73681984  0.77407446 -0.24961886  0.236361081  0.65671273 #> TB.4    0.47129975  0.52301158  0.42119081 -0.44293758 -0.327926197  0.43286798 #> TB.5    0.51247495  0.50926668  0.48536009 -0.80152033 -0.587838436  0.61301882 #> TB.6   -0.79934897 -0.76401158 -0.82984952  0.43540358 -0.111051022 -0.68078601 #> TB.7    1.00000000  0.98426163  0.98489508 -0.58680560  0.048731754  0.98164190 #> TB.8    0.98426163  1.00000000  0.96895130 -0.56513568  0.084735154  0.98630687 #> TB.9    0.98489508  0.96895130  1.00000000 -0.61944375  0.069527590  0.95741472 #> TB.10  -0.58680560 -0.56513568 -0.61944375  1.00000000  0.696897059 -0.59236549 #> TB.11   0.04873175  0.08473515  0.06952759  0.69689706  1.000000000  0.03399204 #> TB.12   0.98164190  0.98630687  0.95741472 -0.59236549  0.033992037  1.00000000 #> TB.13   0.99242123  0.99385347  0.96405792 -0.55795686  0.057476994  0.98837873 #> TB.14   0.97204537  0.96206201  0.96901144 -0.52149131  0.117519234  0.92206173 #>              TB.13       TB.14 #> NID    -0.85184701 -0.83370395 #> NID.1  -0.95256337 -0.97812735 #> NID.2  -0.95482739 -0.97603940 #> NID.3  -0.68567649 -0.80233886 #> NID.4  -0.71706500 -0.77640500 #> NID.5  -0.09502084 -0.06419038 #> NID.6  -0.94525855 -0.98866788 #> NID.7  -0.94108352 -0.95021228 #> NID.8   0.54722048  0.66457734 #> NID.9  -0.74761532 -0.55643916 #> NID.10 -0.75913704 -0.85165175 #> NID.11  0.51603308  0.68874472 #> NID.12 -0.93056121 -0.98164859 #> NID.13 -0.92399082 -0.86038663 #> NID.14  0.09427945  0.31898318 #> TB      0.77166648  0.58654512 #> TB.1    0.25653617  0.24317778 #> TB.2    0.48220801  0.42927180 #> TB.3    0.75569266  0.88781960 #> TB.4    0.52302291  0.57240936 #> TB.5    0.51706377  0.33119533 #> TB.6   -0.76543984 -0.90761097 #> TB.7    0.99242123  0.97204537 #> TB.8    0.99385347  0.96206201 #> TB.9    0.96405792  0.96901144 #> TB.10  -0.55795686 -0.52149131 #> TB.11   0.05747699  0.11751923 #> TB.12   0.98837873  0.92206173 #> TB.13   1.00000000  0.96366110 #> TB.14   0.96366110  1.00000000"},{"path":"https://january3.github.io/tmod/reference/evidencePlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an evidence plot for a module — evidencePlot","title":"Create an evidence plot for a module — evidencePlot","text":"Create evidence plot module","code":""},{"path":"https://january3.github.io/tmod/reference/evidencePlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an evidence plot for a module — evidencePlot","text":"","code":"evidencePlot(   l,   m,   mset = \"all\",   rug = TRUE,   roc = TRUE,   filter = FALSE,   unique = TRUE,   add = FALSE,   col = \"black\",   col.rug = \"#eeeeee\",   gene.labels = NULL,   gene.colors = NULL,   gene.lines = 1,   gl.cex = 1,   style = \"roc\",   lwd = 1,   lty = 1,   rug.size = 0.2,   legend = NULL,   ... )"},{"path":"https://january3.github.io/tmod/reference/evidencePlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an evidence plot for a module — evidencePlot","text":"l sorted list HGNC gene identifiers m character vector modules plot created mset module set use (see tmodUtest details) rug TRUE, draw rug-plot beneath ROC curve roc TRUE, draw ROC curve rug-plot filter TRUE, genes defined module set removed unique TRUE, duplicates removed add TRUE, plot added existing plot col character vector color used col.rug character value specifying color rug gene.labels TRUE, gene names shown; alternatively, named character vector gene labels shown, NULL (default) labels (option evaluated rug plotted) gene.colors NULL (default) character vectors indicating color gene. Either named vector vector order genes `l`. gene.lines number vector numbers; line width marking genes rug (default=1). vector named, names gene ids. gl.cex Text cex (magnification) gene labels style \"roc\" receiver-operator characteristic curve (default), \"gsea\" GSEA-style (Kaplan-Meier like plot) lwd line width (see par()) lty line type (see par()) rug.size fraction plot show rug. rug.size 0, rug drawn. rug.size 1, ROC curve drawn. legend position legend. NULL, legend drawn ... parameters passed plotting function","code":""},{"path":"https://january3.github.io/tmod/reference/evidencePlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an evidence plot for a module — evidencePlot","text":"function creates evidence plot module, based ordered list genes. default, plot shows receiving operator characteristic (ROC) curve rug , indicates distribution module genes sorted list. Several styles evidence plot possible:  * roc (default): receiver-operator characteristic like curve;    area curve corresponds effect size (AUC)  * roc_absolute: , values scaled    total number genes module  * gsea  * enrichment: curve shows relative enrichment given position","code":""},{"path":[]},{"path":"https://january3.github.io/tmod/reference/evidencePlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an evidence plot for a module — evidencePlot","text":"","code":"# artificially enriched list of genes set.seed(123) data(tmod) bg <- sample(tmod$gv) fg <- getGenes(\"LI.M127\", as.list=TRUE)[[1]] fg <- sample(c(fg, bg[1:1000])) l <- unique(c(fg, bg)) evidencePlot(l, \"LI.M127\") evidencePlot(l, filter=TRUE, \"LI.M127\")"},{"path":"https://january3.github.io/tmod/reference/filterGS.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter by genes belonging to a gene set from a data frame — filterGS","title":"Filter by genes belonging to a gene set from a data frame — filterGS","text":"Filter data frame vector genes belonging gene set","code":""},{"path":"https://january3.github.io/tmod/reference/filterGS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter by genes belonging to a gene set from a data frame — filterGS","text":"","code":"filterGS(genes, gs, mset = \"all\")  showModule(x, genes, gs, mset = \"all\", extra = NULL)"},{"path":"https://january3.github.io/tmod/reference/filterGS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter by genes belonging to a gene set from a data frame — filterGS","text":"genes character vector gene IDs gs character vector corresponding IDs gene sets shown mset Module set use; see \"tmodUtest\" details x data frame vector extra longer used.","code":""},{"path":"https://january3.github.io/tmod/reference/filterGS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter by genes belonging to a gene set from a data frame — filterGS","text":"filterGS returns logical vector length equal genes, TRUE indicating given gene member gene sets `gs`.","code":""},{"path":"https://january3.github.io/tmod/reference/filterGS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter by genes belonging to a gene set from a data frame — filterGS","text":"filterGS filters vector gene IDs based whether IDs belong given set gene sets, returning logical vector. showModule function deprecated removed future.","code":""},{"path":"https://january3.github.io/tmod/reference/filterGS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter by genes belonging to a gene set from a data frame — filterGS","text":"","code":"data(Egambia) ## LI.M127 – type I interferon response sel <- filterGS(\"LI.M127\", Egambia$GENE_SYMBOL) head(Egambia[sel, ]) #>  [1] GENE_SYMBOL GENE_NAME   EG          NID         NID         NID         #>  [7] NID         NID         NID         NID         NID         NID         #> [13] NID         NID         NID         NID         NID         NID         #> [19] TB          TB          TB          TB          TB          TB          #> [25] TB          TB          TB          TB          TB          TB          #> [31] TB          TB          TB          #> <0 rows> (or 0-length row.names)"},{"path":"https://january3.github.io/tmod/reference/getGenes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get genes belonging to a gene set — getGenes","title":"Get genes belonging to a gene set — getGenes","text":"Get genes belonging gene set","code":""},{"path":"https://january3.github.io/tmod/reference/getGenes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get genes belonging to a gene set — getGenes","text":"","code":"getGenes(gs = NULL, genes = NULL, fg = NULL, mset = \"all\", as.list = FALSE)"},{"path":"https://january3.github.io/tmod/reference/getGenes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get genes belonging to a gene set — getGenes","text":"gs gene set IDs; NULL, returns genes gene sets genes character vector gene IDs. NULL, genes parameter considered. fg genes foreground set mset gene set use (default: tmod gene sets) .list list genes rather data frame returned","code":""},{"path":"https://january3.github.io/tmod/reference/getGenes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get genes belonging to a gene set — getGenes","text":"data frame containing module gene mapping, list (.list == TRUE","code":""},{"path":"https://january3.github.io/tmod/reference/getGenes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get genes belonging to a gene set — getGenes","text":"Create data frame mapping module comma separated list genes. genelist provided, genes list shown. optional column, \"fg\" informs genes \"foreground\" data set.","code":""},{"path":"https://january3.github.io/tmod/reference/getModuleMembers.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the contents of a gene set — getModuleMembers","title":"Return the contents of a gene set — getModuleMembers","text":"Return contents gene set","code":""},{"path":"https://january3.github.io/tmod/reference/getModuleMembers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the contents of a gene set — getModuleMembers","text":"","code":"getModuleMembers(x, mset = \"all\")"},{"path":"https://january3.github.io/tmod/reference/getModuleMembers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the contents of a gene set — getModuleMembers","text":"x character vector gene set names mset optional, gene set collection","code":""},{"path":"https://january3.github.io/tmod/reference/getModuleMembers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the contents of a gene set — getModuleMembers","text":"list gene sets","code":""},{"path":"https://january3.github.io/tmod/reference/getModuleMembers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return the contents of a gene set — getModuleMembers","text":"function returns selected gene sets collection.","code":""},{"path":"https://january3.github.io/tmod/reference/getModuleMembers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the contents of a gene set — getModuleMembers","text":"","code":"# show the interferon related modules getModuleMembers(c(\"LI.M127\", \"LI.M158.0\", \"LI.M158.0\")) #> $LI.M127 #>  [1] \"TAP1\"   \"IFIH1\"  \"IRF7\"   \"PARP9\"  \"STAT1\"  \"PLSCR1\" \"IFITM1\" \"HERC5\"  #>  [9] \"DDX60\"  \"USP18\"  \"RSAD2\"  \"IFIT1\"  #>  #> $LI.M158.0 #>  [1] \"LHCGR\"    \"COL8A1\"   \"IMPG2\"    \"ITGB4\"    \"MMP12\"    \"TNR\"      #>  [7] \"IFNA7\"    \"IFNA4\"    \"SFN\"      \"LAMC2\"    \"ST14\"     \"ADAMTS20\" #> [13] \"FGF5\"     \"IFNA10\"   \"IFNA16\"   \"IFNA14\"   #>  #> $LI.M158.0 #>  [1] \"LHCGR\"    \"COL8A1\"   \"IMPG2\"    \"ITGB4\"    \"MMP12\"    \"TNR\"      #>  [7] \"IFNA7\"    \"IFNA4\"    \"SFN\"      \"LAMC2\"    \"ST14\"     \"ADAMTS20\" #> [13] \"FGF5\"     \"IFNA10\"   \"IFNA16\"   \"IFNA14\"   #>  getModuleMembers(\"LI.M127\") #> $LI.M127 #>  [1] \"TAP1\"   \"IFIH1\"  \"IRF7\"   \"PARP9\"  \"STAT1\"  \"PLSCR1\" \"IFITM1\" \"HERC5\"  #>  [9] \"DDX60\"  \"USP18\"  \"RSAD2\"  \"IFIT1\"  #>"},{"path":"https://january3.github.io/tmod/reference/ggEvidencePlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an evidence plot for a module (ggplot2 version) — ggEvidencePlot","title":"Create an evidence plot for a module (ggplot2 version) — ggEvidencePlot","text":"Create evidence plot module (ggplot2 version)","code":""},{"path":"https://january3.github.io/tmod/reference/ggEvidencePlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an evidence plot for a module (ggplot2 version) — ggEvidencePlot","text":"","code":"ggEvidencePlot(   l,   m,   mset = NULL,   filter = FALSE,   unique = TRUE,   gene.labels = NULL,   gene.colors = NULL )"},{"path":"https://january3.github.io/tmod/reference/ggEvidencePlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an evidence plot for a module (ggplot2 version) — ggEvidencePlot","text":"l sorted list HGNC gene identifiers m character vector modules plot created mset module set use (see tmodUtest details) filter TRUE, genes defined module set removed unique TRUE, duplicates removed gene.labels TRUE, gene names shown; alternatively, named character vector gene labels shown, NULL (default) labels (option evaluated rug plotted) gene.colors NULL (default) character vectors indicating color gene. Either named vector vector order genes `l`.","code":""},{"path":"https://january3.github.io/tmod/reference/ggPanelplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tmod panel plot using ggplot — ggPanelplot","title":"Create a tmod panel plot using ggplot — ggPanelplot","text":"Create tmod panel plot using ggplot","code":""},{"path":"https://january3.github.io/tmod/reference/ggPanelplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tmod panel plot using ggplot — ggPanelplot","text":"","code":"ggPanelplot(   res,   sgenes = NULL,   auc_thr = 0.5,   q_thr = 0.05,   filter_row_q = 0.01,   filter_row_auc = 0.65,   q_cutoff = 1e-12,   cluster = TRUE,   id_order = NULL,   effect_size = \"auto\",   colors = c(\"red\", \"grey\", \"blue\"),   label_angle = 45,   add_ids = TRUE,   mset = NULL )"},{"path":"https://january3.github.io/tmod/reference/ggPanelplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tmod panel plot using ggplot — ggPanelplot","text":"res list tmod results (element list data frame returned tmod test function) sgenes list summaries significantly DE genes gene set. element list matrix returned tmodDecideTests. NULL, bars plot monochromatic. auc_thr gene sets enrichments AUC (effect size) `auc_thr` shown q_thr gene sets enrichments q (adjusted P value) `q_thr` shown filter_row_q Gene sets shown least one contrast q smaller `filter_row_q` filter_row_auc Gene sets shown least one contrast AUC (effect size specified) larger `filter_row_auc` q_cutoff q value `q_cutoff` considered equal `q_cutoff` cluster whether cluster IDs similarity id_order character vector specifying order IDs shown. needs contain IDs shown, whatever IDs vector, shown top given order. effect_size name column contains effect sizes; default, name column taken \"effect_size\" attribute first result table. colors character vector least 1 (sgenes NULL) 3 (sgenes NULL) elements label_angle angle column labels shown add_ids add IDs gene sets titles plot mset object type 'tmodGS'. option `cluster` TRUE, mset object used cluster gene sets. default, built-transcription modules used. See details.","code":""},{"path":"https://january3.github.io/tmod/reference/ggPanelplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tmod panel plot using ggplot — ggPanelplot","text":"object returned ggplot2 object can         modified usual way.","code":""},{"path":"https://january3.github.io/tmod/reference/ggPanelplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a tmod panel plot using ggplot — ggPanelplot","text":"Panel plot kind heatmap. compact way representing results several gene set enrichment analyses. row panel plot shows result one gene set, column shows corresponds one analysis. example, one tests gene set enrichment number different contrasts, contrast represented separate column. cell panel plot shows effect size p-value. p-value encoded transparency: enrichments lower p-value stronger colors. size bar corresponds effect size, however defined. example, case tmodCERNOtest, tmodZtest tmodUtest area curve, AUC. addition, bars may also encode information number - -regulated genes. , object must created using function tmodDecideTests. object provides  information genes particular gene set regulated direction. order gene sets displayed , default, determined clustering gene sets based overlaps. work, ggPanelplot must know genes contained gene sets. provided parameter `mset`. default (mset NULL) built-list gene sets. , however, results gene set enrichment come different set gene sets, need specify mset parameter. See Examples.","code":""},{"path":[]},{"path":"https://january3.github.io/tmod/reference/ggPanelplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a tmod panel plot using ggplot — ggPanelplot","text":"","code":"## prepare a set of results data(Egambia) genes <- Egambia$GENE_SYMBOL exprs <- Egambia[ , -1:-4 ] group <- gsub(\"\\\\..*\", \"\", colnames(exprs)) ## test differential expression using limma design <- cbind(Intercept=rep(1, 30), TB=rep(c(0,1), each= 15)) if (FALSE) { library(limma) fit <- eBayes( lmFit(Egambia[,-c(1:3)], design)) tt <- topTable(fit, coef=2, number=Inf, genelist=Egambia[,1:3] ) res <- tmodCERNOtest(tt$GENE_SYMBOL) ## show the results using a panel plot ggPanelplot(list(limma=res)) ## add information about the significant genes sgenes <- tmodDecideTests(tt$GENE_SYMBOL, lfc=tt$logFC, pval=tt$adj.P.Val) names(sgenes) <- \"limma\" ggPanelplot(list(limma=res), sgenes=sgenes) ## we will now compare the results of enrichments for different types of ## differential expression tests on the data res_utest <- apply(exprs, 1, function(x) wilcox.test(x ~ group)$p.value) res_ttest <- apply(exprs, 1, function(x) t.test(x ~ group)$p.value) ## Calculate the gene set enrichment analysis results for each of the ## different types of tests res_tmod <- list() res_tmod$limma <- res res_tmod$utest <- tmodCERNOtest(genes[order(res_utest)]) res_tmod$ttest <- tmodCERNOtest(genes[order(res_ttest)]) ggPanelplot(res_tmod) ## Using the `mset` parameter ## First, we generate results using a different set of gene sets data(cell_signatures) res_cs <- tmodCERNOtest(tt$GENE_SYMBOL, mset=cell_signatures) ## the following will triger a warning that no clustering is possible ## because ggPanelplot doesn't have the information about the gene set ## contents ggPanelplot(list(res=res_cs)) ## if we use the mset parameter, clustering is available ggPanelplot(list(res=res_cs), mset=cell_signatures) }"},{"path":"https://january3.github.io/tmod/reference/hgEnrichmentPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a visualisation of enrichment — hgEnrichmentPlot","title":"Create a visualisation of enrichment — hgEnrichmentPlot","text":"Create visualisation enrichment","code":""},{"path":"https://january3.github.io/tmod/reference/hgEnrichmentPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a visualisation of enrichment — hgEnrichmentPlot","text":"","code":"hgEnrichmentPlot(fg, bg, m, mset = \"all\", ...)"},{"path":"https://january3.github.io/tmod/reference/hgEnrichmentPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a visualisation of enrichment — hgEnrichmentPlot","text":"fg foreground set genes bg background set genes (gene universe) m gene set plot created mset module set use (see tmodUtest details) ... additional parameters passed plotting function","code":""},{"path":"https://january3.github.io/tmod/reference/hgEnrichmentPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a visualisation of enrichment — hgEnrichmentPlot","text":"functions creates barplot visualizing enrichment module foreground (fg) set compared background (bg) set. counterpart","code":""},{"path":[]},{"path":"https://january3.github.io/tmod/reference/hgEnrichmentPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a visualisation of enrichment — hgEnrichmentPlot","text":"","code":"set.seed(123) data(tmod) bg <- tmod$gv fg <- getGenes(\"LI.M127\", as.list=TRUE)[[1]] fg <- sample(c(fg, bg[1:100])) hgEnrichmentPlot(fg, bg, \"LI.M127\")"},{"path":"https://january3.github.io/tmod/reference/makeTmodFromDataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a data frame to a tmod object — makeTmodFromDataFrame","title":"Convert a data frame to a tmod object — makeTmodFromDataFrame","text":"Convert data frame tmod object","code":""},{"path":"https://january3.github.io/tmod/reference/makeTmodFromDataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a data frame to a tmod object — makeTmodFromDataFrame","text":"","code":"makeTmodFromDataFrame(   df,   feature_col = 1,   module_col = 2,   title_col = NULL,   extra_module_cols = NULL,   extra_gene_cols = NULL )"},{"path":"https://january3.github.io/tmod/reference/makeTmodFromDataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a data frame to a tmod object — makeTmodFromDataFrame","text":"df data frame feature_col column contains feature (gene) IDs module_col column contains module (gene set) IDs title_col Description modules (NULL, description taken module_col) extra_module_cols Additional columns include module data frame extra_gene_cols Additional gene columns include genes data frame","code":""},{"path":"https://january3.github.io/tmod/reference/makeTmodFromDataFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a data frame to a tmod object — makeTmodFromDataFrame","text":"tmod object","code":""},{"path":"https://january3.github.io/tmod/reference/makeTmodFromDataFrame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a data frame to a tmod object — makeTmodFromDataFrame","text":"`makeTmodFromFeatureDataFrame` converts mapping information features (genes) modules (gene sets). data frame row feature-module pair. `makeTmodFromModuleDataFrame` converts mapping information features (genes) modules (gene sets). data frame row module, gene IDs corresponding module stored comma separated string, e.g. Vice versa, `tmod2DataFrame` converts tmod object data frame.","code":""},{"path":[]},{"path":"https://january3.github.io/tmod/reference/makeTmodFromDataFrame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a data frame to a tmod object — makeTmodFromDataFrame","text":"","code":"df <- data.frame( gene_id=LETTERS[1:10], geneset_id=rep(letters[1:2], each=5), geneset_description=rep(paste0(\"Gene set \", letters[1:2]), each=5)) res <- makeTmodFromDataFrame(df,    feature_col=\"gene_id\",    module_col=\"geneset_id\",   title_col=\"geneset_description\") #> making Tmod"},{"path":"https://january3.github.io/tmod/reference/modCorPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a correlation heatmap for modules — modCorPlot","title":"Plot a correlation heatmap for modules — modCorPlot","text":"Plot correlation heatmap modules","code":""},{"path":"https://january3.github.io/tmod/reference/modCorPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a correlation heatmap for modules — modCorPlot","text":"","code":"modCorPlot(   modules,   mset = NULL,   heatmap_func = pheatmap,   labels = NULL,   stat = \"jaccard\",   upper.cutoff = NULL,   ... )"},{"path":"https://january3.github.io/tmod/reference/modCorPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a correlation heatmap for modules — modCorPlot","text":"modules either character vector module IDs mset, list contains module members mset module set use. Either character vector (\"LI\", \"DC\" \"\", default: ) object class tmod (see \"Custom module definitions\" ) heatmap_func function drawing heatmap labels Labels modules (NULL, labels retrieved `mset`) stat Type statistics return.  \"jaccard\": Jaccard index (default); \"number\": number common genes; \"soerensen\": Soerensen-Dice coefficient; \"overlap\": Szymkiewicz-Simpson coefficient. upper.cutoff Specify upper cutoff color palette ... parameters passed heatmap function (default, [pheatmap()].","code":""},{"path":"https://january3.github.io/tmod/reference/modCorPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a correlation heatmap for modules — modCorPlot","text":"Returns return value heatmap_func (default, pheatmap object).","code":""},{"path":"https://january3.github.io/tmod/reference/modGroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Find group of modules — modGroups","title":"Find group of modules — modGroups","text":"Find group modules  based shared genes","code":""},{"path":"https://january3.github.io/tmod/reference/modGroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find group of modules — modGroups","text":"","code":"modGroups(modules, mset = NULL, min.overlap = 2, stat = \"number\")"},{"path":"https://january3.github.io/tmod/reference/modGroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find group of modules — modGroups","text":"modules Either list modules character vector. mset module set use. Either character vector (\"LI\", \"DC\" \"\", default: ) object class tmod (see \"Custom module definitions\" ) min.overlap Minimum number overlapping items stat == number, minimum jaccard index stat == jaccard etc. stat Type statistics return.  \"jaccard\": Jaccard index (default); \"number\": number common genes; \"soerensen\": Soerensen-Dice coefficient; \"overlap\": Szymkiewicz-Simpson coefficient.","code":""},{"path":"https://january3.github.io/tmod/reference/modGroups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find group of modules — modGroups","text":"Split modules groups based overlapping items. first argument, modules, either character vector module identifiers `mset` (NULL mset indicates default mset tmod) list. list, element assumed character vector module IDs.","code":""},{"path":"https://january3.github.io/tmod/reference/modGroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find group of modules — modGroups","text":"","code":"mymods <- list(A=c(1, 2, 3), B=c(2, 3, 4, 5), C=c(5, 6, 7)) modGroups(mymods) #> $A #> [1] \"A\" \"B\" #>  #> $C #> [1] \"C\" #>"},{"path":"https://january3.github.io/tmod/reference/modOverlaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate overlaps of the modules — modOverlaps","title":"Calculate overlaps of the modules — modOverlaps","text":"Calculate overlaps modules","code":""},{"path":"https://january3.github.io/tmod/reference/modOverlaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate overlaps of the modules — modOverlaps","text":"","code":"modOverlaps(modules = NULL, mset = NULL, stat = \"jaccard\")"},{"path":"https://january3.github.io/tmod/reference/modOverlaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate overlaps of the modules — modOverlaps","text":"modules either character vector module IDs mset, list contains module members mset module set use. Either character vector (\"LI\", \"DC\" \"\", default: ) object class tmod (see \"Custom module definitions\" ) stat Type statistics return.  \"jaccard\": Jaccard index (default); \"number\": number common genes; \"soerensen\": Soerensen-Dice coefficient; \"overlap\": Szymkiewicz-Simpson coefficient.","code":""},{"path":"https://january3.github.io/tmod/reference/modOverlaps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate overlaps of the modules — modOverlaps","text":"set modules (aka gene sets) determine similarity . can run modOverlaps either character vector module IDs list. first case, module elements taken `mset`, NULL, default tmod module set. Alternatively, can provide list element character vector. case, names list module IDs, character vectors contain associated elements. different statistics available :  * \"number\": total number common genes (size overlap)  * \"jaccard\": Jaccard index, .e. \\(\\frac{|\\cap B|}{|\\cup B|}\\)    (number common elements divided total number unique elements);  * \"soerensen\": Soerensen-Dice coefficient, defined \\(\\frac{2 \\cdot |\\cap B|}{|| + |B|}\\) – number common genes relation total number elements (divided two, maximum 1)    (number common elements divided average size gene sets)  * \"overlap\": Szymkiewicz-Simpson coefficient, defined \\(\\frac{|\\cap B|}{\\min(||, |B|)}\\) – number common genes scaled size smaller two gene sets    (number common elements divided size smaller gene set)","code":""},{"path":"https://january3.github.io/tmod/reference/modcors.html","id":null,"dir":"Reference","previous_headings":"","what":"Module correlation — modcors","title":"Module correlation — modcors","text":"Calculate correlation modules","code":""},{"path":"https://january3.github.io/tmod/reference/modcors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Module correlation — modcors","text":"","code":"modcors(x, g, mset = NULL, ...)"},{"path":"https://january3.github.io/tmod/reference/modcors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Module correlation — modcors","text":"x data set, variables (e.g. genes) rows samples columns g vector variable idenitifiers correspond definition modules mset module set ... parameters passed cor() function","code":""},{"path":"https://january3.github.io/tmod/reference/modcors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Module correlation — modcors","text":"matrix module correlation coefficients","code":""},{"path":"https://january3.github.io/tmod/reference/modcors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Module correlation — modcors","text":"correlation modules defined  correlation coefficient modules eigengenes. based particular gene expression data set. function simple wrapper combining eigengene() cor().","code":""},{"path":"https://january3.github.io/tmod/reference/modjaccard.html","id":null,"dir":"Reference","previous_headings":"","what":"Jaccard index for modules — modjaccard","title":"Jaccard index for modules — modjaccard","text":"Jaccard index modules","code":""},{"path":"https://january3.github.io/tmod/reference/modjaccard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jaccard index for modules — modjaccard","text":"","code":"modjaccard(mset = NULL, g = NULL)"},{"path":"https://january3.github.io/tmod/reference/modjaccard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jaccard index for modules — modjaccard","text":"mset set modules calculate Jaccard index. NULL, default tmod module set used. g list genes. NULL, list genes mset used.","code":""},{"path":"https://january3.github.io/tmod/reference/modjaccard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jaccard index for modules — modjaccard","text":"matrix Jaccard index pair modules mset","code":""},{"path":"https://january3.github.io/tmod/reference/modjaccard.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Jaccard index for modules — modjaccard","text":"pair modules mset, calculate Jacard index modules.","code":""},{"path":"https://january3.github.io/tmod/reference/modmetabo.html","id":null,"dir":"Reference","previous_headings":"","what":"Modules for metabolic profiling — modmetabo","title":"Modules for metabolic profiling — modmetabo","text":"Feature data sets metabolic profiling","code":""},{"path":"https://january3.github.io/tmod/reference/modmetabo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modules for metabolic profiling — modmetabo","text":"module set \"modmetabo\" can used tmod analyse metabolic profiling data. clusters defined set based hierarchical clustering metabolic compounds human serum published paper  metabolic profiling tuberculosis Weiner et al. (2012). example analysis, \"tbmprof\" data set containing metabolic profiles serum isolated tuberculosis (TB) patients healthy individuals. tbmprof data frame containing observations rows metabolite id's (corresponding id's modmetabo object). See examples .","code":""},{"path":"https://january3.github.io/tmod/reference/modmetabo.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Modules for metabolic profiling — modmetabo","text":"Weiner et al. \"Biomarkers inflammation, immunosuppression stress active disease revealed metabolomic profiling tuberculosis patients.\" PloS one 7.7 (2012): e40221.","code":""},{"path":[]},{"path":"https://january3.github.io/tmod/reference/modmetabo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modules for metabolic profiling — modmetabo","text":"","code":"data(modmetabo)  # module definitions data(tbmprof)    # example data set ids <- rownames(tbmprof) tb  <- factor(gsub(\"\\\\..*\", \"\", ids))  ## use Wilcoxon test to calculate significant differences wcx <- apply(tbmprof, 2, function(x) wilcox.test(x ~ tb)$p.value) wcx <- sort(wcx) tmodCERNOtest(names(wcx), mset=modmetabo) #>            ID                                           Title     cerno N1 #> ME.107 ME.107                             Amino acids cluster 104.64470 18 #> ME.37   ME.37 Kynurenines, taurocholates and cortisol cluster 116.88147 25 #> MP.2     MP.2                                      Amino Acid  99.16212 28 #>              AUC      cES      P.Value    adj.P.Val #> ME.107 0.8824576 2.906797 1.283792e-08 5.391925e-07 #> ME.37  0.8837093 2.337629 2.816098e-07 5.913805e-06 #> MP.2   0.7060786 1.770752 3.357995e-04 4.701193e-03"},{"path":"https://january3.github.io/tmod/reference/pcaplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a PCA object returned by prcomp — pcaplot","title":"Plot a PCA object returned by prcomp — pcaplot","text":"Plot PCA object returned prcomp","code":""},{"path":"https://january3.github.io/tmod/reference/pcaplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a PCA object returned by prcomp — pcaplot","text":"","code":"pcaplot(   pca,   components = 1:2,   group = NULL,   col = NULL,   pch = 19,   cex = 2,   legend = NULL,   ... )"},{"path":"https://january3.github.io/tmod/reference/pcaplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a PCA object returned by prcomp — pcaplot","text":"pca PCA object returned prcomp components vector length two indicating components plot group factor determining shapes points show (unless overriden pch=...) col Color plotting (default: internal palette) pch Type character plot (default: 19) cex size symbols used plotting legend draw legend? legend position (eg. \"topright\"), legend drawn. NULL group parameter NULL, . ... parameters passed plot() function (e.g. col, cex, ...)","code":""},{"path":"https://january3.github.io/tmod/reference/pcaplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a PCA object returned by prcomp — pcaplot","text":"group NULL, NULL; else data frame containing         colors shapes matching group","code":""},{"path":"https://january3.github.io/tmod/reference/pcaplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a PCA object returned by prcomp — pcaplot","text":"simplistic function. much better way use pca2d function pca3d package.","code":""},{"path":"https://january3.github.io/tmod/reference/pvalEffectPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an effect size / p-value plot — pvalEffectPlot","title":"Create an effect size / p-value plot — pvalEffectPlot","text":"Create heatmap-like plot showing information effect size p-values.","code":""},{"path":"https://january3.github.io/tmod/reference/pvalEffectPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an effect size / p-value plot — pvalEffectPlot","text":"","code":"pvalEffectPlot(   e,   p,   pval.thr = 0.01,   pval.cutoff = 1e-06,   row.labels = NULL,   col.labels = NULL,   plot.func = NULL,   grid = \"at\",   grid.color = \"#33333333\",   plot.cex = 1,   text.cex = 1,   col.labels.style = \"top\",   symmetrical = FALSE,   legend.style = \"auto\",   min.e = NULL,   max.e = NULL )"},{"path":"https://january3.github.io/tmod/reference/pvalEffectPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an effect size / p-value plot — pvalEffectPlot","text":"e matrix effect sizes p matrix probabilities pval.thr p-value must lower order test result visualized pval.cutoff visual scale, p-values pval.cutoff replaced pval.cutoff row.labels Labels modules. must named vector, module IDs vector names. NULL, module titles analyses results used. col.labels Labels columns. NULL, names elements list x used. plot.func Optionally, function used draw dots. See \"Details\" grid Style light-grey grid plotted; can \"none\", \"\" \"\" grid.color Color grid plotted (default: light grey) plot.cex numerical value giving amount plot symbols maginfied text.cex numerical value giving amount plot text magnified, vector containing three cex values row labels, column labels legend, respectively col.labels.style Style column names: \"top\" (default), \"bottom\", \"\", \"none\" symmetrical effect sizes distributed symmetrically around 0 (default: FALSE) legend.style Style legend: \"auto\" -- automatic; \"broad\": pval legend side side effect size legend; \"tall\": effect size legend pval legend; \"none\" -- legend. min.e, max.e scale limits effect size","code":""},{"path":"https://january3.github.io/tmod/reference/pvalEffectPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an effect size / p-value plot — pvalEffectPlot","text":"Invisibly returns NULL value.","code":""},{"path":"https://january3.github.io/tmod/reference/pvalEffectPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an effect size / p-value plot — pvalEffectPlot","text":"pvalEffectPlot shows heatmap-like plot. row corresponds one series tests (e.g. one module), column corresponds time points conditions given analysis run. significant result shown red dot. Size dot corresponds effect size (arbitrary value), intensity color corresponds log10 p-value. Just like heatmap corresponds single numeric matrix, pvalue / effect plot corresponds two matrices: one effect size, another one p-values. cell matrix corresponds results single statistical test. example, number genes transcriptional modules might tested differential expression enrichment, respectively, several conditions. default, test outcome represented dot varying size color. Alternatively, function may specified parameter 'plot.func'. called test result drawn. plot.func function must take following arguments: row, coleither row / column number id row / column plot; NULL drawing legend x, yuser coordinates result visualize w, hwidth height item plot eEnrichment -- relative value 0 1, 0 minimum 1 maximum enrichment found pP-value -- absolute value 0 1 purposes drawing legend, function must accept NULL p-value NULL enrichment parameter.","code":""},{"path":"https://january3.github.io/tmod/reference/showGene.html","id":null,"dir":"Reference","previous_headings":"","what":"A combined beeswarm / boxplot — showGene","title":"A combined beeswarm / boxplot — showGene","text":"combined beeswarm / boxplot","code":""},{"path":"https://january3.github.io/tmod/reference/showGene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A combined beeswarm / boxplot — showGene","text":"","code":"showGene(   data,   group,   main = \"\",   pch = 19,   xlab = \"\",   ylab = \"log2 expression\",   las = 2,   pwcol = NULL,   ... )"},{"path":"https://january3.github.io/tmod/reference/showGene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A combined beeswarm / boxplot — showGene","text":"data vector numeric values plotted group factor describing groups main title plot pch character plot points xlab, ylab x y axis labels las see par() pwcol colors points (see beeswarm) ... additional parameters passed beeswarm command","code":""},{"path":"https://january3.github.io/tmod/reference/showGene.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A combined beeswarm / boxplot — showGene","text":"just simple wrapper around beeswarm() boxplot() commands.","code":""},{"path":"https://january3.github.io/tmod/reference/showGene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A combined beeswarm / boxplot — showGene","text":"","code":"data(Egambia) E <- as.matrix(Egambia[,-c(1:3)]) showGene(E[\"20799\",], rep(c(\"CTRL\", \"TB\"), each=15))"},{"path":"https://january3.github.io/tmod/reference/simplePie.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Pie Chart — simplePie","title":"Simple Pie Chart — simplePie","text":"simplePie function draws simple pie chart specified coordinates specified width, height color. simpleRug function draws corresponding rug plot, simpleBoxpie creates \"rectangular pie chart\" considered better legible regular pie.","code":""},{"path":"https://january3.github.io/tmod/reference/simplePie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Pie Chart — simplePie","text":"","code":"simplePie(x, y, w, h, v, col, res = 100, border = NA)  simpleRug(x, y, w, h, v, col, border = NULL)  simpleBoxpie(x, y, w, h, v, col, border = NA, grid = 3)"},{"path":"https://january3.github.io/tmod/reference/simplePie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Pie Chart — simplePie","text":"x, y coordinates draw plot w, h width height plot v sizes slices col colors slices res resolution (number polygon edges full circle) border color border. Use NA (default) NULL border grid boxpie : grid areas distributed. roughly equal number areas shown.","code":""},{"path":"https://january3.github.io/tmod/reference/simplePie.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple Pie Chart — simplePie","text":"simplePie() draws pie chart width w height h coordinates (x,y). size slices taken numeric vector v, color character vector col.","code":""},{"path":"https://january3.github.io/tmod/reference/simplePie.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple Pie Chart — simplePie","text":"","code":"# demonstration of the three widgets plot.new() par(usr=c(0,3,0,3)) x <- c(7, 5, 11) col <- tmodPal() b <- \"black\" simpleRug(0.5, 1.5, 0.8, 0.8, v=x, col=col, border=b) simplePie(1.5, 1.5, 0.8, 0.8, v=x, col=col, border=b) simpleBoxpie(2.5, 1.5, 0.8, 0.8, v=x, col=col, border=b)   # using pie as plotting symbol plot(NULL, xlim=1:2, ylim=1:2, xlab=\"\", ylab=\"\") col <- c(\"#cc000099\", \"#0000cc99\") for(i in 1:125) {    x <- runif(1) + 1    y <- runif(1) + 1   simplePie( x, y, 0.05, 0.05, c(x,y), col) }   # square filled with box pies n <- 10  w <- h <- 1/(n+1) plot.new() for(i in 1:n) for(j in 1:n)   simpleBoxpie(1/n*(i-1/2), 1/n*(j-1/2), w, h,   v=runif(3), col=tmodPal())"},{"path":"https://january3.github.io/tmod/reference/tmod-data.html","id":null,"dir":"Reference","previous_headings":"","what":"Default gene expression module data — tmod-data","title":"Default gene expression module data — tmod-data","text":"Gene expression module data Chaussabel et al. (2008) Li et al. (2014)","code":""},{"path":"https://january3.github.io/tmod/reference/tmod-data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default gene expression module data — tmod-data","text":"tmod package includes one data set class tmod can loaded data(tmod). data set derived two studies (see package vignette details). default, enrichment analysis tmod uses data set; however, loaded user workspace default.","code":""},{"path":"https://january3.github.io/tmod/reference/tmod-data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Default gene expression module data — tmod-data","text":"Chaussabel, Damien, Charles Quinn, Jing Shen, Pinakeen Patel, Casey Glaser, Nicole Baldwin, Dorothee Stichweh, et al. 2008.  \"Modular Analysis Framework Blood Genomics Studies: Application Systemic Lupus Erythematosus.\" Immunity 29(1):150-64. Li, Shuzhao, Nadine Rouphael, Sai Duraisingham, Sandra Romero-Steiner, Scott Presnell, Carl Davis, Daniel S Schmidt, et al. 2014. \"Molecular Signatures Antibody Responses Derived Systems Biology Study Five Human Vaccines.\" Nature Immunology 15(2):195-204.","code":""},{"path":[]},{"path":"https://january3.github.io/tmod/reference/tmod-data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default gene expression module data — tmod-data","text":"","code":"# list of first 10 modules data(tmod) tmod #> An object of class \"tmodGS\" #> \t606 gene sets, 12712 genes tmod$MODULES[1:10, ] #> NULL tmod[1:10] #> An object of class \"tmodGS\" #> \t10 gene sets, 455 genes"},{"path":"https://january3.github.io/tmod/reference/tmod-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Transcriptional Module Analysis — tmod-package","title":"Transcriptional Module Analysis — tmod-package","text":"Transcriptional Module Analysis","code":""},{"path":"https://january3.github.io/tmod/reference/tmod-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transcriptional Module Analysis — tmod-package","text":"primary role package provide published module assignments genes transcriptional modules, well tools analyse visualize modules.","code":""},{"path":[]},{"path":"https://january3.github.io/tmod/reference/tmod2DataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a tmod module set into a data frame — tmod2DataFrame","title":"Convert a tmod module set into a data frame — tmod2DataFrame","text":"Convert tmod module set data frame","code":""},{"path":"https://january3.github.io/tmod/reference/tmod2DataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a tmod module set into a data frame — tmod2DataFrame","text":"","code":"tmod2DataFrame(   mset,   rows = \"modules\",   module_col = \"module_id\",   feature_col = \"feature_id\",   sep = \",\" )"},{"path":"https://january3.github.io/tmod/reference/tmod2DataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a tmod module set into a data frame — tmod2DataFrame","text":"mset tmod object (e.g. generated makeTmod) rows \"modules\", row corresponding module (gene set); \"features\", row corresponding gene. module_col Name column module (gene set) IDs feature_col Name column feature (gene) IDs sep separator used collate module IDs (rows==\"features\") feature IDs (rows==\"modules\")","code":""},{"path":[]},{"path":"https://january3.github.io/tmod/reference/tmod2tmodGS.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert the old tmod objects to the tmodGS objects — tmod2tmodGS","title":"Convert the old tmod objects to the tmodGS objects — tmod2tmodGS","text":"Convert old tmod objects tmodGS objects","code":""},{"path":"https://january3.github.io/tmod/reference/tmod2tmodGS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert the old tmod objects to the tmodGS objects — tmod2tmodGS","text":"","code":"tmod2tmodGS(x)"},{"path":"https://january3.github.io/tmod/reference/tmod2tmodGS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert the old tmod objects to the tmodGS objects — tmod2tmodGS","text":"x object class tmod","code":""},{"path":"https://january3.github.io/tmod/reference/tmod2tmodGS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert the old tmod objects to the tmodGS objects — tmod2tmodGS","text":"Returns object class tmodGS.","code":""},{"path":"https://january3.github.io/tmod/reference/tmod2tmodGS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert the old tmod objects to the tmodGS objects — tmod2tmodGS","text":"old tmod representation inefficient. function converts objects new representation allowing faster computations memory efficient.","code":""},{"path":"https://january3.github.io/tmod/reference/tmodAUC.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate AUC — tmodAUC","title":"Calculate AUC — tmodAUC","text":"Calculate AUC","code":""},{"path":"https://january3.github.io/tmod/reference/tmodAUC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate AUC — tmodAUC","text":"","code":"tmodAUC(   l,   ranks,   modules = NULL,   stat = \"AUC\",   recalculate.ranks = TRUE,   filter = FALSE,   mset = \"all\" )"},{"path":"https://january3.github.io/tmod/reference/tmodAUC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate AUC — tmodAUC","text":"l List gene names corresponding rows ranks matrix ranks matrix ranks, columns correspond samples rows genes l list modules optional list modules make test stat statistics generate. Default: AUC recalculate.ranks Filtering removing duplicates also remove ranks, recalculated. Use FALSE want behavior. unsure, stay TRUE filter Remove gene names module assignments mset module set use. \"LI\", \"DC\" \"\" (default: \"\")","code":""},{"path":"https://january3.github.io/tmod/reference/tmodAUC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate AUC — tmodAUC","text":"matrix number columns \"ranks\" many rows modules tested.","code":""},{"path":"https://january3.github.io/tmod/reference/tmodAUC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate AUC — tmodAUC","text":"tmodAUC calculates AUC U statistics. main purpose function use randomization tests. tmodCERNOtest tmodUtest calculate, module, enrichment single sorted list genes, tmodAUC takes number sorted lists. , actually, sortings -- vectors ranks genes replicate. Note input function different tmodUtest related functions: ordering l matrix ranks matter, long matrix ranks contains actual rankings. column ranks matrix treated separate sample. Also, `nodups` parameter available (TRUE default)  tests used . means AUCs calculated might slightly different AUCs calculated default parameters tests [tmodCERNOtest()]. Use `nodups=FALSE` [tmodCERNOtest()] obtain identical results `tmodAUC`.","code":""},{"path":[]},{"path":"https://january3.github.io/tmod/reference/tmodAUC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate AUC — tmodAUC","text":"","code":"data(tmod) l <- tmod_ids(tmod) ranks <- 1:length(l) res <- tmodAUC(l, ranks) #> Warning: No genes in l match genes in GENES head(res) #> NULL"},{"path":"https://january3.github.io/tmod/reference/tmodDecideTests.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the Up- or Down-regulated genes per module — tmodDecideTests","title":"Count the Up- or Down-regulated genes per module — tmodDecideTests","text":"module set, calculate number genes module significantly - -regulated.","code":""},{"path":"https://january3.github.io/tmod/reference/tmodDecideTests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the Up- or Down-regulated genes per module — tmodDecideTests","text":"","code":"tmodDecideTests(   g,   lfc = NULL,   pval = NULL,   lfc.thr = 0.5,   pval.thr = 0.05,   labels = NULL,   filter.unknown = FALSE,   mset = \"all\" )"},{"path":"https://january3.github.io/tmod/reference/tmodDecideTests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the Up- or Down-regulated genes per module — tmodDecideTests","text":"g character vector gene symbols lfc numeric vector matrix log fold changes pval numeric vector matrix p-values. Must dimensions lfc lfc.thr log fold change threshold pval.thr p-value threshold labels Names comparisons. Either NULL character vector length equal number columns lfc pval. filter.unknown TRUE, modules annotation omitted mset module set use. Either character vector (\"LI\", \"DC\" \"\", default: LI) list (see \"Custom module definitions\" )","code":""},{"path":"https://january3.github.io/tmod/reference/tmodDecideTests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count the Up- or Down-regulated genes per module — tmodDecideTests","text":"list many elements comparisons (columns lfc pval). element list data  frame columns \"\", \"Zero\" \"\" giving number -, - -regulated genes respectively. Rows data frame correspond module IDs.","code":""},{"path":"https://january3.github.io/tmod/reference/tmodDecideTests.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count the Up- or Down-regulated genes per module — tmodDecideTests","text":"function can used decide whether module, whole, - regulated. module, calculates number genes -, - regulated.  gene considered - regulated associated p-value smaller pval.thr associated log fold change greater lfc.thr. gene considered - regulated associated p-value smaller pval.thr associated log fold change smaller lfc.thr. Note unlike decideTests limma, tmodDecideTests correct p-values multiple testing -- therefore, p-values already corrected.","code":""},{"path":[]},{"path":"https://january3.github.io/tmod/reference/tmodGS-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 class for tmod gene set collections — makeTmodGS","title":"S3 class for tmod gene set collections — makeTmodGS","text":"S3 class tmod gene set collections","code":""},{"path":"https://january3.github.io/tmod/reference/tmodGS-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 class for tmod gene set collections — makeTmodGS","text":"","code":"makeTmodGS(gs2gene, gs = NULL, weights = NULL, info = NULL)  makeTmod(modules, modules2genes, genes2modules = NULL, genes = NULL)  as_tmodGS(x, check_sanity = FALSE)  # S3 method for tmodGS print(x, ...)  # S3 method for tmodGS length(x)  # S3 method for tmodGS [(x, i)  # S3 method for tmod [(x, i)"},{"path":"https://january3.github.io/tmod/reference/tmodGS-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 class for tmod gene set collections — makeTmodGS","text":"gs2gene, modules2genes list module IDs names. member list character vector IDs genes contained module gs, modules [Optional] data frame least columns ID Title weights [Optional] named numeric vector weights gene set info [Optional] list containing meta-information gene set collection genes2modules, genes Ignored x tmodGS tmod object check_sanity whether tmodGS object tested correctness ... arguments passed `print()` indices specifying elements extract replace","code":""},{"path":"https://january3.github.io/tmod/reference/tmodGS-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"S3 class for tmod gene set collections — makeTmodGS","text":"object class tmod contains gene set annotations (`tmod$gs`),  character vector gene identifiers (`tmod$gv`) mapping gene sets gene identifiers (`tmod$gs2gv`). Optionally, vector numeric weights length `gs2gv` may provided (`tmod$weights`). Furthermore, may contain additional information gene set (`tmod$info`). `tmod$gs` data frame must contain column \"ID\". Additional optional columns `Title` `Description` recognized functions. columns may contain additional information gene sets. number rows data frame equal number gene sets gene set collection. element tmod$g2m list corresponds respective row `tmod$gs` data frame. element integer vector containing positions gene identifiers `tmod$gv` character vector. Objects class tmodGS constructed  calling function makeTmodGS(). function check validity consistency provided objects. makeTmod function remains compatibility previous versions package. produces objects new class tmodGS, however. See package vignette constructing custom module sets.","code":""},{"path":[]},{"path":"https://january3.github.io/tmod/reference/tmodGS-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 class for tmod gene set collections — makeTmodGS","text":"","code":"# A minimal example gs <- data.frame(ID=letters[1:3], Title=LETTERS[1:3]) gs2gv <- list(a=c(\"g1\", \"g2\"), b=c(\"g3\", \"g4\"), c=c(\"g1\", \"g2\", \"g4\")) mymset <- makeTmodGS(gs2gene=gs2gv, gs=gs) str(mymset) #> Classes 'list', 'tmodGS'  hidden list of 5 #>  $ gs     : tibble [3 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ ID   : chr [1:3] \"a\" \"b\" \"c\" #>   ..$ Title: chr [1:3] \"A\" \"B\" \"C\" #>  $ gs2gv  :List of 3 #>   ..$ : int [1:2] 1 2 #>   ..$ : int [1:2] 3 4 #>   ..$ : int [1:3] 1 2 4 #>  $ gv     : chr [1:4] \"g1\" \"g2\" \"g3\" \"g4\" #>  $ info   : NULL #>  $ weights: NULL"},{"path":"https://january3.github.io/tmod/reference/tmodImportMSigDB.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data from MSigDB — tmodImportMSigDB","title":"Import data from MSigDB — tmodImportMSigDB","text":"Import data MSigDB file either XML GMT format","code":""},{"path":"https://january3.github.io/tmod/reference/tmodImportMSigDB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data from MSigDB — tmodImportMSigDB","text":"","code":"tmodImportMSigDB(   file = NULL,   format = \"xml\",   organism = \"Homo sapiens\",   fields = c(\"STANDARD_NAME\", \"CATEGORY_CODE\", \"SUB_CATEGORY_CODE\", \"EXACT_SOURCE\",     \"EXTERNAL_DETAILS_URL\") )"},{"path":"https://january3.github.io/tmod/reference/tmodImportMSigDB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data from MSigDB — tmodImportMSigDB","text":"file name file parse format Format (either \"xml\" \"gmt\") organism Select organism use. Use \"\" organisms file (\"xml\" format; default: \"Homo sapiens\") fields fields import MODULES data frame (\"xml\" format)","code":""},{"path":"https://january3.github.io/tmod/reference/tmodImportMSigDB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import data from MSigDB — tmodImportMSigDB","text":"tmod object","code":""},{"path":"https://january3.github.io/tmod/reference/tmodImportMSigDB.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import data from MSigDB — tmodImportMSigDB","text":"command parses file MSigDB. XML MSigDB-specific \"GMT\" format supported (however, latter discouraged, contains less information).","code":""},{"path":"https://january3.github.io/tmod/reference/tmodImportMSigDB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import data from MSigDB — tmodImportMSigDB","text":"","code":"if (FALSE) { ## First, download the file \"msigdb_v7.5.1.xml\"  ## from http://www.broadinstitute.org/gsea/downloads.jsp msig <- tmodImportMSigDB(\"msigdb_v7.5.1.xml\") }"},{"path":"https://january3.github.io/tmod/reference/tmodLEA.html","id":null,"dir":"Reference","previous_headings":"","what":"Leading Edge Analysis — tmodLEA","title":"Leading Edge Analysis — tmodLEA","text":"module, return list genes leading edge","code":""},{"path":"https://january3.github.io/tmod/reference/tmodLEA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Leading Edge Analysis — tmodLEA","text":"","code":"tmodLEA(l, modules, mset = \"all\", nodups = TRUE, filter = FALSE)"},{"path":"https://january3.github.io/tmod/reference/tmodLEA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Leading Edge Analysis — tmodLEA","text":"l list genes modules character vector module IDs run LEA mset module set use. Either character vector (\"LI\", \"DC\" \"\", default: LI) object class tmod nodups Remove duplicate gene names l corresponding rows ranks filter Remove gene names module assignments","code":""},{"path":"https://january3.github.io/tmod/reference/tmodLEA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Leading Edge Analysis — tmodLEA","text":"Given vector ordered gene identifiers vector module IDs, module, return genes -slope GSEA-style evidence plot. , return genes driving enrichment.","code":""},{"path":"https://january3.github.io/tmod/reference/tmodLEASummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary stats of a leading edge analysis — tmodLEASummary","title":"Summary stats of a leading edge analysis — tmodLEASummary","text":"Summary stats leading edge analysis","code":""},{"path":"https://january3.github.io/tmod/reference/tmodLEASummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary stats of a leading edge analysis — tmodLEASummary","text":"","code":"tmodLEASummary(lea, genes = FALSE, labels = NULL, mset = NULL)"},{"path":"https://january3.github.io/tmod/reference/tmodLEASummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary stats of a leading edge analysis — tmodLEASummary","text":"lea result `tmodLEA` genes TRUE, gene identifiers leading edge (joined commas) appended. labels labels add result; NULL, labels taken `mset` mset module set use. Either character vector (\"LI\", \"DC\" \"\", default: ) object class tmod (see \"Custom module definitions\" )","code":""},{"path":"https://january3.github.io/tmod/reference/tmodLEASummary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary stats of a leading edge analysis — tmodLEASummary","text":"data frame summary stats","code":""},{"path":"https://january3.github.io/tmod/reference/tmodLimmaDecideTests.html","id":null,"dir":"Reference","previous_headings":"","what":"Up- and down-regulated genes in modules based on limma object — tmodLimmaDecideTests","title":"Up- and down-regulated genes in modules based on limma object — tmodLimmaDecideTests","text":"module mset coefficient f$coefficients, function calculates numbers significantly - -regulated genes.","code":""},{"path":"https://january3.github.io/tmod/reference/tmodLimmaDecideTests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Up- and down-regulated genes in modules based on limma object — tmodLimmaDecideTests","text":"","code":"tmodLimmaDecideTests(   f,   genes,   lfc.thr = 0.5,   pval.thr = 0.05,   filter.unknown = FALSE,   adjust.method = \"BH\",   mset = \"all\" )"},{"path":"https://january3.github.io/tmod/reference/tmodLimmaDecideTests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Up- and down-regulated genes in modules based on limma object — tmodLimmaDecideTests","text":"f result linear model fit produced limma functions lmFit eBayes genes Either name column f$genes contains gene symbols corresponding gene set collection used, character vector gene symbols lfc.thr log fold change threshold pval.thr p-value threshold filter.unknown TRUE, modules annotation omitted adjust.method method used adjust p-values multiple testing. See p.adjust(). Default:BH. mset module set use (see tmodUtest details)","code":""},{"path":"https://january3.github.io/tmod/reference/tmodLimmaDecideTests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Up- and down-regulated genes in modules based on limma object — tmodLimmaDecideTests","text":"list many elements coefficients f. element list data  frame columns \"\", \"Zero\" \"\" giving number -, - -regulated genes respectively. Rows data frame correspond module IDs. object can directly used tmodPanelPlot pie parameter.","code":""},{"path":"https://january3.github.io/tmod/reference/tmodLimmaDecideTests.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Up- and down-regulated genes in modules based on limma object — tmodLimmaDecideTests","text":"f object returned eBayes(), tmodLimmaDecideTests considers every coefficient model (every column f$coefficients). coefficient, tmodLimmaDecideTests calculates, module, number genes - -regulated. short, tmodLimmaDecideTests equivalent tmodDecideTests, limma objects returned eBayes().","code":""},{"path":[]},{"path":"https://january3.github.io/tmod/reference/tmodLimmaDecideTests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Up- and down-regulated genes in modules based on limma object — tmodLimmaDecideTests","text":"","code":"if (FALSE) { data(Egambia) design <- cbind(Intercept=rep(1, 30), TB=rep(c(0,1), each= 15)) if(require(limma)) {   fit <- eBayes( lmFit(Egambia[,-c(1:3)], design))   ret <- tmodLimmaTest(fit, Egambia$GENE_SYMBOL)   pie <- tmodLimmaDecideTests(fit, Egambia$GENE_SYMBOL)   tmodPanelPlot(ret, pie=pie) } }"},{"path":"https://january3.github.io/tmod/reference/tmodLimmaTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Run tmod enrichment tests directly on a limma object — tmodLimmaTest","title":"Run tmod enrichment tests directly on a limma object — tmodLimmaTest","text":"Order genes according coefficient found limma object run enrichment test ordered list.","code":""},{"path":"https://january3.github.io/tmod/reference/tmodLimmaTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run tmod enrichment tests directly on a limma object — tmodLimmaTest","text":"","code":"tmodLimmaTest(   f,   genes,   sort.by = \"msd\",   tmodFunc = tmodCERNOtest,   coef = NULL,   ... )"},{"path":"https://january3.github.io/tmod/reference/tmodLimmaTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run tmod enrichment tests directly on a limma object — tmodLimmaTest","text":"f result linear model fit produced limma functions lmFit eBayes genes Either name column f$genes contains gene symbols corresponding gene set collection used, character vector gene symbols sort.gene names ordered: \"msd\" (default), \"pval\" \"lfc\" tmodFunc function run enrichment tests. Either tmodCERNOtest tmodUtest coef NULL, run tmod coefficients ... parameters passed tmod test function","code":""},{"path":"https://january3.github.io/tmod/reference/tmodLimmaTest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run tmod enrichment tests directly on a limma object — tmodLimmaTest","text":"list length equal number coeffients. element value returned tmod test function. list can directly passed functions tmodSummary tmodPanelPlot.","code":""},{"path":"https://january3.github.io/tmod/reference/tmodLimmaTest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run tmod enrichment tests directly on a limma object — tmodLimmaTest","text":"coefficient fit returned eBayes / lmFit functions limma package, tmodLimmaTest order genes run enrichment test return results. ordering genes according certain metric fundament gene enrichment analysis. tmodLimmaTest allows three orderings: p-values, \"MSD\" log fold changes. default MSD (\"minimal significant difference\") lower boundary 95 confidence interval positive log fold changes, 0 minus upper boundary 95 better ordering p-value log fold change. See discussion package vignette.","code":""},{"path":[]},{"path":"https://january3.github.io/tmod/reference/tmodLimmaTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run tmod enrichment tests directly on a limma object — tmodLimmaTest","text":"","code":"if (FALSE) { data(Egambia) design <- cbind(Intercept=rep(1, 30), TB=rep(c(0,1), each= 15)) if(require(limma)) {   fit <- eBayes( lmFit(Egambia[,-c(1:3)], design))   ret <- tmodLimmaTest(fit, genes=Egambia$GENE_SYMBOL)   tmodSummary(ret)   tmodPanelPlot(ret) } }"},{"path":"https://january3.github.io/tmod/reference/tmodLimmaTopTable.html","id":null,"dir":"Reference","previous_headings":"","what":"tmod's replacement for the limma topTable function — tmodLimmaTopTable","title":"tmod's replacement for the limma topTable function — tmodLimmaTopTable","text":"Produce data frame selected coefficients linear fit object, including log fold changes, q-values, confidence intervals MSD.","code":""},{"path":"https://january3.github.io/tmod/reference/tmodLimmaTopTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tmod's replacement for the limma topTable function — tmodLimmaTopTable","text":"","code":"tmodLimmaTopTable(   f,   genelist = NULL,   coef = NULL,   adjust.method = \"BH\",   confint = 0.95 )"},{"path":"https://january3.github.io/tmod/reference/tmodLimmaTopTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tmod's replacement for the limma topTable function — tmodLimmaTopTable","text":"f result linear model fit produced limma functions lmFit eBayes genelist data frame character vector additional information genes / probes coef coefficients extract adjust.method method p-value adjustment; see \"p.adjust()\" confint Confidence interval calculated","code":""},{"path":"https://january3.github.io/tmod/reference/tmodLimmaTopTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tmod's replacement for the limma topTable function — tmodLimmaTopTable","text":"data frame genes.","code":""},{"path":"https://january3.github.io/tmod/reference/tmodLimmaTopTable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"tmod's replacement for the limma topTable function — tmodLimmaTopTable","text":"Produce data frame selected coefficients linear fit object, including log fold changes, q-values, confidence intervals MSD. coefficient, four columns created output file, name consisting prefix indicating type column (\"msd\", \"logFC\", \"qval\", \"SE\", \"ci.L\", \"ci.R\") name coefficient.","code":""},{"path":[]},{"path":"https://january3.github.io/tmod/reference/tmodPCA.html","id":null,"dir":"Reference","previous_headings":"","what":"PCA plot annotated with tmod — tmodPCA","title":"PCA plot annotated with tmod — tmodPCA","text":"Generate PCA plot dimension annotated tag cloud based tmod enrichment test.","code":""},{"path":"https://january3.github.io/tmod/reference/tmodPCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PCA plot annotated with tmod — tmodPCA","text":"","code":"tmodPCA(   pca,   loadings = NULL,   genes,   tmodfunc = \"tmodCERNOtest\",   plotfunc = pcaplot,   mode = \"simple\",   components = c(1, 2),   plot.params = NULL,   filter = TRUE,   simplify = TRUE,   legend = FALSE,   maxn = NULL,   plot = TRUE,   ... )"},{"path":"https://january3.github.io/tmod/reference/tmodPCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PCA plot annotated with tmod — tmodPCA","text":"pca Object returned prcomp matrix PCA coordinates. latter case, loading matrix must provided separately. loadings matrix loadings genes character vector gene identifiers tmodfunc Name tmod enrichment test function use. Either plotfunc Function plotting PCA plot. See Details mode Type plot generate; see Details. tmodCERNOtest tmodUtest (tmodHGtest suitable) components integer vector length two: components components show plot. Must smaller number columns pca. plot.params list parameters passed plotting function. See Details filter Whether \"uninteresting\" modules (annotation) removed tag cloud simplify Whether names modules simplified legend whether legend shown maxn Maximum number gene set enrichment terms shown plot (NULL – default – terms shown) plot FALSE, plot shown, enrichments calculated returned invisibly ... parameters passed tmod test function","code":""},{"path":"https://january3.github.io/tmod/reference/tmodPCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PCA plot annotated with tmod — tmodPCA","text":"list containing calculated enrichments well return value plotting function","code":""},{"path":"https://january3.github.io/tmod/reference/tmodPCA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PCA plot annotated with tmod — tmodPCA","text":"three types plots can generated (parameter \"mode\"): simple, leftbottom cross. \"simple\" mode, two enrichments run, component, sorted absolute loadings PCA components. \"leftbottom\" \"cross\" run two enrichment analyses component, one loadings sorted lowest largest, one loadings sorted largetst lowest. Thus, two tag clouds displayed per component. \"leftbottom\" mode, tag clouds displayed left PCA plot. \"cross\" mode, tag clouds displayed four sides plot. default, plotting function pca2d pca3d package. additional parametrs pca2d can passed using plot.params parameter. can define function instead pca2d, however, mind case, two parameters passed first two positions: pca components, named \"pca\" \"components\" respectively.","code":""},{"path":"https://january3.github.io/tmod/reference/tmodPCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PCA plot annotated with tmod — tmodPCA","text":"","code":"data(Egambia) E <- as.matrix(Egambia[,-c(1:3)]) pca <- prcomp(t(E), scale.=TRUE) group <- rep(c(\"CTRL\", \"TB\"), each=15) tmodPCA(pca,    genes=Egambia$GENE_SYMBOL,    components=4:3,   plot.params=list(group=group))"},{"path":"https://january3.github.io/tmod/reference/tmodPal.html","id":null,"dir":"Reference","previous_headings":"","what":"A selection of color palettes — tmodPal","title":"A selection of color palettes — tmodPal","text":"Return preset selection colors, adjusted alpha","code":""},{"path":"https://january3.github.io/tmod/reference/tmodPal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A selection of color palettes — tmodPal","text":"","code":"tmodPal(n = NULL, set = \"friendly\", alpha = 0.7, func = FALSE)"},{"path":"https://january3.github.io/tmod/reference/tmodPal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A selection of color palettes — tmodPal","text":"n Number colors return (default: \"friendly\", 3 everything else) set palette set (see Details). alpha 0 maximum transparency, 1 transparency. func TRUE, returned object function rather character vector","code":""},{"path":"https://january3.github.io/tmod/reference/tmodPal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A selection of color palettes — tmodPal","text":"Either character vector, , func parameter TRUE,         function takes one argument (single number)","code":""},{"path":"https://january3.github.io/tmod/reference/tmodPal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A selection of color palettes — tmodPal","text":"palettes predefined tmod, function can used extract . following palettes defined: * friendly -- set distinct, colorblind-friendly colors * bwr, rwb, ckp, pkc -- gradients (b-blue, r-red, w-white, c-cyan, k-blacK, p-purple) default, either colors returned, , gradient palette, three.","code":""},{"path":"https://january3.github.io/tmod/reference/tmodPanelPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a summary of multiple tmod analyses — tmodPanelPlot","title":"Plot a summary of multiple tmod analyses — tmodPanelPlot","text":"Plot summary multiple tmod analyses","code":""},{"path":"https://january3.github.io/tmod/reference/tmodPanelPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a summary of multiple tmod analyses — tmodPanelPlot","text":"","code":"tmodPanelPlot(   x,   pie = NULL,   clust = \"qval\",   select = NULL,   filter.empty.cols = FALSE,   filter.empty.rows = TRUE,   filter.unknown = TRUE,   filter.rows.pval = 0.05,   filter.rows.auc = 0.5,   filter.by.id = NULL,   col.labels = NULL,   col.labels.style = \"top\",   row.labels = NULL,   row.labels.auto = \"both\",   pval.thr = 10^-2,   pval.thr.lower = 10^-6,   plot.func = NULL,   grid = \"at\",   pie.colors = c(\"#0000FF\", \"#cccccc\", \"#FF0000\"),   plot.cex = 1,   text.cex = 1,   pie.style = \"auto\",   min.e = 0.5,   max.e = 1,   legend.style = \"auto\",   ... )"},{"path":"https://january3.github.io/tmod/reference/tmodPanelPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a summary of multiple tmod analyses — tmodPanelPlot","text":"x either list, element generated tmod test function, result tmodSummary function pie list data frames information drawing pie chart clust whether, resulting data frame, modules ordered clustering either q-values (\"qval\") effect size (\"effect\"). \"sort\" NULL, modules sorted alphabetically ID. \"keep\", order modules kept. select character vector module IDs show. clust == \"keep\", particular order. filter.empty.cols TRUE, elements (columns) enrichment pval.thr row removed filter.empty.rows TRUE, modules (rows) enrichment pval.thr column removed filter.unknown TRUE, modules annotation omitted filter.rows.pval Rows p value threshold omitted filter.rows.auc Rows AUC value threshold omitted filter..id provided, show modules IDs character vector col.labels Labels columns. NULL, names elements list x used. col.labels.style Style column names: \"top\" (default), \"bottom\", \"\", \"none\" row.labels Labels modules. must named vector, module IDs vector names. NULL, module titles analyses results used. row.labels.auto Automatic generation row labels module data: \"\" \"auto\" (default, ID title), \"id\" (ID), \"title\" (title), \"none\" (row label) pval.thr Results p-value pval.thr shown pval.thr.lower Results p-value pval.thr.lower look identical plot plot.func Optionally, function used draw dots. See \"pvalEffectPlot\" grid Style light-grey grid plotted; can \"none\", \"\" \"\" pie.colors character vector length equal cardinality third dimension pie argument. default: blue, grey red. plot.cex numerical value giving amount plot symbols maginfied text.cex numerical value giving amount plot text magnified, vector containing three cex values row labels, column labels legend, respectively pie.style Can \"auto\" (default), \"dot\", \"symdot\", \"pie\", \"boxpie\", \"rug\" (see Details) min.e, max.e scale limits effect size (default: 0.5 1.0) legend.style Style legend: \"auto\" -- automatic; \"broad\": pval legend side side effect size legend; \"tall\": effect size legend pval legend ... arguments passed pvalEffectPlot function (example, grid.color)","code":""},{"path":"https://january3.github.io/tmod/reference/tmodPanelPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a summary of multiple tmod analyses — tmodPanelPlot","text":"data frame line module encountered anywhere list x, two columns describing module (ID module title), two columns(effect size q value) element list x.","code":""},{"path":"https://january3.github.io/tmod/reference/tmodPanelPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a summary of multiple tmod analyses — tmodPanelPlot","text":"function useful run analysis several conditions time points like summarize information plot. can use lapply() generate list tmod results use tmodPanelPlot visualize . tmodPanelPlot shows heatmap-like plot. row corresponds one module, columns correspond time points conditions tmod analyses run. significantly enriched module shown red dot. Size dot corresponds effect size (example, AUC CERNO test), intensity color corresponds q-value. default, tmodPanelPlot visualizes results single statistical test red dot, blue red dots effect sizes  negative positive. However, often interesting know many genes module significantly - regulated. tmodPanelPlot can draw pie chart based optional argument \"pie\". argument must list length equal length x. Note also names pie list must equal names x. Objects returned function tmodDecideTests can directly used . rownames either data frame array must module IDs.","code":""},{"path":[]},{"path":"https://january3.github.io/tmod/reference/tmodPanelPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a summary of multiple tmod analyses — tmodPanelPlot","text":"","code":"data(Egambia) E <- Egambia[,-c(1:3)] pca <- prcomp(t(E), scale.=TRUE)  # Calculate enrichment for first 5 PCs gs   <- Egambia$GENE_SYMBOL gn.f <- function(r) {     o <- order(abs(r), decreasing=TRUE)     tmodCERNOtest(gs[o],                  qval=0.01) } x <- apply(pca$rotation[,3:4], 2, gn.f) tmodPanelPlot(x, text.cex=0.7)"},{"path":"https://january3.github.io/tmod/reference/tmodSummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a summary of multiple tmod analyses — tmodSummary","title":"Create a summary of multiple tmod analyses — tmodSummary","text":"Create summary multiple tmod analyses","code":""},{"path":"https://january3.github.io/tmod/reference/tmodSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a summary of multiple tmod analyses — tmodSummary","text":"","code":"tmodSummary(   x,   clust = NULL,   filter.empty = FALSE,   filter.unknown = TRUE,   select = NULL,   effect.col = NULL,   pval.col = \"adj.P.Val\" )"},{"path":"https://january3.github.io/tmod/reference/tmodSummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a summary of multiple tmod analyses — tmodSummary","text":"x list, element generated tmod test function clust whether, resulting data frame, modules ordered clustering either q-values (\"qval\") effect size (\"effect\"). \"sort\" NULL, modules sorted alphabetically ID. \"keep\", order modules kept. filter.empty TRUE, elements (columns) significant enrichment removed filter.unknown TRUE, modules annotation omitted select character vector module IDs show. clust == \"keep\", particular order. effect.col name column effect size (NULL, default, effect size taken tmod results object attributes) pval.col name p-value column","code":""},{"path":"https://january3.github.io/tmod/reference/tmodSummary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a summary of multiple tmod analyses — tmodSummary","text":"data frame line module encountered anywhere list x, two columns describing module (ID module title), two columns(effect size q value) element list x.","code":""},{"path":"https://january3.github.io/tmod/reference/tmodSummary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a summary of multiple tmod analyses — tmodSummary","text":"function useful run analysis several conditions time points like summarize information single data frame. can use lapply() generate list tmod results use tmodSummary convert data frame.","code":""},{"path":[]},{"path":"https://january3.github.io/tmod/reference/tmodSummary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a summary of multiple tmod analyses — tmodSummary","text":"","code":"if (FALSE) { data(Egambia) E <- Egambia[,-c(1:3)] pca <- prcomp(t(E), scale.=TRUE)  # Calculate enrichment for each component gs   <- Egambia$GENE_SYMBOL gn.f <- function(r) {     tmodCERNOtest(gs[order(abs(r),                  decreasing=TRUE)],                  qval=0.01) } x <- apply(pca$rotation, 2, gn.f) tmodSummary(x) }"},{"path":"https://january3.github.io/tmod/reference/tmodTagcloud.html","id":null,"dir":"Reference","previous_headings":"","what":"Tag cloud based on tmod results — tmodTagcloud","title":"Tag cloud based on tmod results — tmodTagcloud","text":"Plot tag (word) cloud based results tmod enrichment.","code":""},{"path":"https://january3.github.io/tmod/reference/tmodTagcloud.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tag cloud based on tmod results — tmodTagcloud","text":"","code":"tmodTagcloud(   results,   filter = TRUE,   simplify = TRUE,   tag.col = \"Title\",   min.auc = 0.5,   max.qval = 0.05,   plot = TRUE,   weights.col = \"auto\",   pval.col = \"P.Value\",   maxn = NULL,   ... )"},{"path":"https://january3.github.io/tmod/reference/tmodTagcloud.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tag cloud based on tmod results — tmodTagcloud","text":"results data frame produced one tmod enrichment tests filter Whether redundant annotated modules removed simplify Whether module names simplified tag.col column results used tags plot min.auc Minimal AUC show (default: 0.5) max.qval Maximal adjusted p value show (default: 0.05) plot tag cloud plotted returned weights.col column results used weights tag cloud pval.col column contains P values used shade tags maxn Maximum number gene set enrichment terms shown plot (NULL – default – terms shown) ... parameters passed tagcloud function","code":""},{"path":"https://january3.github.io/tmod/reference/tmodTagcloud.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tag cloud based on tmod results — tmodTagcloud","text":"Either NULL whatever tagcloud returns","code":""},{"path":"https://january3.github.io/tmod/reference/tmodTagcloud.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tag cloud based on tmod results — tmodTagcloud","text":"tags generated based results tmod suitable data frame. data frame must contain two numeric columns, specified \"weights.col\" \"pval.col\", used calculate size shade tags, respectively. Furthermore, contain column tags (parameter \"tag.col\", default \"Title\"). data frame can used long contains specified columns.","code":""},{"path":"https://january3.github.io/tmod/reference/tmodTagcloud.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tag cloud based on tmod results — tmodTagcloud","text":"","code":"data(tmod) fg <- getModuleMembers(\"LI.M127\")[[1]] bg <- tmod$gv result <- tmodHGtest( fg, bg ) tmodTagcloud(result)"},{"path":"https://january3.github.io/tmod/reference/tmodUtest.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a statistical test of module expression — tmodUtest","title":"Perform a statistical test of module expression — tmodUtest","text":"Perform statistical test module expression","code":""},{"path":"https://january3.github.io/tmod/reference/tmodUtest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a statistical test of module expression — tmodUtest","text":"","code":"tmodUtest(   l,   modules = NULL,   qval = 0.05,   order.by = \"pval\",   filter = FALSE,   mset = \"all\",   cols = \"Title\",   useR = FALSE,   nodups = TRUE )  tmodGeneSetTest(   l,   x,   modules = NULL,   qval = 0.05,   order.by = \"pval\",   filter = FALSE,   mset = \"all\",   cols = \"Title\",   Nsim = 1000,   nodups = TRUE )  tmodCERNOtest(   l,   modules = NULL,   qval = 0.05,   order.by = \"pval\",   filter = FALSE,   mset = \"all\",   cols = \"Title\",   nodups = TRUE )  tmodPLAGEtest(   l,   x,   group,   modules = NULL,   qval = 0.05,   order.by = \"pval\",   mset = \"all\",   cols = \"Title\",   filter = FALSE,   nodups = TRUE )  tmodZtest(   l,   modules = NULL,   qval = 0.05,   order.by = \"pval\",   filter = FALSE,   mset = \"all\",   cols = \"Title\",   nodups = TRUE )  tmodHGtest(   fg,   bg,   modules = NULL,   qval = 0.05,   order.by = \"pval\",   filter = FALSE,   mset = \"all\",   cols = \"Title\",   nodups = TRUE )"},{"path":"https://january3.github.io/tmod/reference/tmodUtest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a statistical test of module expression — tmodUtest","text":"l sorted list HGNC gene identifiers modules optional list modules make test qval Threshold FDR value report order.Order P value (\"pval\") none (\"none\") filter Remove gene names module assignments mset module set use. Either character vector (\"LI\", \"DC\" \"\", default: ) object class tmod (see \"Custom module definitions\" ) cols columns MODULES data frame included resulsts useR use R wilcox.test function; slow, exact p-values small samples nodups Remove duplicate gene names l corresponding rows ranks x Expression matrix tmodPLAGEtest; vector tmodGeneSetTest Nsim tmodGeneSetTest, number replicates randomization test group group assignments tmodPLAGEtest fg foreground gene set HG test bg background gene set HG test","code":""},{"path":"https://january3.github.io/tmod/reference/tmodUtest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a statistical test of module expression — tmodUtest","text":"statistical tests return data frame module names, additional statistic (e.g. enrichment AUC, depending test), P value FDR q-value (P value corrected multiple testing using p.adjust function Benjamini-Hochberg correction. data frame class 'colorDF' (see package colorDF details), except printing using colors terminal behaves just like ordinary data.frame. strip coloring, use [colorDF::uncolor()].","code":""},{"path":"https://january3.github.io/tmod/reference/tmodUtest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform a statistical test of module expression — tmodUtest","text":"Performs test either ordered list genes (tmodUtest, tmodCERNOtest, tmodZtest) two groups genes (tmodHGtest). tmodUtest U test ranks genes contained module. tmodCERNOtest also nonparametric test working gene ranks, originates Fisher's combined probability test. test weights genes lower ranks , resulting p-values better correspond observed effect size. effect, modules small effect many genes get higher p-values case U-test. tmodPLAGEtest based PLAGE, \"Pathway level analysis gene expression\" published Tomfohr, Lu Kepler (2005), doi 10.1186/1471-2105-6-225. essence just t-test run module eigengenes, performs really well. approach can used complex linear model; , use function eigengene(). See users guide details. tmodZtest works much like tmodCERNOtest, instead combining rank-derived p-values using Fisher's method, uses Stouffer method (known also Z-transform test). tmodGeneSetTest implementation function geneSetTest limma package (note tmodUtest equivalent limma's wilcoxGST function). discussion three methods, read M. C. Whitlock, \"Combining probability independent tests: weighted Z-method superior Fisher's approach\", J. Evol. Biol. 2005 (doi: 10.1111/j.1420-9101.2005.00917.x) details. tmodHGtest simply hypergeometric test. tmod, two module sets can used, \"LI\" (Li et al. 2013), \"DC\" (Chaussabel et al. 2008). Using parameter \"mset\", module set can selected, , mset \"\", sets used.","code":""},{"path":"https://january3.github.io/tmod/reference/tmodUtest.html","id":"custom-module-definitions","dir":"Reference","previous_headings":"","what":"Custom module definitions","title":"Perform a statistical test of module expression — tmodUtest","text":"Custom arbitrary module, gene set pathway definitions can also provided mset option, parameter list rather character vector. list parameter mset must contain following members: \"MODULES\", \"MODULES2GENES\" \"GENES\". \"MODULES\" \"GENES\" data frames. required MODULES contains following columns: \"ID\", specifying unique identifier module, \"Title\", containing description module. data frame \"GENES\" must contain column \"ID\". list MODULES2GENES mapping modules genes. names list must correspond ID column MODULES data frame. members list character vectors, values vectors must correspond ID column GENES data frame.","code":""},{"path":[]},{"path":"https://january3.github.io/tmod/reference/tmodUtest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a statistical test of module expression — tmodUtest","text":"","code":"data(tmod) fg <- tmod$MODULES2GENES[[\"LI.M127\"]] bg <- tmod$GENES$ID result <- tmodHGtest( fg, bg ) #> Warning: No genes in bg match any of the genes in the GENES #> Warning: No genes in fg match any of the genes in the GENES  ## A more sophisticated example ## Gene set enrichment in TB patients compared to  ## healthy controls (Egambia data set) if (FALSE) { data(Egambia) library(limma) design <- cbind(Intercept=rep(1, 30), TB=rep(c(0,1), each= 15)) fit <- eBayes( lmFit(Egambia[,-c(1:3)], design)) tt <- topTable(fit, coef=2, number=Inf, genelist=Egambia[,1:3] ) tmodUtest(tt$GENE_SYMBOL) tmodCERNOtest(tt$GENE_SYMBOL) }"},{"path":"https://january3.github.io/tmod/reference/tmod_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Query and set IDs of gene sets in a tmodGS object — tmod_ids","title":"Query and set IDs of gene sets in a tmodGS object — tmod_ids","text":"Query set IDs (tmod_id) Titles (tmod_title) gene sets tmodGS object","code":""},{"path":"https://january3.github.io/tmod/reference/tmod_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query and set IDs of gene sets in a tmodGS object — tmod_ids","text":"","code":"tmod_ids(x)  tmod_ids(x) <- value  tmod_titles(x)  tmod_titles(x) <- value"},{"path":"https://january3.github.io/tmod/reference/tmod_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query and set IDs of gene sets in a tmodGS object — tmod_ids","text":"x object class tmodGS value character vector unique IDs","code":""},{"path":"https://january3.github.io/tmod/reference/tmod_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query and set IDs of gene sets in a tmodGS object — tmod_ids","text":"Returns character vector corresponding x$gs$ID","code":""},{"path":"https://january3.github.io/tmod/reference/tmod_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query and set IDs of gene sets in a tmodGS object — tmod_ids","text":"","code":"data(tmod) mset <- tmod[ c(\"LI.M37.0\", \"LI.M75\", \"LI.M3\") ] tmod_ids(mset) #> [1] \"LI.M37.0\" \"LI.M75\"   \"LI.M3\"    tmod_ids(mset) <- c(\"em\", \"pstrem\", \"bzdrem\") tmod_titles(mset) <- c(\"foo\", \"bar\", \"baz\") mset$gs #> # A tibble: 3 × 9 #>   ID     Title Category  Annotated URL         Source SourceID original.ID     B #>   <chr>  <chr> <chr>     <chr>     <chr>       <chr>  <chr>    <chr>       <int> #> 1 em     foo   immune    Yes       http://www… Li et… LI       M37.0         347 #> 2 pstrem bar   immune    Yes       http://www… Li et… LI       M75            22 #> 3 bzdrem baz   signaling Yes       http://www… Li et… LI       M3             47"},{"path":"https://january3.github.io/tmod/reference/upset.html","id":null,"dir":"Reference","previous_headings":"","what":"Upset plot — upset","title":"Upset plot — upset","text":"Upset plots help interpret results gene set enrichment.","code":""},{"path":"https://january3.github.io/tmod/reference/upset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upset plot — upset","text":"","code":"upset(   modules,   mset = NULL,   min.size = 2,   min.overlap = 2,   max.comb = 4,   min.group = 2,   value = \"number\",   cutoff = NULL,   labels = NULL,   group.stat = \"jaccard\",   group.cutoff = 0.1,   group = TRUE,   pal = brewer.pal(8, \"Dark2\"),   lab.cex = 1 )"},{"path":"https://january3.github.io/tmod/reference/upset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upset plot — upset","text":"modules optional list modules make test mset module set use. Either character vector (\"LI\", \"DC\" \"\", default: ) object class tmod (see \"Custom module definitions\" ) min.size minimal number modules comparison show min.overlap smallest overlap (number elements) two modules plot max.comb Maximum number combinations show (.e., number dots every vertical segment upset plot) min.group Minimum number modules group. Group smaller number members ignored. Change value  1 see also modules grouped. value show plot: \"number\" (number common elements; default), \"soerensen\" (Sørensen–Dice coefficient),  \"overlap\" (Szymkiewicz–Simpson coefficient) \"jaccard\" (Jaccard index) cutoff Combinations `value` cutoff shown. labels Labels modules. Character vector length `modules` group.stat Statistics finding groups  (can \"number\", \"overlap\", \"soerensen\" \"jaccard\"; see function modOverlaps) group.cutoff cutoff group statistics group modules grouped overlap? pal Color palette show groups. lab.cex Initial cex (font size) labels","code":""},{"path":"https://january3.github.io/tmod/reference/upset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upset plot — upset","text":"upset returns invisibly identified module groups: list         character vectors.","code":""},{"path":"https://january3.github.io/tmod/reference/upset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Upset plot — upset","text":"plot consists three parts. main part shows overlaps different modules (module can gene set, example). row corresponds one module. column corresponds intersection one gene sets. Dots show gene sets combination. combinations shown depends parameters `min.overlap` (cutoff similarity measure specified `value` parameter), parameter `min.group` specifies minimum number modules group parameter `max.comb` specifies maximum number combinations tested (many combinations messing plot). intersections, see plot showing similarity measure intersected gene sets. default number module members (genes case gene set), several measures (e.g. Jaccard index) also implemented. left module descriptions (parameter `label`; label empty, labels taken mset object provided , NULL, default tmod module set). function attempts scale text way labels visible. default, upset attempts group modules. done defining similarity measure (default Jaccard index, parameter `group.stat`) cutoff threshold (parameter `group.cutoff`).","code":""},{"path":[]},{"path":"https://january3.github.io/tmod/reference/upset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upset plot — upset","text":"","code":"if (FALSE) { data(Egambia) design <- cbind(Intercept=rep(1, 30), TB=rep(c(0,1), each= 15)) library(limma) fit <- eBayes( lmFit(Egambia[,-c(1:3)], design)) tt <- topTable(fit, coef=2, number=Inf, genelist=Egambia[,1:3] ) res <- tmodCERNOtest(tt$GENE_SYMBOL)  upset(res$ID, group.cutoff=.1, value=\"jaccard\") }"},{"path":"https://january3.github.io/tmod/reference/vaccination.html","id":null,"dir":"Reference","previous_headings":"","what":"Transcriptomic responses to vaccination — vaccination","title":"Transcriptomic responses to vaccination — vaccination","text":"Transcriptomic responses vaccination","code":""},{"path":"https://january3.github.io/tmod/reference/vaccination.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Transcriptomic responses to vaccination — vaccination","text":"Data frame one row per gene containing log fold changes FDR (q values) Fluad vaccine compared placebo day 0, day 1, day 2 day 3 vaccination.","code":""},{"path":"https://january3.github.io/tmod/reference/vaccination.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transcriptomic responses to vaccination — vaccination","text":"data shows time course transcriptomic responses influenza vaccination healthy volunteers. source data  GEO project PRJNA515032, associated following paper: Weiner, January, et al. \"Characterization potential biomarkers reactogenicity licensed antiviral vaccines: randomized controlled clinical trials conducted BIOVACSAFE consortium.\" Scientific reports 9.1 (2019): 1-14. data set, 3000 genes top variance chosen.","code":""}]
